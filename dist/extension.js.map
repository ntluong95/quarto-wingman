{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://quarto-wingman/external commonjs \"positron\"","webpack://quarto-wingman/external commonjs \"vscode\"","webpack://quarto-wingman/./src/hoverProvider.ts","webpack://quarto-wingman/./src/repl.ts","webpack://quarto-wingman/webpack/bootstrap","webpack://quarto-wingman/./src/extension.ts"],"sourcesContent":["module.exports = require(\"positron\");","module.exports = require(\"vscode\");","import * as vscode from 'vscode';\r\n\r\n// Raw descriptions grouped by section, now supporting bullet points\r\nconst cellOptions: Record<string, Record<string, string[]>> = {\r\n  Attributes: {\r\n    label: [\r\n      '`label` — Unique label for code cell. Used when other code needs to refer to the cell (e.g. for cross references `fig-samples` or `tbl-summary`).'\r\n    ],\r\n    classes: ['`classes` — Classes to apply to cell container.'],\r\n    tags: ['`tags` — Array of tags for notebook cell.'],\r\n    id: ['`id` — Notebook cell identifier. If no `id` is present, `label` will be used instead. See [Jupyter proposal](https://jupyter.org/enhancement-proposals/62-cell-id/cell-id.html)']\r\n  },\r\n  \"Code Output\": {\r\n    eval: [\r\n      '`eval` — Evaluate code cells (if `false` just echos the code into output).',\r\n      '',\r\n      '- `true` (default): evaluate code cell',\r\n      '- `false`: don’t evaluate code cell',\r\n      '- `[...]:` Selectively include/exclude lines (knitr only)'\r\n    ],\r\n    echo: [\r\n      '`echo` — Include cell source code in rendered output.',\r\n      '',\r\n      '- `true` (default): include source code',\r\n      '- `false`: do not include code (e.g. in beamer, revealjs, pptx)',\r\n      '- `fenced`: also include code block delimiter',\r\n      '- `[...]:` Selectively show lines (knitr only)'\r\n    ],\r\n    \"code-fold\": [\r\n      '`code-fold` — Collapse code into an HTML `<details>` tag.',\r\n      '',\r\n      '- `true`: collapse code',\r\n      '- `false` (default): do not collapse',\r\n      '- `show`: initially expanded'\r\n    ],\r\n    \"code-summary\": ['`code-summary` — Summary text shown on collapsed code blocks.'],\r\n    \"code-overflow\": ['`code-overflow` — Choose overflow strategy (e.g. `scroll`, `wrap`).'],\r\n    \"code-line-numbers\": [\r\n      '`code-line-numbers` — Include line numbers or specify highlight animation.',\r\n      '',\r\n      'Examples:',\r\n      '- `true`, `false`',\r\n      '- `3,4,5`',\r\n      '- `1-3,5`',\r\n      '- `|5|5-10,12`'\r\n    ],\r\n    \"lst-label\": ['`lst-label` — Label for code listing (used for cross references).'],\r\n    \"lst-cap\": ['`lst-cap` — Caption for code listing.']\r\n  },\r\n  \"Cell Output\": {\r\n    output: [\r\n      '`output` — Include code execution results in output.',\r\n      '',\r\n      '- `true`: include results',\r\n      '- `false`: hide results',\r\n      '- `asis`: treat as raw markdown'\r\n    ],\r\n    warning: ['`warning` — Include warnings in rendered output.'],\r\n    error: ['`error` — Include errors in output, execution continues.'],\r\n    include: ['`include` — Master switch to exclude all code/results from output.'],\r\n    panel: ['`panel` — Panel type: `tabset`, `input`, `sidebar`, `fill`, `center`.'],\r\n    \"output-location\": [\r\n      '`output-location` — Where to place output relative to code.',\r\n      '',\r\n      '- `default`',\r\n      '- `fragment`',\r\n      '- `slide`',\r\n      '- `column`, `column-fragment` (revealjs only)'\r\n    ]\r\n  },\r\n  Figures: {\r\n    \"fig-cap\": ['`fig-cap` — Caption for figure.'],\r\n    \"fig-subcap\": ['`fig-subcap` — Subcaptions for figures.'],\r\n    \"fig-link\": ['`fig-link` — Hyperlink target for the figure.'],\r\n    \"fig-align\": ['`fig-align` — left, right, center, default.'],\r\n    \"fig-alt\": ['`fig-alt` — Alternative text for images.'],\r\n    \"fig-env\": ['`fig-env` — LaTeX environment for figures.'],\r\n    \"fig-pos\": ['`fig-pos` — LaTeX figure position (e.g. `H`, or false for none).'],\r\n    \"fig-scap\": ['`fig-scap` — Short caption (used in PDF lists).']\r\n  },\r\n  Tables: {\r\n    \"tbl-cap\": ['`tbl-cap` — Table caption.'],\r\n    \"tbl-subcap\": ['`tbl-subcap` — Table subcaptions.'],\r\n    \"tbl-colwidths\": [\r\n      '`tbl-colwidths` — Explicit column widths for wide tables.',\r\n      '',\r\n      '- `auto`, `true`, `false`',\r\n      '- `[40, 30, 30]`: percentage widths'\r\n    ],\r\n    \"html-table-processing\": ['`html-table-processing` — If `none`, don’t touch raw HTML tables.']\r\n  },\r\n  \"Panel Layout\": {\r\n    layout: ['`layout` — 2D array of widths to layout blocks side-by-side or stacked.'],\r\n    \"layout-ncol\": ['`layout-ncol` — Number of layout columns.'],\r\n    \"layout-nrow\": ['`layout-nrow` — Number of layout rows.'],\r\n    \"layout-align\": ['`layout-align` — Horizontal alignment of layout (left, center, right).'],\r\n    \"layout-valign\": ['`layout-valign` — Vertical alignment of layout (top, center, bottom).']\r\n  },\r\n  \"Page Columns\": {\r\n    column: ['`column` — Output column for page layout.'],\r\n    \"fig-column\": ['`fig-column` — Column for figure.'],\r\n    \"tbl-column\": ['`tbl-column` — Column for table.'],\r\n    \"cap-location\": ['`cap-location` — Caption position (top, bottom, margin).'],\r\n    \"fig-cap-location\": ['`fig-cap-location` — Caption for figure.'],\r\n    \"tbl-cap-location\": ['`tbl-cap-location` — Caption for table.']\r\n  }\r\n};\r\n\r\nexport function registerCellOptionHoverProvider(context: vscode.ExtensionContext) {\r\n  context.subscriptions.push(\r\n    vscode.languages.registerHoverProvider(['python', 'r'], {\r\n      provideHover(document, position) {\r\n        const line = document.lineAt(position.line).text;\r\n        if (!/^#\\s?\\|/.test(line.trimStart())) return;\r\n\r\n        const range = document.getWordRangeAtPosition(position, /[a-zA-Z0-9_-]+/);\r\n        if (!range) return;\r\n\r\n        const word = document.getText(range);\r\n\r\n        for (const groupKey in cellOptions) {\r\n          const group = cellOptions[groupKey];\r\n          if (Object.prototype.hasOwnProperty.call(group, word)) {\r\n            const markdown = new vscode.MarkdownString();\r\n            markdown.appendMarkdown(`### ${groupKey}\\n\\n`);\r\n            markdown.appendMarkdown(group[word].join('\\n'));\r\n            // markdown.appendCodeblock(`#| ${word}: ...`, 'qmd');\r\n            markdown.isTrusted = true;\r\n            return new vscode.Hover(markdown);\r\n          }\r\n        }\r\n        return;\r\n      }\r\n    })\r\n  );\r\n}\r\n","import * as vscode from 'vscode';\r\nimport * as positron from 'positron';\r\n\r\nfunction reportError(msg: string) {\r\n    return (err: string) => console.error(`${msg}: ${err}`);\r\n}\r\n\r\nconst replPattern = /^(\\s*#>?\\s+)?>>>(.*)$/;\r\n\r\nexport function registerInlineRepl(context: vscode.ExtensionContext) {\r\n    const selector: vscode.DocumentSelector = [\r\n        { language: 'python', scheme: 'file' },\r\n        { language: 'r', scheme: 'file' }\r\n    ];\r\n\r\n    function detectLanguage(document: vscode.TextDocument): 'python' | 'r' | null {\r\n        const langId = document.languageId;\r\n        if (langId === 'python') return 'python';\r\n        if (langId === 'r') return 'r';\r\n        return null;\r\n    }\r\n\r\n    function parseReplBlockAt(\r\n        document: vscode.TextDocument, lineNum: number):\r\n        [number, null | {\r\n            headerRange: vscode.Range,\r\n            outputRange: vscode.Range,\r\n            commands: string[],\r\n            prefix: string\r\n        }] {\r\n        const { lineCount } = document;\r\n        const headerLine = document.lineAt(lineNum);\r\n        const header = headerLine.text.trimEnd();\r\n        const headerRes = replPattern.exec(header);\r\n        if (!headerRes) return [lineNum + 1, null];\r\n\r\n        const headerLineNum = lineNum;\r\n        const prefix = headerRes[1] || '';\r\n        const commands: string[] = [];\r\n\r\n        for (; lineNum < lineCount; lineNum++) {\r\n            const line = document.lineAt(lineNum).text.trimEnd();\r\n            const lineRes = replPattern.exec(line);\r\n            if (line.startsWith(prefix) && lineRes !== null) {\r\n                commands.push(lineRes[2]);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        const outputLineNum = lineNum;\r\n\r\n        for (; lineNum < lineCount; lineNum++) {\r\n            const line = document.lineAt(lineNum).text.trimEnd();\r\n            if (line === prefix.trim()) {\r\n                lineNum++;\r\n                break;\r\n            }\r\n            if (replPattern.test(line) || !line.startsWith(prefix)) break;\r\n        }\r\n\r\n        const headerRange = new vscode.Range(\r\n            document.lineAt(headerLineNum).range.start,\r\n            document.lineAt(outputLineNum - 1).range.end\r\n        );\r\n\r\n        const outputRange = new vscode.Range(\r\n            document.lineAt(outputLineNum).range.start,\r\n            outputLineNum === lineNum\r\n                ? document.lineAt(outputLineNum).range.start\r\n                : document.lineAt(lineNum - 1).range.end\r\n        );\r\n\r\n        return [lineNum, { headerRange, outputRange, commands, prefix }];\r\n    }\r\n\r\n    function generateReplacement(\r\n        response: string,\r\n        outputRange: vscode.Range,\r\n        prefix: string\r\n    ): string {\r\n        let responseLines = response.split(/\\r?\\n/);\r\n        if (responseLines[0] === '') responseLines.shift();\r\n        if (responseLines[responseLines.length - 1] === '') responseLines.pop();\r\n        const commentPrefix = prefix || '# ';\r\n        const outputLines = responseLines.map(line => commentPrefix + (line === '' ? '<BLANKLINE>' : line));\r\n        const end = outputRange.isEmpty ? '\\n' : '';\r\n        return outputLines.map(s => s + '\\n').join('') + commentPrefix.trim() + end;\r\n    }\r\n\r\n    async function runInlineRepl(\r\n        editor: vscode.TextEditor,\r\n        edit: vscode.TextEditorEdit,\r\n        arg?: { headerLineNum: number; isRunning: { flag: boolean } }\r\n    ): Promise<void> {\r\n        if (!arg) return;\r\n        const { headerLineNum, isRunning } = arg;\r\n        if (isRunning.flag) return;\r\n        isRunning.flag = true;\r\n\r\n        const lang = detectLanguage(editor.document);\r\n        if (!lang) return;\r\n\r\n        const [, res] = parseReplBlockAt(editor.document, headerLineNum);\r\n        if (!res) return;\r\n        const { outputRange, commands, prefix } = res;\r\n\r\n        const codeBlock = commands.join('\\n');\r\n\r\n        try {\r\n            const result = await positron.runtime.executeCode(\r\n                lang,\r\n                codeBlock,\r\n                false,\r\n                undefined,\r\n                positron.RuntimeCodeExecutionMode.Interactive\r\n            );\r\n\r\n            const replacement = generateReplacement(result.output, outputRange, prefix);\r\n            await editor.edit(e => e.replace(outputRange, replacement));\r\n        } catch (e) {\r\n            console.error('REPL execution failed:', e);\r\n        } finally {\r\n            isRunning.flag = false;\r\n        }\r\n    }\r\n\r\n    context.subscriptions.push(\r\n        vscode.commands.registerTextEditorCommand(\r\n            'inline-repl.run',\r\n            (editor, edit, arg) => {\r\n                runInlineRepl(editor, edit, arg).catch(reportError('Inline REPL error'));\r\n            }\r\n        )\r\n    );\r\n\r\n    context.subscriptions.push(\r\n        vscode.languages.registerCodeLensProvider(selector, {\r\n            provideCodeLenses(document: vscode.TextDocument): vscode.ProviderResult<vscode.CodeLens[]> {\r\n                const codeLenses: vscode.CodeLens[] = [];\r\n                const lineCount = document.lineCount;\r\n\r\n                for (let lineNum = 0; lineNum < lineCount;) {\r\n                    const [nextLine, res] = parseReplBlockAt(document, lineNum);\r\n                    lineNum = nextLine;\r\n                    if (res) {\r\n                        const command: vscode.Command = {\r\n                            title: '▶ Run Inline Code',\r\n                            command: 'inline-repl.run',\r\n                            arguments: [\r\n                                {\r\n                                    headerLineNum: res.headerRange.start.line,\r\n                                    isRunning: { flag: false }\r\n                                }\r\n                            ]\r\n                        };\r\n                        codeLenses.push(new vscode.CodeLens(res.headerRange, command));\r\n                    }\r\n                }\r\n\r\n                return codeLenses;\r\n            }\r\n        })\r\n    );\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport { registerInlineRepl } from './repl';\nimport { registerCellOptionHoverProvider } from './hoverProvider';\n\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\tconsole.log('Positron Inline REPL activated!');\n\n\t// The command has been defined in the package.json file\n\t// Now provide the implementation of the command with registerCommand\n\t// The commandId parameter must match the command field in package.json\n\t// let disposable = vscode.commands.registerCommand('python-inline-repl.helloWorld', () => {\n\t// \t// The code you place here will be executed every time your command is executed\n\n\n\t// let commentReplCmd = vscode.commands.registerTextEditorCommand(\n\t// \t'inline-repl.commentAsRepl',\n\t// \t(editor, edit) => {\n\t// \t  const selections = editor.selections;\n\t  \n\t// \t  editor.edit(editBuilder => {\n\t// \t\tfor (const selection of selections) {\n\t// \t\t  const line = editor.document.lineAt(selection.start.line);\n\t// \t\t  const text = line.text.trim();\n\t// \t\t  if (text.length > 0 && !text.startsWith('# >>>')) {\n\t// \t\t\tconst indentation = line.firstNonWhitespaceCharacterIndex;\n\t// \t\t\tconst commentPrefix = line.text.substring(0, indentation);\n\t// \t\t\teditBuilder.replace(line.range, `${commentPrefix}# >>> ${text}`);\n\t// \t\t  }\n\t// \t\t}\n\t// \t  });\n\t// \t}\n\t//   );\n\t  \n\t// context.subscriptions.push(commentReplCmd);\n\n    // context.subscriptions.push(disposable);\n\tregisterCellOptionHoverProvider(context);\n    registerInlineRepl(context);\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n"],"names":["module","exports","require","context","subscriptions","push","vscode","languages","registerHoverProvider","provideHover","document","position","line","lineAt","text","test","trimStart","range","getWordRangeAtPosition","word","getText","groupKey","cellOptions","group","Object","prototype","hasOwnProperty","call","markdown","MarkdownString","appendMarkdown","join","isTrusted","Hover","Attributes","label","classes","tags","id","eval","echo","output","warning","error","include","panel","Figures","Tables","layout","column","parseReplBlockAt","lineNum","lineCount","header","trimEnd","headerRes","replPattern","exec","headerLineNum","prefix","commands","lineRes","startsWith","outputLineNum","trim","headerRange","Range","start","end","outputRange","registerTextEditorCommand","editor","edit","arg","async","isRunning","flag","lang","langId","languageId","detectLanguage","res","codeBlock","replacement","response","responseLines","split","shift","length","pop","commentPrefix","outputLines","map","isEmpty","s","generateReplacement","positron","runtime","executeCode","undefined","RuntimeCodeExecutionMode","Interactive","e","replace","console","runInlineRepl","catch","err","registerCodeLensProvider","language","scheme","provideCodeLenses","codeLenses","nextLine","command","title","arguments","CodeLens","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","log","registerCellOptionHoverProvider","registerInlineRepl"],"sourceRoot":""}