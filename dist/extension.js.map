{"version":3,"file":"extension.js","mappings":"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C,EAAG,UAAW,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,UAAW,CAAC,EAAG,SAAU,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,UAAW,CAAC,EAAG,SAAU,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,UAAW,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,UAAW,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,UAAW,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAA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AAU,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,SAAU,CAAC,EAAG,YAAa,CAAC,EAAG,SAAU,CAAC,EAAG,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,SAAU,CAAC,EAAG,YAAa,CAAC,EAAG,SAAU,CAAC,EAAG,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,WAAY,CAAC,EAAG,UAAW,CAAC,EAAG,WAAY,CAAC,EAAG,UAAW,CAAC,EAAG,YAAa,CAAC,EAAG,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,WAAY,CAAC,EAAG,UAAW,CAAC,EAAG,WAAY,CAAC,EAAG,UAAW,CAAC,KAAM,UAAW,CAAC,EAAG,UAAW,CAAC,EAAG,YAAa,CAAC,EAAG,YAAa,CAAC,EAAG,WAAY,CAAC,EAAG,YAAa,CAAC,EAAG,eAAgB,CAAC,EAAG,YAAa,CAAC,EAAG,yBAA0B,CAAC,EAAG,UAAW,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,SAAU,CAAC,EAAG,UAAW,CAAC,EAA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","sources":["webpack://quarto-wingman/./node_modules/entities/lib/decode_codepoint.js","webpack://quarto-wingman/./src/extension.ts","webpack://quarto-wingman/external commonjs \"positron\"","webpack://quarto-wingman/./node_modules/markdown-it/dist/index.cjs.js","webpack://quarto-wingman/external commonjs \"vscode\"","webpack://quarto-wingman/./src/cellOptions.ts","webpack://quarto-wingman/./node_modules/punycode.js/punycode.es6.js","webpack://quarto-wingman/./src/hoverProvider.ts","webpack://quarto-wingman/./node_modules/uc.micro/build/index.cjs.js","webpack://quarto-wingman/./node_modules/entities/lib/generated/encode-html.js","webpack://quarto-wingman/./node_modules/entities/lib/generated/decode-data-xml.js","webpack://quarto-wingman/./src/cell-configuration.ts","webpack://quarto-wingman/./node_modules/entities/lib/generated/decode-data-html.js","webpack://quarto-wingman/./node_modules/entities/lib/index.js","webpack://quarto-wingman/./node_modules/mdurl/build/index.cjs.js","webpack://quarto-wingman/./src/codelens.ts","webpack://quarto-wingman/./node_modules/linkify-it/build/index.cjs.js","webpack://quarto-wingman/./node_modules/entities/lib/encode.js","webpack://quarto-wingman/./node_modules/entities/lib/decode.js","webpack://quarto-wingman/./src/repl.ts","webpack://quarto-wingman/./node_modules/entities/lib/escape.js","webpack://quarto-wingman/webpack/bootstrap","webpack://quarto-wingman/webpack/runtime/define property getters","webpack://quarto-wingman/webpack/runtime/hasOwnProperty shorthand","webpack://quarto-wingman/webpack/runtime/make namespace object","webpack://quarto-wingman/webpack/startup"],"sourcesContent":["\"use strict\";\n// Adapted from https://github.com/mathiasbynens/he/blob/36afe179392226cf1b6ccdb16ebbb7a5a844d93a/src/he.js#L106-L134\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.replaceCodePoint = exports.fromCodePoint = void 0;\nvar decodeMap = new Map([\n    [0, 65533],\n    // C1 Unicode control character reference replacements\n    [128, 8364],\n    [130, 8218],\n    [131, 402],\n    [132, 8222],\n    [133, 8230],\n    [134, 8224],\n    [135, 8225],\n    [136, 710],\n    [137, 8240],\n    [138, 352],\n    [139, 8249],\n    [140, 338],\n    [142, 381],\n    [145, 8216],\n    [146, 8217],\n    [147, 8220],\n    [148, 8221],\n    [149, 8226],\n    [150, 8211],\n    [151, 8212],\n    [152, 732],\n    [153, 8482],\n    [154, 353],\n    [155, 8250],\n    [156, 339],\n    [158, 382],\n    [159, 376],\n]);\n/**\n * Polyfill for `String.fromCodePoint`. It is used to create a string from a Unicode code point.\n */\nexports.fromCodePoint = \n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins\n(_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function (codePoint) {\n    var output = \"\";\n    if (codePoint > 0xffff) {\n        codePoint -= 0x10000;\n        output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);\n        codePoint = 0xdc00 | (codePoint & 0x3ff);\n    }\n    output += String.fromCharCode(codePoint);\n    return output;\n};\n/**\n * Replace the given code point with a replacement character if it is a\n * surrogate or is outside the valid range. Otherwise return the code\n * point unchanged.\n */\nfunction replaceCodePoint(codePoint) {\n    var _a;\n    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {\n        return 0xfffd;\n    }\n    return (_a = decodeMap.get(codePoint)) !== null && _a !== void 0 ? _a : codePoint;\n}\nexports.replaceCodePoint = replaceCodePoint;\n/**\n * Replace the code point if relevant, then convert it to a string.\n *\n * @deprecated Use `fromCodePoint(replaceCodePoint(codePoint))` instead.\n * @param codePoint The code point to decode.\n * @returns The decoded code point.\n */\nfunction decodeCodePoint(codePoint) {\n    return (0, exports.fromCodePoint)(replaceCodePoint(codePoint));\n}\nexports.default = decodeCodePoint;\n//# sourceMappingURL=decode_codepoint.js.map","import * as vscode from 'vscode';\r\nimport { wingsmanCodeLensProvider } from './codelens';\r\nimport { registerCellOptionsCommands } from './cell-configuration';\r\nimport { registerInlineRepl } from './repl';\r\nimport { registerCellOptionHoverProvider } from './hoverProvider';\r\n\r\nexport async function activate(context: vscode.ExtensionContext) {\r\n  // Register the command for configuring cell options.\r\n  registerCellOptionsCommands(context);\r\n\r\n  // Register the CodeLens provider for Quarto documents.\r\n  context.subscriptions.push(\r\n    vscode.languages.registerCodeLensProvider({ language: \"quarto\" }, wingsmanCodeLensProvider())\r\n  );\r\n\r\n  // Register the hover provider for cell options.\r\n  registerCellOptionHoverProvider(context);\r\n\r\n  // Register inline REPL support.\r\n  registerInlineRepl(context);\r\n}\r\n\r\nexport function deactivate() { }\r\n","module.exports = require(\"positron\");","'use strict';\n\nvar mdurl = require('mdurl');\nvar ucmicro = require('uc.micro');\nvar entities = require('entities');\nvar LinkifyIt = require('linkify-it');\nvar punycode = require('punycode.js');\n\nfunction _interopNamespaceDefault(e) {\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n.default = e;\n  return Object.freeze(n);\n}\n\nvar mdurl__namespace = /*#__PURE__*/_interopNamespaceDefault(mdurl);\nvar ucmicro__namespace = /*#__PURE__*/_interopNamespaceDefault(ucmicro);\n\n// Utilities\n//\n\nfunction _class(obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isString(obj) {\n  return _class(obj) === '[object String]';\n}\nconst _hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction has(object, key) {\n  return _hasOwnProperty.call(object, key);\n}\n\n// Merge objects\n//\nfunction assign(obj /* from1, from2, from3, ... */) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  sources.forEach(function (source) {\n    if (!source) {\n      return;\n    }\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be object');\n    }\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n  return obj;\n}\n\n// Remove element from array and put another array at those position.\n// Useful for some operations with tokens\nfunction arrayReplaceAt(src, pos, newElements) {\n  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));\n}\nfunction isValidEntityCode(c) {\n  /* eslint no-bitwise:0 */\n  // broken sequence\n  if (c >= 0xD800 && c <= 0xDFFF) {\n    return false;\n  }\n  // never used\n  if (c >= 0xFDD0 && c <= 0xFDEF) {\n    return false;\n  }\n  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) {\n    return false;\n  }\n  // control codes\n  if (c >= 0x00 && c <= 0x08) {\n    return false;\n  }\n  if (c === 0x0B) {\n    return false;\n  }\n  if (c >= 0x0E && c <= 0x1F) {\n    return false;\n  }\n  if (c >= 0x7F && c <= 0x9F) {\n    return false;\n  }\n  // out of range\n  if (c > 0x10FFFF) {\n    return false;\n  }\n  return true;\n}\nfunction fromCodePoint(c) {\n  /* eslint no-bitwise:0 */\n  if (c > 0xffff) {\n    c -= 0x10000;\n    const surrogate1 = 0xd800 + (c >> 10);\n    const surrogate2 = 0xdc00 + (c & 0x3ff);\n    return String.fromCharCode(surrogate1, surrogate2);\n  }\n  return String.fromCharCode(c);\n}\nconst UNESCAPE_MD_RE = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_`{|}~])/g;\nconst ENTITY_RE = /&([a-z#][a-z0-9]{1,31});/gi;\nconst UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');\nconst DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))$/i;\nfunction replaceEntityPattern(match, name) {\n  if (name.charCodeAt(0) === 0x23 /* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {\n    const code = name[1].toLowerCase() === 'x' ? parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);\n    if (isValidEntityCode(code)) {\n      return fromCodePoint(code);\n    }\n    return match;\n  }\n  const decoded = entities.decodeHTML(match);\n  if (decoded !== match) {\n    return decoded;\n  }\n  return match;\n}\n\n/* function replaceEntities(str) {\n  if (str.indexOf('&') < 0) { return str; }\n\n  return str.replace(ENTITY_RE, replaceEntityPattern);\n} */\n\nfunction unescapeMd(str) {\n  if (str.indexOf('\\\\') < 0) {\n    return str;\n  }\n  return str.replace(UNESCAPE_MD_RE, '$1');\n}\nfunction unescapeAll(str) {\n  if (str.indexOf('\\\\') < 0 && str.indexOf('&') < 0) {\n    return str;\n  }\n  return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {\n    if (escaped) {\n      return escaped;\n    }\n    return replaceEntityPattern(match, entity);\n  });\n}\nconst HTML_ESCAPE_TEST_RE = /[&<>\"]/;\nconst HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\nconst HTML_REPLACEMENTS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n};\nfunction replaceUnsafeChar(ch) {\n  return HTML_REPLACEMENTS[ch];\n}\nfunction escapeHtml(str) {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n  }\n  return str;\n}\nconst REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g;\nfunction escapeRE(str) {\n  return str.replace(REGEXP_ESCAPE_RE, '\\\\$&');\n}\nfunction isSpace(code) {\n  switch (code) {\n    case 0x09:\n    case 0x20:\n      return true;\n  }\n  return false;\n}\n\n// Zs (unicode class) || [\\t\\f\\v\\r\\n]\nfunction isWhiteSpace(code) {\n  if (code >= 0x2000 && code <= 0x200A) {\n    return true;\n  }\n  switch (code) {\n    case 0x09: // \\t\n    case 0x0A: // \\n\n    case 0x0B: // \\v\n    case 0x0C: // \\f\n    case 0x0D: // \\r\n    case 0x20:\n    case 0xA0:\n    case 0x1680:\n    case 0x202F:\n    case 0x205F:\n    case 0x3000:\n      return true;\n  }\n  return false;\n}\n\n/* eslint-disable max-len */\n\n// Currently without astral characters support.\nfunction isPunctChar(ch) {\n  return ucmicro__namespace.P.test(ch) || ucmicro__namespace.S.test(ch);\n}\n\n// Markdown ASCII punctuation characters.\n//\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\n//\n// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.\n//\nfunction isMdAsciiPunct(ch) {\n  switch (ch) {\n    case 0x21 /* ! */:\n    case 0x22 /* \" */:\n    case 0x23 /* # */:\n    case 0x24 /* $ */:\n    case 0x25 /* % */:\n    case 0x26 /* & */:\n    case 0x27 /* ' */:\n    case 0x28 /* ( */:\n    case 0x29 /* ) */:\n    case 0x2A /* * */:\n    case 0x2B /* + */:\n    case 0x2C /* , */:\n    case 0x2D /* - */:\n    case 0x2E /* . */:\n    case 0x2F /* / */:\n    case 0x3A /* : */:\n    case 0x3B /* ; */:\n    case 0x3C /* < */:\n    case 0x3D /* = */:\n    case 0x3E /* > */:\n    case 0x3F /* ? */:\n    case 0x40 /* @ */:\n    case 0x5B /* [ */:\n    case 0x5C /* \\ */:\n    case 0x5D /* ] */:\n    case 0x5E /* ^ */:\n    case 0x5F /* _ */:\n    case 0x60 /* ` */:\n    case 0x7B /* { */:\n    case 0x7C /* | */:\n    case 0x7D /* } */:\n    case 0x7E /* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\n// Hepler to unify [reference labels].\n//\nfunction normalizeReference(str) {\n  // Trim and collapse whitespace\n  //\n  str = str.trim().replace(/\\s+/g, ' ');\n\n  // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug\n  // fixed in v12 (couldn't find any details).\n  //\n  // So treat this one as a special case\n  // (remove this when node v10 is no longer supported).\n  //\n  if ('ẞ'.toLowerCase() === 'Ṿ') {\n    str = str.replace(/ẞ/g, 'ß');\n  }\n\n  // .toLowerCase().toUpperCase() should get rid of all differences\n  // between letter variants.\n  //\n  // Simple .toLowerCase() doesn't normalize 125 code points correctly,\n  // and .toUpperCase doesn't normalize 6 of them (list of exceptions:\n  // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently\n  // uppercased versions).\n  //\n  // Here's an example showing how it happens. Lets take greek letter omega:\n  // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)\n  //\n  // Unicode entries:\n  // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;\n  // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398\n  // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398\n  // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;\n  //\n  // Case-insensitive comparison should treat all of them as equivalent.\n  //\n  // But .toLowerCase() doesn't change ϑ (it's already lowercase),\n  // and .toUpperCase() doesn't change ϴ (already uppercase).\n  //\n  // Applying first lower then upper case normalizes any character:\n  // '\\u0398\\u03f4\\u03b8\\u03d1'.toLowerCase().toUpperCase() === '\\u0398\\u0398\\u0398\\u0398'\n  //\n  // Note: this is equivalent to unicode case folding; unicode normalization\n  // is a different step that is not required here.\n  //\n  // Final result should be uppercased, because it's later stored in an object\n  // (this avoid a conflict with Object.prototype members,\n  // most notably, `__proto__`)\n  //\n  return str.toLowerCase().toUpperCase();\n}\n\n// Re-export libraries commonly used in both markdown-it and its plugins,\n// so plugins won't have to depend on them explicitly, which reduces their\n// bundled size (e.g. a browser build).\n//\nconst lib = {\n  mdurl: mdurl__namespace,\n  ucmicro: ucmicro__namespace\n};\n\nvar utils = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  arrayReplaceAt: arrayReplaceAt,\n  assign: assign,\n  escapeHtml: escapeHtml,\n  escapeRE: escapeRE,\n  fromCodePoint: fromCodePoint,\n  has: has,\n  isMdAsciiPunct: isMdAsciiPunct,\n  isPunctChar: isPunctChar,\n  isSpace: isSpace,\n  isString: isString,\n  isValidEntityCode: isValidEntityCode,\n  isWhiteSpace: isWhiteSpace,\n  lib: lib,\n  normalizeReference: normalizeReference,\n  unescapeAll: unescapeAll,\n  unescapeMd: unescapeMd\n});\n\n// Parse link label\n//\n// this function assumes that first character (\"[\") already matches;\n// returns the end of the label\n//\n\nfunction parseLinkLabel(state, start, disableNested) {\n  let level, found, marker, prevPos;\n  const max = state.posMax;\n  const oldPos = state.pos;\n  state.pos = start + 1;\n  level = 1;\n  while (state.pos < max) {\n    marker = state.src.charCodeAt(state.pos);\n    if (marker === 0x5D /* ] */) {\n      level--;\n      if (level === 0) {\n        found = true;\n        break;\n      }\n    }\n    prevPos = state.pos;\n    state.md.inline.skipToken(state);\n    if (marker === 0x5B /* [ */) {\n      if (prevPos === state.pos - 1) {\n        // increase level if we find text `[`, which is not a part of any token\n        level++;\n      } else if (disableNested) {\n        state.pos = oldPos;\n        return -1;\n      }\n    }\n  }\n  let labelEnd = -1;\n  if (found) {\n    labelEnd = state.pos;\n  }\n\n  // restore old state\n  state.pos = oldPos;\n  return labelEnd;\n}\n\n// Parse link destination\n//\n\nfunction parseLinkDestination(str, start, max) {\n  let code;\n  let pos = start;\n  const result = {\n    ok: false,\n    pos: 0,\n    str: ''\n  };\n  if (str.charCodeAt(pos) === 0x3C /* < */) {\n    pos++;\n    while (pos < max) {\n      code = str.charCodeAt(pos);\n      if (code === 0x0A /* \\n */) {\n        return result;\n      }\n      if (code === 0x3C /* < */) {\n        return result;\n      }\n      if (code === 0x3E /* > */) {\n        result.pos = pos + 1;\n        result.str = unescapeAll(str.slice(start + 1, pos));\n        result.ok = true;\n        return result;\n      }\n      if (code === 0x5C /* \\ */ && pos + 1 < max) {\n        pos += 2;\n        continue;\n      }\n      pos++;\n    }\n\n    // no closing '>'\n    return result;\n  }\n\n  // this should be ... } else { ... branch\n\n  let level = 0;\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n    if (code === 0x20) {\n      break;\n    }\n\n    // ascii control characters\n    if (code < 0x20 || code === 0x7F) {\n      break;\n    }\n    if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      if (str.charCodeAt(pos + 1) === 0x20) {\n        break;\n      }\n      pos += 2;\n      continue;\n    }\n    if (code === 0x28 /* ( */) {\n      level++;\n      if (level > 32) {\n        return result;\n      }\n    }\n    if (code === 0x29 /* ) */) {\n      if (level === 0) {\n        break;\n      }\n      level--;\n    }\n    pos++;\n  }\n  if (start === pos) {\n    return result;\n  }\n  if (level !== 0) {\n    return result;\n  }\n  result.str = unescapeAll(str.slice(start, pos));\n  result.pos = pos;\n  result.ok = true;\n  return result;\n}\n\n// Parse link title\n//\n\n\n// Parse link title within `str` in [start, max] range,\n// or continue previous parsing if `prev_state` is defined (equal to result of last execution).\n//\nfunction parseLinkTitle(str, start, max, prev_state) {\n  let code;\n  let pos = start;\n  const state = {\n    // if `true`, this is a valid link title\n    ok: false,\n    // if `true`, this link can be continued on the next line\n    can_continue: false,\n    // if `ok`, it's the position of the first character after the closing marker\n    pos: 0,\n    // if `ok`, it's the unescaped title\n    str: '',\n    // expected closing marker character code\n    marker: 0\n  };\n  if (prev_state) {\n    // this is a continuation of a previous parseLinkTitle call on the next line,\n    // used in reference links only\n    state.str = prev_state.str;\n    state.marker = prev_state.marker;\n  } else {\n    if (pos >= max) {\n      return state;\n    }\n    let marker = str.charCodeAt(pos);\n    if (marker !== 0x22 /* \" */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) {\n      return state;\n    }\n    start++;\n    pos++;\n\n    // if opening marker is \"(\", switch it to closing marker \")\"\n    if (marker === 0x28) {\n      marker = 0x29;\n    }\n    state.marker = marker;\n  }\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n    if (code === state.marker) {\n      state.pos = pos + 1;\n      state.str += unescapeAll(str.slice(start, pos));\n      state.ok = true;\n      return state;\n    } else if (code === 0x28 /* ( */ && state.marker === 0x29 /* ) */) {\n      return state;\n    } else if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos++;\n    }\n    pos++;\n  }\n\n  // no closing marker found, but this link title may continue on the next line (for references)\n  state.can_continue = true;\n  state.str += unescapeAll(str.slice(start, pos));\n  return state;\n}\n\n// Just a shortcut for bulk export\n\nvar helpers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  parseLinkDestination: parseLinkDestination,\n  parseLinkLabel: parseLinkLabel,\n  parseLinkTitle: parseLinkTitle\n});\n\n/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\n\nconst default_rules = {};\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx];\n  return '<code' + slf.renderAttrs(token) + '>' + escapeHtml(token.content) + '</code>';\n};\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx];\n  return '<pre' + slf.renderAttrs(token) + '><code>' + escapeHtml(tokens[idx].content) + '</code></pre>\\n';\n};\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx];\n  const info = token.info ? unescapeAll(token.info).trim() : '';\n  let langName = '';\n  let langAttrs = '';\n  if (info) {\n    const arr = info.split(/(\\s+)/g);\n    langName = arr[0];\n    langAttrs = arr.slice(2).join('');\n  }\n  let highlighted;\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content);\n  } else {\n    highlighted = escapeHtml(token.content);\n  }\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n';\n  }\n\n  // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .deepClone() for token and simplify this part, but\n  // now we prefer to keep things local.\n  if (info) {\n    const i = token.attrIndex('class');\n    const tmpAttrs = token.attrs ? token.attrs.slice() : [];\n    if (i < 0) {\n      tmpAttrs.push(['class', options.langPrefix + langName]);\n    } else {\n      tmpAttrs[i] = tmpAttrs[i].slice();\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName;\n    }\n\n    // Fake token just to render attributes\n    const tmpToken = {\n      attrs: tmpAttrs\n    };\n    return `<pre><code${slf.renderAttrs(tmpToken)}>${highlighted}</code></pre>\\n`;\n  }\n  return `<pre><code${slf.renderAttrs(token)}>${highlighted}</code></pre>\\n`;\n};\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx];\n\n  // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] = slf.renderInlineAsText(token.children, options, env);\n  return slf.renderToken(tokens, idx, options);\n};\ndefault_rules.hardbreak = function (tokens, idx, options /*, env */) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n';\n};\ndefault_rules.softbreak = function (tokens, idx, options /*, env */) {\n  return options.breaks ? options.xhtmlOut ? '<br />\\n' : '<br>\\n' : '\\n';\n};\ndefault_rules.text = function (tokens, idx /*, options, env */) {\n  return escapeHtml(tokens[idx].content);\n};\ndefault_rules.html_block = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\ndefault_rules.html_inline = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\n\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\nfunction Renderer() {\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.mjs)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules);\n}\n\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\nRenderer.prototype.renderAttrs = function renderAttrs(token) {\n  let i, l, result;\n  if (!token.attrs) {\n    return '';\n  }\n  result = '';\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"';\n  }\n  return result;\n};\n\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\nRenderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n  const token = tokens[idx];\n  let result = '';\n\n  // Tight list paragraphs\n  if (token.hidden) {\n    return '';\n  }\n\n  // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n';\n  }\n\n  // Add token name, e.g. `<img`\n  result += (token.nesting === -1 ? '</' : '<') + token.tag;\n\n  // Encode attributes, e.g. `<img src=\"foo\"`\n  result += this.renderAttrs(token);\n\n  // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /';\n  }\n\n  // Check if we need to add a newline after this tag\n  let needLf = false;\n  if (token.block) {\n    needLf = true;\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        const nextToken = tokens[idx + 1];\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false;\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false;\n        }\n      }\n    }\n  }\n  result += needLf ? '>\\n' : '>';\n  return result;\n};\n\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  let result = '';\n  const rules = this.rules;\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const type = tokens[i].type;\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options);\n    }\n  }\n  return result;\n};\n\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  let result = '';\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    switch (tokens[i].type) {\n      case 'text':\n        result += tokens[i].content;\n        break;\n      case 'image':\n        result += this.renderInlineAsText(tokens[i].children, options, env);\n        break;\n      case 'html_inline':\n      case 'html_block':\n        result += tokens[i].content;\n        break;\n      case 'softbreak':\n      case 'hardbreak':\n        result += '\\n';\n        break;\n      // all other tokens are skipped\n    }\n  }\n  return result;\n};\n\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\nRenderer.prototype.render = function (tokens, options, env) {\n  let result = '';\n  const rules = this.rules;\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const type = tokens[i].type;\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env);\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options, env);\n    }\n  }\n  return result;\n};\n\n/**\n * class Ruler\n *\n * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n *\n * - keep rules in defined order\n * - assign the name to each rule\n * - enable/disable rules\n * - add/replace rules\n * - allow assign rules to additional named chains (in the same)\n * - cacheing lists of active rules\n *\n * You will not need use this class directly until write plugins. For simple\n * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n * [[MarkdownIt.use]].\n **/\n\n/**\n * new Ruler()\n **/\nfunction Ruler() {\n  // List of added rules. Each element is:\n  //\n  // {\n  //   name: XXX,\n  //   enabled: Boolean,\n  //   fn: Function(),\n  //   alt: [ name2, name3 ]\n  // }\n  //\n  this.__rules__ = [];\n\n  // Cached rule chains.\n  //\n  // First level - chain name, '' for default.\n  // Second level - diginal anchor for fast filtering by charcodes.\n  //\n  this.__cache__ = null;\n}\n\n// Helper methods, should not be used directly\n\n// Find rule index by name\n//\nRuler.prototype.__find__ = function (name) {\n  for (let i = 0; i < this.__rules__.length; i++) {\n    if (this.__rules__[i].name === name) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n// Build rules lookup cache\n//\nRuler.prototype.__compile__ = function () {\n  const self = this;\n  const chains = [''];\n\n  // collect unique names\n  self.__rules__.forEach(function (rule) {\n    if (!rule.enabled) {\n      return;\n    }\n    rule.alt.forEach(function (altName) {\n      if (chains.indexOf(altName) < 0) {\n        chains.push(altName);\n      }\n    });\n  });\n  self.__cache__ = {};\n  chains.forEach(function (chain) {\n    self.__cache__[chain] = [];\n    self.__rules__.forEach(function (rule) {\n      if (!rule.enabled) {\n        return;\n      }\n      if (chain && rule.alt.indexOf(chain) < 0) {\n        return;\n      }\n      self.__cache__[chain].push(rule.fn);\n    });\n  });\n};\n\n/**\n * Ruler.at(name, fn [, options])\n * - name (String): rule name to replace.\n * - fn (Function): new rule function.\n * - options (Object): new rule options (not mandatory).\n *\n * Replace rule by name with new function & options. Throws error if name not\n * found.\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * Replace existing typographer replacement rule with new one:\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.at('replacements', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.at = function (name, fn, options) {\n  const index = this.__find__(name);\n  const opt = options || {};\n  if (index === -1) {\n    throw new Error('Parser rule not found: ' + name);\n  }\n  this.__rules__[index].fn = fn;\n  this.__rules__[index].alt = opt.alt || [];\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.before(beforeName, ruleName, fn [, options])\n * - beforeName (String): new rule will be added before this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain before one with given name. See also\n * [[Ruler.after]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.before = function (beforeName, ruleName, fn, options) {\n  const index = this.__find__(beforeName);\n  const opt = options || {};\n  if (index === -1) {\n    throw new Error('Parser rule not found: ' + beforeName);\n  }\n  this.__rules__.splice(index, 0, {\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  });\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.after(afterName, ruleName, fn [, options])\n * - afterName (String): new rule will be added after this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain after one with given name. See also\n * [[Ruler.before]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.after = function (afterName, ruleName, fn, options) {\n  const index = this.__find__(afterName);\n  const opt = options || {};\n  if (index === -1) {\n    throw new Error('Parser rule not found: ' + afterName);\n  }\n  this.__rules__.splice(index + 1, 0, {\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  });\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.push(ruleName, fn [, options])\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Push new rule to the end of chain. See also\n * [[Ruler.before]], [[Ruler.after]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.push('my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.push = function (ruleName, fn, options) {\n  const opt = options || {};\n  this.__rules__.push({\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  });\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.enable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to enable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.enable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) {\n    list = [list];\n  }\n  const result = [];\n\n  // Search by name and enable\n  list.forEach(function (name) {\n    const idx = this.__find__(name);\n    if (idx < 0) {\n      if (ignoreInvalid) {\n        return;\n      }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = true;\n    result.push(name);\n  }, this);\n  this.__cache__ = null;\n  return result;\n};\n\n/**\n * Ruler.enableOnly(list [, ignoreInvalid])\n * - list (String|Array): list of rule names to enable (whitelist).\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names, and disable everything else. If any rule name\n * not found - throw Error. Errors can be disabled by second param.\n *\n * See also [[Ruler.disable]], [[Ruler.enable]].\n **/\nRuler.prototype.enableOnly = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) {\n    list = [list];\n  }\n  this.__rules__.forEach(function (rule) {\n    rule.enabled = false;\n  });\n  this.enable(list, ignoreInvalid);\n};\n\n/**\n * Ruler.disable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Disable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.disable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) {\n    list = [list];\n  }\n  const result = [];\n\n  // Search by name and disable\n  list.forEach(function (name) {\n    const idx = this.__find__(name);\n    if (idx < 0) {\n      if (ignoreInvalid) {\n        return;\n      }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = false;\n    result.push(name);\n  }, this);\n  this.__cache__ = null;\n  return result;\n};\n\n/**\n * Ruler.getRules(chainName) -> Array\n *\n * Return array of active functions (rules) for given chain name. It analyzes\n * rules configuration, compiles caches if not exists and returns result.\n *\n * Default chain name is `''` (empty string). It can't be skipped. That's\n * done intentionally, to keep signature monomorphic for high speed.\n **/\nRuler.prototype.getRules = function (chainName) {\n  if (this.__cache__ === null) {\n    this.__compile__();\n  }\n\n  // Chain can be empty, if rules disabled. But we still have to return Array.\n  return this.__cache__[chainName] || [];\n};\n\n// Token class\n\n/**\n * class Token\n **/\n\n/**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/\nfunction Token(type, tag, nesting) {\n  /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/\n  this.type = type;\n\n  /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/\n  this.tag = tag;\n\n  /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/\n  this.attrs = null;\n\n  /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/\n  this.map = null;\n\n  /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/\n  this.nesting = nesting;\n\n  /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/\n  this.level = 0;\n\n  /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/\n  this.children = null;\n\n  /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/\n  this.content = '';\n\n  /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/\n  this.markup = '';\n\n  /**\n   * Token#info -> String\n   *\n   * Additional information:\n   *\n   * - Info string for \"fence\" tokens\n   * - The value \"auto\" for autolink \"link_open\" and \"link_close\" tokens\n   * - The string value of the item marker for ordered-list \"list_item_open\" tokens\n   **/\n  this.info = '';\n\n  /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/\n  this.meta = null;\n\n  /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/\n  this.block = false;\n\n  /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/\n  this.hidden = false;\n}\n\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/\nToken.prototype.attrIndex = function attrIndex(name) {\n  if (!this.attrs) {\n    return -1;\n  }\n  const attrs = this.attrs;\n  for (let i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i][0] === name) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/\nToken.prototype.attrPush = function attrPush(attrData) {\n  if (this.attrs) {\n    this.attrs.push(attrData);\n  } else {\n    this.attrs = [attrData];\n  }\n};\n\n/**\n * Token.attrSet(name, value)\n *\n * Set `name` attribute to `value`. Override old value if exists.\n **/\nToken.prototype.attrSet = function attrSet(name, value) {\n  const idx = this.attrIndex(name);\n  const attrData = [name, value];\n  if (idx < 0) {\n    this.attrPush(attrData);\n  } else {\n    this.attrs[idx] = attrData;\n  }\n};\n\n/**\n * Token.attrGet(name)\n *\n * Get the value of attribute `name`, or null if it does not exist.\n **/\nToken.prototype.attrGet = function attrGet(name) {\n  const idx = this.attrIndex(name);\n  let value = null;\n  if (idx >= 0) {\n    value = this.attrs[idx][1];\n  }\n  return value;\n};\n\n/**\n * Token.attrJoin(name, value)\n *\n * Join value to existing attribute via space. Or create new attribute if not\n * exists. Useful to operate with token classes.\n **/\nToken.prototype.attrJoin = function attrJoin(name, value) {\n  const idx = this.attrIndex(name);\n  if (idx < 0) {\n    this.attrPush([name, value]);\n  } else {\n    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;\n  }\n};\n\n// Core state object\n//\n\nfunction StateCore(src, md, env) {\n  this.src = src;\n  this.env = env;\n  this.tokens = [];\n  this.inlineMode = false;\n  this.md = md; // link to parser instance\n}\n\n// re-export Token class to use in core rules\nStateCore.prototype.Token = Token;\n\n// Normalize input string\n\n// https://spec.commonmark.org/0.29/#line-ending\nconst NEWLINES_RE = /\\r\\n?|\\n/g;\nconst NULL_RE = /\\0/g;\nfunction normalize(state) {\n  let str;\n\n  // Normalize newlines\n  str = state.src.replace(NEWLINES_RE, '\\n');\n\n  // Replace NULL characters\n  str = str.replace(NULL_RE, '\\uFFFD');\n  state.src = str;\n}\n\nfunction block(state) {\n  let token;\n  if (state.inlineMode) {\n    token = new state.Token('inline', '', 0);\n    token.content = state.src;\n    token.map = [0, 1];\n    token.children = [];\n    state.tokens.push(token);\n  } else {\n    state.md.block.parse(state.src, state.md, state.env, state.tokens);\n  }\n}\n\nfunction inline(state) {\n  const tokens = state.tokens;\n\n  // Parse inlines\n  for (let i = 0, l = tokens.length; i < l; i++) {\n    const tok = tokens[i];\n    if (tok.type === 'inline') {\n      state.md.inline.parse(tok.content, state.md, state.env, tok.children);\n    }\n  }\n}\n\n// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n\nfunction isLinkOpen$1(str) {\n  return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose$1(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\nfunction linkify$1(state) {\n  const blockTokens = state.tokens;\n  if (!state.md.options.linkify) {\n    return;\n  }\n  for (let j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline' || !state.md.linkify.pretest(blockTokens[j].content)) {\n      continue;\n    }\n    let tokens = blockTokens[j].children;\n    let htmlLinkLevel = 0;\n\n    // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      const currentToken = tokens[i];\n\n      // Skip content of markdown links\n      if (currentToken.type === 'link_close') {\n        i--;\n        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n          i--;\n        }\n        continue;\n      }\n\n      // Skip content of html tag links\n      if (currentToken.type === 'html_inline') {\n        if (isLinkOpen$1(currentToken.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--;\n        }\n        if (isLinkClose$1(currentToken.content)) {\n          htmlLinkLevel++;\n        }\n      }\n      if (htmlLinkLevel > 0) {\n        continue;\n      }\n      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n        const text = currentToken.content;\n        let links = state.md.linkify.match(text);\n\n        // Now split string to nodes\n        const nodes = [];\n        let level = currentToken.level;\n        let lastPos = 0;\n\n        // forbid escape sequence at the start of the string,\n        // this avoids http\\://example.com/ from being linkified as\n        // http:<a href=\"//example.com/\">//example.com/</a>\n        if (links.length > 0 && links[0].index === 0 && i > 0 && tokens[i - 1].type === 'text_special') {\n          links = links.slice(1);\n        }\n        for (let ln = 0; ln < links.length; ln++) {\n          const url = links[ln].url;\n          const fullUrl = state.md.normalizeLink(url);\n          if (!state.md.validateLink(fullUrl)) {\n            continue;\n          }\n          let urlText = links[ln].text;\n\n          // Linkifier might send raw hostnames like \"example.com\", where url\n          // starts with domain name. So we prepend http:// in those cases,\n          // and remove it afterwards.\n          //\n          if (!links[ln].schema) {\n            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '');\n          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');\n          } else {\n            urlText = state.md.normalizeLinkText(urlText);\n          }\n          const pos = links[ln].index;\n          if (pos > lastPos) {\n            const token = new state.Token('text', '', 0);\n            token.content = text.slice(lastPos, pos);\n            token.level = level;\n            nodes.push(token);\n          }\n          const token_o = new state.Token('link_open', 'a', 1);\n          token_o.attrs = [['href', fullUrl]];\n          token_o.level = level++;\n          token_o.markup = 'linkify';\n          token_o.info = 'auto';\n          nodes.push(token_o);\n          const token_t = new state.Token('text', '', 0);\n          token_t.content = urlText;\n          token_t.level = level;\n          nodes.push(token_t);\n          const token_c = new state.Token('link_close', 'a', -1);\n          token_c.level = --level;\n          token_c.markup = 'linkify';\n          token_c.info = 'auto';\n          nodes.push(token_c);\n          lastPos = links[ln].lastIndex;\n        }\n        if (lastPos < text.length) {\n          const token = new state.Token('text', '', 0);\n          token.content = text.slice(lastPos);\n          token.level = level;\n          nodes.push(token);\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n      }\n    }\n  }\n}\n\n// Simple typographic replacements\n//\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - multiplications 2 x 4 -> 2 × 4\n\nconst RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/;\n\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nconst SCOPED_ABBR_TEST_RE = /\\((c|tm|r)\\)/i;\nconst SCOPED_ABBR_RE = /\\((c|tm|r)\\)/ig;\nconst SCOPED_ABBR = {\n  c: '©',\n  r: '®',\n  tm: '™'\n};\nfunction replaceFn(match, name) {\n  return SCOPED_ABBR[name.toLowerCase()];\n}\nfunction replace_scoped(inlineTokens) {\n  let inside_autolink = 0;\n  for (let i = inlineTokens.length - 1; i >= 0; i--) {\n    const token = inlineTokens[i];\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);\n    }\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\nfunction replace_rare(inlineTokens) {\n  let inside_autolink = 0;\n  for (let i = inlineTokens.length - 1; i >= 0; i--) {\n    const token = inlineTokens[i];\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content.replace(/\\+-/g, '±')\n        // .., ..., ....... -> …\n        // but ?..... & !..... -> ?.. & !..\n        .replace(/\\.{2,}/g, '…').replace(/([?!])…/g, '$1..').replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')\n        // em-dash\n        .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\\u2014')\n        // en-dash\n        .replace(/(^|\\s)--(?=\\s|$)/mg, '$1\\u2013').replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, '$1\\u2013');\n      }\n    }\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\nfunction replace(state) {\n  let blkIdx;\n  if (!state.md.options.typographer) {\n    return;\n  }\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n    if (state.tokens[blkIdx].type !== 'inline') {\n      continue;\n    }\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children);\n    }\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children);\n    }\n  }\n}\n\n// Convert straight quotation marks to typographic ones\n//\n\nconst QUOTE_TEST_RE = /['\"]/;\nconst QUOTE_RE = /['\"]/g;\nconst APOSTROPHE = '\\u2019'; /* ’ */\n\nfunction replaceAt(str, index, ch) {\n  return str.slice(0, index) + ch + str.slice(index + 1);\n}\nfunction process_inlines(tokens, state) {\n  let j;\n  const stack = [];\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const thisLevel = tokens[i].level;\n    for (j = stack.length - 1; j >= 0; j--) {\n      if (stack[j].level <= thisLevel) {\n        break;\n      }\n    }\n    stack.length = j + 1;\n    if (token.type !== 'text') {\n      continue;\n    }\n    let text = token.content;\n    let pos = 0;\n    let max = text.length;\n\n    /* eslint no-labels:0,block-scoped-var:0 */\n    OUTER: while (pos < max) {\n      QUOTE_RE.lastIndex = pos;\n      const t = QUOTE_RE.exec(text);\n      if (!t) {\n        break;\n      }\n      let canOpen = true;\n      let canClose = true;\n      pos = t.index + 1;\n      const isSingle = t[0] === \"'\";\n\n      // Find previous character,\n      // default to space if it's the beginning of the line\n      //\n      let lastChar = 0x20;\n      if (t.index - 1 >= 0) {\n        lastChar = text.charCodeAt(t.index - 1);\n      } else {\n        for (j = i - 1; j >= 0; j--) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // lastChar defaults to 0x20\n          if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);\n          break;\n        }\n      }\n\n      // Find next character,\n      // default to space if it's the end of the line\n      //\n      let nextChar = 0x20;\n      if (pos < max) {\n        nextChar = text.charCodeAt(pos);\n      } else {\n        for (j = i + 1; j < tokens.length; j++) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // nextChar defaults to 0x20\n          if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          nextChar = tokens[j].content.charCodeAt(0);\n          break;\n        }\n      }\n      const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n      const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n      const isLastWhiteSpace = isWhiteSpace(lastChar);\n      const isNextWhiteSpace = isWhiteSpace(nextChar);\n      if (isNextWhiteSpace) {\n        canOpen = false;\n      } else if (isNextPunctChar) {\n        if (!(isLastWhiteSpace || isLastPunctChar)) {\n          canOpen = false;\n        }\n      }\n      if (isLastWhiteSpace) {\n        canClose = false;\n      } else if (isLastPunctChar) {\n        if (!(isNextWhiteSpace || isNextPunctChar)) {\n          canClose = false;\n        }\n      }\n      if (nextChar === 0x22 /* \" */ && t[0] === '\"') {\n        if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {\n          // special case: 1\"\" - count first quote as an inch\n          canClose = canOpen = false;\n        }\n      }\n      if (canOpen && canClose) {\n        // Replace quotes in the middle of punctuation sequence, but not\n        // in the middle of the words, i.e.:\n        //\n        // 1. foo \" bar \" baz - not replaced\n        // 2. foo-\"-bar-\"-baz - replaced\n        // 3. foo\"bar\"baz     - not replaced\n        //\n        canOpen = isLastPunctChar;\n        canClose = isNextPunctChar;\n      }\n      if (!canOpen && !canClose) {\n        // middle of word\n        if (isSingle) {\n          token.content = replaceAt(token.content, t.index, APOSTROPHE);\n        }\n        continue;\n      }\n      if (canClose) {\n        // this could be a closing quote, rewind the stack to get a match\n        for (j = stack.length - 1; j >= 0; j--) {\n          let item = stack[j];\n          if (stack[j].level < thisLevel) {\n            break;\n          }\n          if (item.single === isSingle && stack[j].level === thisLevel) {\n            item = stack[j];\n            let openQuote;\n            let closeQuote;\n            if (isSingle) {\n              openQuote = state.md.options.quotes[2];\n              closeQuote = state.md.options.quotes[3];\n            } else {\n              openQuote = state.md.options.quotes[0];\n              closeQuote = state.md.options.quotes[1];\n            }\n\n            // replace token.content *before* tokens[item.token].content,\n            // because, if they are pointing at the same token, replaceAt\n            // could mess up indices when quote length != 1\n            token.content = replaceAt(token.content, t.index, closeQuote);\n            tokens[item.token].content = replaceAt(tokens[item.token].content, item.pos, openQuote);\n            pos += closeQuote.length - 1;\n            if (item.token === i) {\n              pos += openQuote.length - 1;\n            }\n            text = token.content;\n            max = text.length;\n            stack.length = j;\n            continue OUTER;\n          }\n        }\n      }\n      if (canOpen) {\n        stack.push({\n          token: i,\n          pos: t.index,\n          single: isSingle,\n          level: thisLevel\n        });\n      } else if (canClose && isSingle) {\n        token.content = replaceAt(token.content, t.index, APOSTROPHE);\n      }\n    }\n  }\n}\nfunction smartquotes(state) {\n  /* eslint max-depth:0 */\n  if (!state.md.options.typographer) {\n    return;\n  }\n  for (let blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n    if (state.tokens[blkIdx].type !== 'inline' || !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n      continue;\n    }\n    process_inlines(state.tokens[blkIdx].children, state);\n  }\n}\n\n// Join raw text tokens with the rest of the text\n//\n// This is set as a separate rule to provide an opportunity for plugins\n// to run text replacements after text join, but before escape join.\n//\n// For example, `\\:)` shouldn't be replaced with an emoji.\n//\n\nfunction text_join(state) {\n  let curr, last;\n  const blockTokens = state.tokens;\n  const l = blockTokens.length;\n  for (let j = 0; j < l; j++) {\n    if (blockTokens[j].type !== 'inline') continue;\n    const tokens = blockTokens[j].children;\n    const max = tokens.length;\n    for (curr = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text_special') {\n        tokens[curr].type = 'text';\n      }\n    }\n    for (curr = last = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text' && curr + 1 < max && tokens[curr + 1].type === 'text') {\n        // collapse two adjacent text nodes\n        tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n      } else {\n        if (curr !== last) {\n          tokens[last] = tokens[curr];\n        }\n        last++;\n      }\n    }\n    if (curr !== last) {\n      tokens.length = last;\n    }\n  }\n}\n\n/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/\n\nconst _rules$2 = [['normalize', normalize], ['block', block], ['inline', inline], ['linkify', linkify$1], ['replacements', replace], ['smartquotes', smartquotes],\n// `text_join` finds `text_special` tokens (for escape sequences)\n// and joins them with the rest of the text\n['text_join', text_join]];\n\n/**\n * new Core()\n **/\nfunction Core() {\n  /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/\n  this.ruler = new Ruler();\n  for (let i = 0; i < _rules$2.length; i++) {\n    this.ruler.push(_rules$2[i][0], _rules$2[i][1]);\n  }\n}\n\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/\nCore.prototype.process = function (state) {\n  const rules = this.ruler.getRules('');\n  for (let i = 0, l = rules.length; i < l; i++) {\n    rules[i](state);\n  }\n};\nCore.prototype.State = StateCore;\n\n// Parser state class\n\nfunction StateBlock(src, md, env, tokens) {\n  this.src = src;\n\n  // link to parser instance\n  this.md = md;\n  this.env = env;\n\n  //\n  // Internal state vartiables\n  //\n\n  this.tokens = tokens;\n  this.bMarks = []; // line begin offsets for fast jumps\n  this.eMarks = []; // line end offsets for fast jumps\n  this.tShift = []; // offsets of the first non-space characters (tabs not expanded)\n  this.sCount = []; // indents for each line (tabs expanded)\n\n  // An amount of virtual spaces (tabs expanded) between beginning\n  // of each line (bMarks) and real beginning of that line.\n  //\n  // It exists only as a hack because blockquotes override bMarks\n  // losing information in the process.\n  //\n  // It's used only when expanding tabs, you can think about it as\n  // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n  // means first tab should be expanded to 4-21%4 === 3 spaces.\n  //\n  this.bsCount = [];\n\n  // block parser variables\n\n  // required block content indent (for example, if we are\n  // inside a list, it would be positioned after list marker)\n  this.blkIndent = 0;\n  this.line = 0; // line index in src\n  this.lineMax = 0; // lines count\n  this.tight = false; // loose/tight mode for lists\n  this.ddIndent = -1; // indent of the current dd block (-1 if there isn't any)\n  this.listIndent = -1; // indent of the current list block (-1 if there isn't any)\n\n  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n  // used in lists to determine if they interrupt a paragraph\n  this.parentType = 'root';\n  this.level = 0;\n\n  // Create caches\n  // Generate markers.\n  const s = this.src;\n  for (let start = 0, pos = 0, indent = 0, offset = 0, len = s.length, indent_found = false; pos < len; pos++) {\n    const ch = s.charCodeAt(pos);\n    if (!indent_found) {\n      if (isSpace(ch)) {\n        indent++;\n        if (ch === 0x09) {\n          offset += 4 - offset % 4;\n        } else {\n          offset++;\n        }\n        continue;\n      } else {\n        indent_found = true;\n      }\n    }\n    if (ch === 0x0A || pos === len - 1) {\n      if (ch !== 0x0A) {\n        pos++;\n      }\n      this.bMarks.push(start);\n      this.eMarks.push(pos);\n      this.tShift.push(indent);\n      this.sCount.push(offset);\n      this.bsCount.push(0);\n      indent_found = false;\n      indent = 0;\n      offset = 0;\n      start = pos + 1;\n    }\n  }\n\n  // Push fake entry to simplify cache bounds checks\n  this.bMarks.push(s.length);\n  this.eMarks.push(s.length);\n  this.tShift.push(0);\n  this.sCount.push(0);\n  this.bsCount.push(0);\n  this.lineMax = this.bMarks.length - 1; // don't count last fake line\n}\n\n// Push new token to \"stream\".\n//\nStateBlock.prototype.push = function (type, tag, nesting) {\n  const token = new Token(type, tag, nesting);\n  token.block = true;\n  if (nesting < 0) this.level--; // closing tag\n  token.level = this.level;\n  if (nesting > 0) this.level++; // opening tag\n\n  this.tokens.push(token);\n  return token;\n};\nStateBlock.prototype.isEmpty = function isEmpty(line) {\n  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n};\nStateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n  for (let max = this.lineMax; from < max; from++) {\n    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n      break;\n    }\n  }\n  return from;\n};\n\n// Skip spaces from given position.\nStateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n  for (let max = this.src.length; pos < max; pos++) {\n    const ch = this.src.charCodeAt(pos);\n    if (!isSpace(ch)) {\n      break;\n    }\n  }\n  return pos;\n};\n\n// Skip spaces from given position in reverse.\nStateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {\n  if (pos <= min) {\n    return pos;\n  }\n  while (pos > min) {\n    if (!isSpace(this.src.charCodeAt(--pos))) {\n      return pos + 1;\n    }\n  }\n  return pos;\n};\n\n// Skip char codes from given position\nStateBlock.prototype.skipChars = function skipChars(pos, code) {\n  for (let max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== code) {\n      break;\n    }\n  }\n  return pos;\n};\n\n// Skip char codes reverse from given position - 1\nStateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {\n  if (pos <= min) {\n    return pos;\n  }\n  while (pos > min) {\n    if (code !== this.src.charCodeAt(--pos)) {\n      return pos + 1;\n    }\n  }\n  return pos;\n};\n\n// cut lines range from source.\nStateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n  if (begin >= end) {\n    return '';\n  }\n  const queue = new Array(end - begin);\n  for (let i = 0, line = begin; line < end; line++, i++) {\n    let lineIndent = 0;\n    const lineStart = this.bMarks[line];\n    let first = lineStart;\n    let last;\n    if (line + 1 < end || keepLastLF) {\n      // No need for bounds check because we have fake entry on tail.\n      last = this.eMarks[line] + 1;\n    } else {\n      last = this.eMarks[line];\n    }\n    while (first < last && lineIndent < indent) {\n      const ch = this.src.charCodeAt(first);\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;\n        } else {\n          lineIndent++;\n        }\n      } else if (first - lineStart < this.tShift[line]) {\n        // patched tShift masked characters to look like spaces (blockquotes, list markers)\n        lineIndent++;\n      } else {\n        break;\n      }\n      first++;\n    }\n    if (lineIndent > indent) {\n      // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n      // with indent=2 becomes '  \\tfoobar'\n      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);\n    } else {\n      queue[i] = this.src.slice(first, last);\n    }\n  }\n  return queue.join('');\n};\n\n// re-export Token class to use in block rules\nStateBlock.prototype.Token = Token;\n\n// GFM table, https://github.github.com/gfm/#tables-extension-\n\n\n// Limit the amount of empty autocompleted cells in a table,\n// see https://github.com/markdown-it/markdown-it/issues/1000,\n//\n// Both pulldown-cmark and commonmark-hs limit the number of cells this way to ~200k.\n// We set it to 65k, which can expand user input by a factor of x370\n// (256x256 square is 1.8kB expanded into 650kB).\nconst MAX_AUTOCOMPLETED_CELLS = 0x10000;\nfunction getLine(state, line) {\n  const pos = state.bMarks[line] + state.tShift[line];\n  const max = state.eMarks[line];\n  return state.src.slice(pos, max);\n}\nfunction escapedSplit(str) {\n  const result = [];\n  const max = str.length;\n  let pos = 0;\n  let ch = str.charCodeAt(pos);\n  let isEscaped = false;\n  let lastPos = 0;\n  let current = '';\n  while (pos < max) {\n    if (ch === 0x7c /* | */) {\n      if (!isEscaped) {\n        // pipe separating cells, '|'\n        result.push(current + str.substring(lastPos, pos));\n        current = '';\n        lastPos = pos + 1;\n      } else {\n        // escaped pipe, '\\|'\n        current += str.substring(lastPos, pos - 1);\n        lastPos = pos;\n      }\n    }\n    isEscaped = ch === 0x5c /* \\ */;\n    pos++;\n    ch = str.charCodeAt(pos);\n  }\n  result.push(current + str.substring(lastPos));\n  return result;\n}\nfunction table(state, startLine, endLine, silent) {\n  // should have at least two lines\n  if (startLine + 2 > endLine) {\n    return false;\n  }\n  let nextLine = startLine + 1;\n  if (state.sCount[nextLine] < state.blkIndent) {\n    return false;\n  }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) {\n    return false;\n  }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  let pos = state.bMarks[nextLine] + state.tShift[nextLine];\n  if (pos >= state.eMarks[nextLine]) {\n    return false;\n  }\n  const firstCh = state.src.charCodeAt(pos++);\n  if (firstCh !== 0x7C /* | */ && firstCh !== 0x2D /* - */ && firstCh !== 0x3A /* : */) {\n    return false;\n  }\n  if (pos >= state.eMarks[nextLine]) {\n    return false;\n  }\n  const secondCh = state.src.charCodeAt(pos++);\n  if (secondCh !== 0x7C /* | */ && secondCh !== 0x2D /* - */ && secondCh !== 0x3A /* : */ && !isSpace(secondCh)) {\n    return false;\n  }\n\n  // if first character is '-', then second character must not be a space\n  // (due to parsing ambiguity with list)\n  if (firstCh === 0x2D /* - */ && isSpace(secondCh)) {\n    return false;\n  }\n  while (pos < state.eMarks[nextLine]) {\n    const ch = state.src.charCodeAt(pos);\n    if (ch !== 0x7C /* | */ && ch !== 0x2D /* - */ && ch !== 0x3A /* : */ && !isSpace(ch)) {\n      return false;\n    }\n    pos++;\n  }\n  let lineText = getLine(state, startLine + 1);\n  let columns = lineText.split('|');\n  const aligns = [];\n  for (let i = 0; i < columns.length; i++) {\n    const t = columns[i].trim();\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n    if (!/^:?-+:?$/.test(t)) {\n      return false;\n    }\n    if (t.charCodeAt(t.length - 1) === 0x3A /* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A /* : */ ? 'center' : 'right');\n    } else if (t.charCodeAt(0) === 0x3A /* : */) {\n      aligns.push('left');\n    } else {\n      aligns.push('');\n    }\n  }\n  lineText = getLine(state, startLine).trim();\n  if (lineText.indexOf('|') === -1) {\n    return false;\n  }\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n  columns = escapedSplit(lineText);\n  if (columns.length && columns[0] === '') columns.shift();\n  if (columns.length && columns[columns.length - 1] === '') columns.pop();\n\n  // header row will define an amount of columns in the entire table,\n  // and align row should be exactly the same (the rest of the rows can differ)\n  const columnCount = columns.length;\n  if (columnCount === 0 || columnCount !== aligns.length) {\n    return false;\n  }\n  if (silent) {\n    return true;\n  }\n  const oldParentType = state.parentType;\n  state.parentType = 'table';\n\n  // use 'blockquote' lists for termination because it's\n  // the most similar to tables\n  const terminatorRules = state.md.block.ruler.getRules('blockquote');\n  const token_to = state.push('table_open', 'table', 1);\n  const tableLines = [startLine, 0];\n  token_to.map = tableLines;\n  const token_tho = state.push('thead_open', 'thead', 1);\n  token_tho.map = [startLine, startLine + 1];\n  const token_htro = state.push('tr_open', 'tr', 1);\n  token_htro.map = [startLine, startLine + 1];\n  for (let i = 0; i < columns.length; i++) {\n    const token_ho = state.push('th_open', 'th', 1);\n    if (aligns[i]) {\n      token_ho.attrs = [['style', 'text-align:' + aligns[i]]];\n    }\n    const token_il = state.push('inline', '', 0);\n    token_il.content = columns[i].trim();\n    token_il.children = [];\n    state.push('th_close', 'th', -1);\n  }\n  state.push('tr_close', 'tr', -1);\n  state.push('thead_close', 'thead', -1);\n  let tbodyLines;\n  let autocompletedCells = 0;\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) {\n      break;\n    }\n    let terminate = false;\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) {\n      break;\n    }\n    lineText = getLine(state, nextLine).trim();\n    if (!lineText) {\n      break;\n    }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      break;\n    }\n    columns = escapedSplit(lineText);\n    if (columns.length && columns[0] === '') columns.shift();\n    if (columns.length && columns[columns.length - 1] === '') columns.pop();\n\n    // note: autocomplete count can be negative if user specifies more columns than header,\n    // but that does not affect intended use (which is limiting expansion)\n    autocompletedCells += columnCount - columns.length;\n    if (autocompletedCells > MAX_AUTOCOMPLETED_CELLS) {\n      break;\n    }\n    if (nextLine === startLine + 2) {\n      const token_tbo = state.push('tbody_open', 'tbody', 1);\n      token_tbo.map = tbodyLines = [startLine + 2, 0];\n    }\n    const token_tro = state.push('tr_open', 'tr', 1);\n    token_tro.map = [nextLine, nextLine + 1];\n    for (let i = 0; i < columnCount; i++) {\n      const token_tdo = state.push('td_open', 'td', 1);\n      if (aligns[i]) {\n        token_tdo.attrs = [['style', 'text-align:' + aligns[i]]];\n      }\n      const token_il = state.push('inline', '', 0);\n      token_il.content = columns[i] ? columns[i].trim() : '';\n      token_il.children = [];\n      state.push('td_close', 'td', -1);\n    }\n    state.push('tr_close', 'tr', -1);\n  }\n  if (tbodyLines) {\n    state.push('tbody_close', 'tbody', -1);\n    tbodyLines[1] = nextLine;\n  }\n  state.push('table_close', 'table', -1);\n  tableLines[1] = nextLine;\n  state.parentType = oldParentType;\n  state.line = nextLine;\n  return true;\n}\n\n// Code block (4 spaces padded)\n\nfunction code(state, startLine, endLine /*, silent */) {\n  if (state.sCount[startLine] - state.blkIndent < 4) {\n    return false;\n  }\n  let nextLine = startLine + 1;\n  let last = nextLine;\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++;\n      continue;\n    }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      nextLine++;\n      last = nextLine;\n      continue;\n    }\n    break;\n  }\n  state.line = last;\n  const token = state.push('code_block', 'code', 0);\n  token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\\n';\n  token.map = [startLine, state.line];\n  return true;\n}\n\n// fences (``` lang, ~~~ lang)\n\nfunction fence(state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine];\n  let max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n  if (pos + 3 > max) {\n    return false;\n  }\n  const marker = state.src.charCodeAt(pos);\n  if (marker !== 0x7E /* ~ */ && marker !== 0x60 /* ` */) {\n    return false;\n  }\n\n  // scan marker length\n  let mem = pos;\n  pos = state.skipChars(pos, marker);\n  let len = pos - mem;\n  if (len < 3) {\n    return false;\n  }\n  const markup = state.src.slice(mem, pos);\n  const params = state.src.slice(pos, max);\n  if (marker === 0x60 /* ` */) {\n    if (params.indexOf(String.fromCharCode(marker)) >= 0) {\n      return false;\n    }\n  }\n\n  // Since start is found, we can report success here in validation mode\n  if (silent) {\n    return true;\n  }\n\n  // search end of block\n  let nextLine = startLine;\n  let haveEndMarker = false;\n  for (;;) {\n    nextLine++;\n    if (nextLine >= endLine) {\n      // unclosed block should be autoclosed by end of document.\n      // also block seems to be autoclosed by end of parent\n      break;\n    }\n    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n    if (pos < max && state.sCount[nextLine] < state.blkIndent) {\n      // non-empty line with negative indent should stop the list:\n      // - ```\n      //  test\n      break;\n    }\n    if (state.src.charCodeAt(pos) !== marker) {\n      continue;\n    }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      // closing fence should be indented less than 4 spaces\n      continue;\n    }\n    pos = state.skipChars(pos, marker);\n\n    // closing code fence must be at least as long as the opening one\n    if (pos - mem < len) {\n      continue;\n    }\n\n    // make sure tail has spaces only\n    pos = state.skipSpaces(pos);\n    if (pos < max) {\n      continue;\n    }\n    haveEndMarker = true;\n    // found!\n    break;\n  }\n\n  // If a fence has heading spaces, they should be removed from its inner block\n  len = state.sCount[startLine];\n  state.line = nextLine + (haveEndMarker ? 1 : 0);\n  const token = state.push('fence', 'code', 0);\n  token.info = params;\n  token.content = state.getLines(startLine + 1, nextLine, len, true);\n  token.markup = markup;\n  token.map = [startLine, state.line];\n  return true;\n}\n\n// Block quotes\n\nfunction blockquote(state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine];\n  let max = state.eMarks[startLine];\n  const oldLineMax = state.lineMax;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n\n  // check the block quote marker\n  if (state.src.charCodeAt(pos) !== 0x3E /* > */) {\n    return false;\n  }\n\n  // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n  if (silent) {\n    return true;\n  }\n  const oldBMarks = [];\n  const oldBSCount = [];\n  const oldSCount = [];\n  const oldTShift = [];\n  const terminatorRules = state.md.block.ruler.getRules('blockquote');\n  const oldParentType = state.parentType;\n  state.parentType = 'blockquote';\n  let lastLineEmpty = false;\n  let nextLine;\n\n  // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag:\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n  for (nextLine = startLine; nextLine < endLine; nextLine++) {\n    // check if it's outdented, i.e. it's inside list item and indented\n    // less than said list item:\n    //\n    // ```\n    // 1. anything\n    //    > current blockquote\n    // 2. checking this line\n    // ```\n    const isOutdented = state.sCount[nextLine] < state.blkIndent;\n    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break;\n    }\n    if (state.src.charCodeAt(pos++) === 0x3E /* > */ && !isOutdented) {\n      // This line is inside the blockquote.\n\n      // set offset past spaces and \">\"\n      let initial = state.sCount[nextLine] + 1;\n      let spaceAfterMarker;\n      let adjustTab;\n\n      // skip one optional space after '>'\n      if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n        // ' >   test '\n        //     ^ -- position start of line here:\n        pos++;\n        initial++;\n        adjustTab = false;\n        spaceAfterMarker = true;\n      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n        spaceAfterMarker = true;\n        if ((state.bsCount[nextLine] + initial) % 4 === 3) {\n          // '  >\\t  test '\n          //       ^ -- position start of line here (tab has width===1)\n          pos++;\n          initial++;\n          adjustTab = false;\n        } else {\n          // ' >\\t  test '\n          //    ^ -- position start of line here + shift bsCount slightly\n          //         to make extra space appear\n          adjustTab = true;\n        }\n      } else {\n        spaceAfterMarker = false;\n      }\n      let offset = initial;\n      oldBMarks.push(state.bMarks[nextLine]);\n      state.bMarks[nextLine] = pos;\n      while (pos < max) {\n        const ch = state.src.charCodeAt(pos);\n        if (isSpace(ch)) {\n          if (ch === 0x09) {\n            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;\n          } else {\n            offset++;\n          }\n        } else {\n          break;\n        }\n        pos++;\n      }\n      lastLineEmpty = pos >= max;\n      oldBSCount.push(state.bsCount[nextLine]);\n      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);\n      oldSCount.push(state.sCount[nextLine]);\n      state.sCount[nextLine] = offset - initial;\n      oldTShift.push(state.tShift[nextLine]);\n      state.tShift[nextLine] = pos - state.bMarks[nextLine];\n      continue;\n    }\n\n    // Case 2: line is not inside the blockquote, and the last line was empty.\n    if (lastLineEmpty) {\n      break;\n    }\n\n    // Case 3: another tag found.\n    let terminate = false;\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) {\n      // Quirk to enforce \"hard termination mode\" for paragraphs;\n      // normally if you call `tokenize(state, startLine, nextLine)`,\n      // paragraphs will look below nextLine for paragraph continuation,\n      // but if blockquote is terminated by another tag, they shouldn't\n      state.lineMax = nextLine;\n      if (state.blkIndent !== 0) {\n        // state.blkIndent was non-zero, we now set it to zero,\n        // so we need to re-calculate all offsets to appear as\n        // if indent wasn't changed\n        oldBMarks.push(state.bMarks[nextLine]);\n        oldBSCount.push(state.bsCount[nextLine]);\n        oldTShift.push(state.tShift[nextLine]);\n        oldSCount.push(state.sCount[nextLine]);\n        state.sCount[nextLine] -= state.blkIndent;\n      }\n      break;\n    }\n    oldBMarks.push(state.bMarks[nextLine]);\n    oldBSCount.push(state.bsCount[nextLine]);\n    oldTShift.push(state.tShift[nextLine]);\n    oldSCount.push(state.sCount[nextLine]);\n\n    // A negative indentation means that this is a paragraph continuation\n    //\n    state.sCount[nextLine] = -1;\n  }\n  const oldIndent = state.blkIndent;\n  state.blkIndent = 0;\n  const token_o = state.push('blockquote_open', 'blockquote', 1);\n  token_o.markup = '>';\n  const lines = [startLine, 0];\n  token_o.map = lines;\n  state.md.block.tokenize(state, startLine, nextLine);\n  const token_c = state.push('blockquote_close', 'blockquote', -1);\n  token_c.markup = '>';\n  state.lineMax = oldLineMax;\n  state.parentType = oldParentType;\n  lines[1] = state.line;\n\n  // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n  for (let i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i];\n    state.tShift[i + startLine] = oldTShift[i];\n    state.sCount[i + startLine] = oldSCount[i];\n    state.bsCount[i + startLine] = oldBSCount[i];\n  }\n  state.blkIndent = oldIndent;\n  return true;\n}\n\n// Horizontal rule\n\nfunction hr(state, startLine, endLine, silent) {\n  const max = state.eMarks[startLine];\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n  let pos = state.bMarks[startLine] + state.tShift[startLine];\n  const marker = state.src.charCodeAt(pos++);\n\n  // Check hr marker\n  if (marker !== 0x2A /* * */ && marker !== 0x2D /* - */ && marker !== 0x5F /* _ */) {\n    return false;\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  let cnt = 1;\n  while (pos < max) {\n    const ch = state.src.charCodeAt(pos++);\n    if (ch !== marker && !isSpace(ch)) {\n      return false;\n    }\n    if (ch === marker) {\n      cnt++;\n    }\n  }\n  if (cnt < 3) {\n    return false;\n  }\n  if (silent) {\n    return true;\n  }\n  state.line = startLine + 1;\n  const token = state.push('hr', 'hr', 0);\n  token.map = [startLine, state.line];\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n  return true;\n}\n\n// Lists\n\n\n// Search `[-+*][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipBulletListMarker(state, startLine) {\n  const max = state.eMarks[startLine];\n  let pos = state.bMarks[startLine] + state.tShift[startLine];\n  const marker = state.src.charCodeAt(pos++);\n  // Check bullet\n  if (marker !== 0x2A /* * */ && marker !== 0x2D /* - */ && marker !== 0x2B /* + */) {\n    return -1;\n  }\n  if (pos < max) {\n    const ch = state.src.charCodeAt(pos);\n    if (!isSpace(ch)) {\n      // \" -test \" - is not a list item\n      return -1;\n    }\n  }\n  return pos;\n}\n\n// Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipOrderedListMarker(state, startLine) {\n  const start = state.bMarks[startLine] + state.tShift[startLine];\n  const max = state.eMarks[startLine];\n  let pos = start;\n\n  // List marker should have at least 2 chars (digit + dot)\n  if (pos + 1 >= max) {\n    return -1;\n  }\n  let ch = state.src.charCodeAt(pos++);\n  if (ch < 0x30 /* 0 */ || ch > 0x39 /* 9 */) {\n    return -1;\n  }\n  for (;;) {\n    // EOL -> fail\n    if (pos >= max) {\n      return -1;\n    }\n    ch = state.src.charCodeAt(pos++);\n    if (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) {\n      // List marker should have no more than 9 digits\n      // (prevents integer overflow in browsers)\n      if (pos - start >= 10) {\n        return -1;\n      }\n      continue;\n    }\n\n    // found valid marker\n    if (ch === 0x29 /* ) */ || ch === 0x2e /* . */) {\n      break;\n    }\n    return -1;\n  }\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n    if (!isSpace(ch)) {\n      // \" 1.test \" - is not a list item\n      return -1;\n    }\n  }\n  return pos;\n}\nfunction markTightParagraphs(state, idx) {\n  const level = state.level + 2;\n  for (let i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n      state.tokens[i + 2].hidden = true;\n      state.tokens[i].hidden = true;\n      i += 2;\n    }\n  }\n}\nfunction list(state, startLine, endLine, silent) {\n  let max, pos, start, token;\n  let nextLine = startLine;\n  let tight = true;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) {\n    return false;\n  }\n\n  // Special case:\n  //  - item 1\n  //   - item 2\n  //    - item 3\n  //     - item 4\n  //      - this one is a paragraph continuation\n  if (state.listIndent >= 0 && state.sCount[nextLine] - state.listIndent >= 4 && state.sCount[nextLine] < state.blkIndent) {\n    return false;\n  }\n  let isTerminatingParagraph = false;\n\n  // limit conditions when list can interrupt\n  // a paragraph (validation mode only)\n  if (silent && state.parentType === 'paragraph') {\n    // Next list item should still terminate previous list item;\n    //\n    // This code can fail if plugins use blkIndent as well as lists,\n    // but I hope the spec gets fixed long before that happens.\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      isTerminatingParagraph = true;\n    }\n  }\n\n  // Detect list type and position after marker\n  let isOrdered;\n  let markerValue;\n  let posAfterMarker;\n  if ((posAfterMarker = skipOrderedListMarker(state, nextLine)) >= 0) {\n    isOrdered = true;\n    start = state.bMarks[nextLine] + state.tShift[nextLine];\n    markerValue = Number(state.src.slice(start, posAfterMarker - 1));\n\n    // If we're starting a new ordered list right after\n    // a paragraph, it should start with 1.\n    if (isTerminatingParagraph && markerValue !== 1) return false;\n  } else if ((posAfterMarker = skipBulletListMarker(state, nextLine)) >= 0) {\n    isOrdered = false;\n  } else {\n    return false;\n  }\n\n  // If we're starting a new unordered list right after\n  // a paragraph, first line should not be empty.\n  if (isTerminatingParagraph) {\n    if (state.skipSpaces(posAfterMarker) >= state.eMarks[nextLine]) return false;\n  }\n\n  // For validation mode we can terminate immediately\n  if (silent) {\n    return true;\n  }\n\n  // We should terminate list on style change. Remember first one to compare.\n  const markerCharCode = state.src.charCodeAt(posAfterMarker - 1);\n\n  // Start list\n  const listTokIdx = state.tokens.length;\n  if (isOrdered) {\n    token = state.push('ordered_list_open', 'ol', 1);\n    if (markerValue !== 1) {\n      token.attrs = [['start', markerValue]];\n    }\n  } else {\n    token = state.push('bullet_list_open', 'ul', 1);\n  }\n  const listLines = [nextLine, 0];\n  token.map = listLines;\n  token.markup = String.fromCharCode(markerCharCode);\n\n  //\n  // Iterate list items\n  //\n\n  let prevEmptyEnd = false;\n  const terminatorRules = state.md.block.ruler.getRules('list');\n  const oldParentType = state.parentType;\n  state.parentType = 'list';\n  while (nextLine < endLine) {\n    pos = posAfterMarker;\n    max = state.eMarks[nextLine];\n    const initial = state.sCount[nextLine] + posAfterMarker - (state.bMarks[nextLine] + state.tShift[nextLine]);\n    let offset = initial;\n    while (pos < max) {\n      const ch = state.src.charCodeAt(pos);\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[nextLine]) % 4;\n      } else if (ch === 0x20) {\n        offset++;\n      } else {\n        break;\n      }\n      pos++;\n    }\n    const contentStart = pos;\n    let indentAfterMarker;\n    if (contentStart >= max) {\n      // trimming space in \"-    \\n  3\" case, indent is 1 here\n      indentAfterMarker = 1;\n    } else {\n      indentAfterMarker = offset - initial;\n    }\n\n    // If we have more than 4 spaces, the indent is 1\n    // (the rest is just indented code block)\n    if (indentAfterMarker > 4) {\n      indentAfterMarker = 1;\n    }\n\n    // \"  -  test\"\n    //  ^^^^^ - calculating total length of this thing\n    const indent = initial + indentAfterMarker;\n\n    // Run subparser & write tokens\n    token = state.push('list_item_open', 'li', 1);\n    token.markup = String.fromCharCode(markerCharCode);\n    const itemLines = [nextLine, 0];\n    token.map = itemLines;\n    if (isOrdered) {\n      token.info = state.src.slice(start, posAfterMarker - 1);\n    }\n\n    // change current state, then restore it after parser subcall\n    const oldTight = state.tight;\n    const oldTShift = state.tShift[nextLine];\n    const oldSCount = state.sCount[nextLine];\n\n    //  - example list\n    // ^ listIndent position will be here\n    //   ^ blkIndent position will be here\n    //\n    const oldListIndent = state.listIndent;\n    state.listIndent = state.blkIndent;\n    state.blkIndent = indent;\n    state.tight = true;\n    state.tShift[nextLine] = contentStart - state.bMarks[nextLine];\n    state.sCount[nextLine] = offset;\n    if (contentStart >= max && state.isEmpty(nextLine + 1)) {\n      // workaround for this case\n      // (list item is empty, list terminates before \"foo\"):\n      // ~~~~~~~~\n      //   -\n      //\n      //     foo\n      // ~~~~~~~~\n      state.line = Math.min(state.line + 2, endLine);\n    } else {\n      state.md.block.tokenize(state, nextLine, endLine, true);\n    }\n\n    // If any of list item is tight, mark list as tight\n    if (!state.tight || prevEmptyEnd) {\n      tight = false;\n    }\n    // Item become loose if finish with empty line,\n    // but we should filter last element, because it means list finish\n    prevEmptyEnd = state.line - nextLine > 1 && state.isEmpty(state.line - 1);\n    state.blkIndent = state.listIndent;\n    state.listIndent = oldListIndent;\n    state.tShift[nextLine] = oldTShift;\n    state.sCount[nextLine] = oldSCount;\n    state.tight = oldTight;\n    token = state.push('list_item_close', 'li', -1);\n    token.markup = String.fromCharCode(markerCharCode);\n    nextLine = state.line;\n    itemLines[1] = nextLine;\n    if (nextLine >= endLine) {\n      break;\n    }\n\n    //\n    // Try to check if list is terminated or continued.\n    //\n    if (state.sCount[nextLine] < state.blkIndent) {\n      break;\n    }\n\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      break;\n    }\n\n    // fail if terminating block found\n    let terminate = false;\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) {\n      break;\n    }\n\n    // fail if list has another type\n    if (isOrdered) {\n      posAfterMarker = skipOrderedListMarker(state, nextLine);\n      if (posAfterMarker < 0) {\n        break;\n      }\n      start = state.bMarks[nextLine] + state.tShift[nextLine];\n    } else {\n      posAfterMarker = skipBulletListMarker(state, nextLine);\n      if (posAfterMarker < 0) {\n        break;\n      }\n    }\n    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) {\n      break;\n    }\n  }\n\n  // Finalize list\n  if (isOrdered) {\n    token = state.push('ordered_list_close', 'ol', -1);\n  } else {\n    token = state.push('bullet_list_close', 'ul', -1);\n  }\n  token.markup = String.fromCharCode(markerCharCode);\n  listLines[1] = nextLine;\n  state.line = nextLine;\n  state.parentType = oldParentType;\n\n  // mark paragraphs tight if needed\n  if (tight) {\n    markTightParagraphs(state, listTokIdx);\n  }\n  return true;\n}\n\nfunction reference(state, startLine, _endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine];\n  let max = state.eMarks[startLine];\n  let nextLine = startLine + 1;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n  if (state.src.charCodeAt(pos) !== 0x5B /* [ */) {\n    return false;\n  }\n  function getNextLine(nextLine) {\n    const endLine = state.lineMax;\n    if (nextLine >= endLine || state.isEmpty(nextLine)) {\n      // empty line or end of input\n      return null;\n    }\n    let isContinuation = false;\n\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) {\n      isContinuation = true;\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) {\n      isContinuation = true;\n    }\n    if (!isContinuation) {\n      const terminatorRules = state.md.block.ruler.getRules('reference');\n      const oldParentType = state.parentType;\n      state.parentType = 'reference';\n\n      // Some tags can terminate paragraph without empty line.\n      let terminate = false;\n      for (let i = 0, l = terminatorRules.length; i < l; i++) {\n        if (terminatorRules[i](state, nextLine, endLine, true)) {\n          terminate = true;\n          break;\n        }\n      }\n      state.parentType = oldParentType;\n      if (terminate) {\n        // terminated by another block\n        return null;\n      }\n    }\n    const pos = state.bMarks[nextLine] + state.tShift[nextLine];\n    const max = state.eMarks[nextLine];\n\n    // max + 1 explicitly includes the newline\n    return state.src.slice(pos, max + 1);\n  }\n  let str = state.src.slice(pos, max + 1);\n  max = str.length;\n  let labelEnd = -1;\n  for (pos = 1; pos < max; pos++) {\n    const ch = str.charCodeAt(pos);\n    if (ch === 0x5B /* [ */) {\n      return false;\n    } else if (ch === 0x5D /* ] */) {\n      labelEnd = pos;\n      break;\n    } else if (ch === 0x0A /* \\n */) {\n      const lineContent = getNextLine(nextLine);\n      if (lineContent !== null) {\n        str += lineContent;\n        max = str.length;\n        nextLine++;\n      }\n    } else if (ch === 0x5C /* \\ */) {\n      pos++;\n      if (pos < max && str.charCodeAt(pos) === 0x0A) {\n        const lineContent = getNextLine(nextLine);\n        if (lineContent !== null) {\n          str += lineContent;\n          max = str.length;\n          nextLine++;\n        }\n      }\n    }\n  }\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A /* : */) {\n    return false;\n  }\n\n  // [label]:   destination   'title'\n  //         ^^^ skip optional whitespace here\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    const ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      const lineContent = getNextLine(nextLine);\n      if (lineContent !== null) {\n        str += lineContent;\n        max = str.length;\n        nextLine++;\n      }\n    } else if (isSpace(ch)) ; else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //            ^^^^^^^^^^^ parse this\n  const destRes = state.md.helpers.parseLinkDestination(str, pos, max);\n  if (!destRes.ok) {\n    return false;\n  }\n  const href = state.md.normalizeLink(destRes.str);\n  if (!state.md.validateLink(href)) {\n    return false;\n  }\n  pos = destRes.pos;\n\n  // save cursor state, we could require to rollback later\n  const destEndPos = pos;\n  const destEndLineNo = nextLine;\n\n  // [label]:   destination   'title'\n  //                       ^^^ skipping those spaces\n  const start = pos;\n  for (; pos < max; pos++) {\n    const ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      const lineContent = getNextLine(nextLine);\n      if (lineContent !== null) {\n        str += lineContent;\n        max = str.length;\n        nextLine++;\n      }\n    } else if (isSpace(ch)) ; else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //                          ^^^^^^^ parse this\n  let titleRes = state.md.helpers.parseLinkTitle(str, pos, max);\n  while (titleRes.can_continue) {\n    const lineContent = getNextLine(nextLine);\n    if (lineContent === null) break;\n    str += lineContent;\n    pos = max;\n    max = str.length;\n    nextLine++;\n    titleRes = state.md.helpers.parseLinkTitle(str, pos, max, titleRes);\n  }\n  let title;\n  if (pos < max && start !== pos && titleRes.ok) {\n    title = titleRes.str;\n    pos = titleRes.pos;\n  } else {\n    title = '';\n    pos = destEndPos;\n    nextLine = destEndLineNo;\n  }\n\n  // skip trailing spaces until the rest of the line\n  while (pos < max) {\n    const ch = str.charCodeAt(pos);\n    if (!isSpace(ch)) {\n      break;\n    }\n    pos++;\n  }\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    if (title) {\n      // garbage at the end of the line after title,\n      // but it could still be a valid reference if we roll back\n      title = '';\n      pos = destEndPos;\n      nextLine = destEndLineNo;\n      while (pos < max) {\n        const ch = str.charCodeAt(pos);\n        if (!isSpace(ch)) {\n          break;\n        }\n        pos++;\n      }\n    }\n  }\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    // garbage at the end of the line\n    return false;\n  }\n  const label = normalizeReference(str.slice(1, labelEnd));\n  if (!label) {\n    // CommonMark 0.20 disallows empty labels\n    return false;\n  }\n\n  // Reference can not terminate anything. This check is for safety only.\n  /* istanbul ignore if */\n  if (silent) {\n    return true;\n  }\n  if (typeof state.env.references === 'undefined') {\n    state.env.references = {};\n  }\n  if (typeof state.env.references[label] === 'undefined') {\n    state.env.references[label] = {\n      title,\n      href\n    };\n  }\n  state.line = nextLine;\n  return true;\n}\n\n// List of valid html blocks names, according to commonmark spec\n// https://spec.commonmark.org/0.30/#html-blocks\n\nvar block_names = ['address', 'article', 'aside', 'base', 'basefont', 'blockquote', 'body', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dialog', 'dir', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hr', 'html', 'iframe', 'legend', 'li', 'link', 'main', 'menu', 'menuitem', 'nav', 'noframes', 'ol', 'optgroup', 'option', 'p', 'param', 'search', 'section', 'summary', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul'];\n\n// Regexps to match html elements\n\nconst attr_name = '[a-zA-Z_:][a-zA-Z0-9:._-]*';\nconst unquoted = '[^\"\\'=<>`\\\\x00-\\\\x20]+';\nconst single_quoted = \"'[^']*'\";\nconst double_quoted = '\"[^\"]*\"';\nconst attr_value = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')';\nconst attribute = '(?:\\\\s+' + attr_name + '(?:\\\\s*=\\\\s*' + attr_value + ')?)';\nconst open_tag = '<[A-Za-z][A-Za-z0-9\\\\-]*' + attribute + '*\\\\s*\\\\/?>';\nconst close_tag = '<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>';\nconst comment = '<!---?>|<!--(?:[^-]|-[^-]|--[^>])*-->';\nconst processing = '<[?][\\\\s\\\\S]*?[?]>';\nconst declaration = '<![A-Za-z][^>]*>';\nconst cdata = '<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>';\nconst HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment + '|' + processing + '|' + declaration + '|' + cdata + ')');\nconst HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')');\n\n// HTML block\n\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nconst HTML_SEQUENCES = [[/^<(script|pre|style|textarea)(?=(\\s|>|$))/i, /<\\/(script|pre|style|textarea)>/i, true], [/^<!--/, /-->/, true], [/^<\\?/, /\\?>/, true], [/^<![A-Z]/, />/, true], [/^<!\\[CDATA\\[/, /\\]\\]>/, true], [new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true], [new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'), /^$/, false]];\nfunction html_block(state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine];\n  let max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n  if (!state.md.options.html) {\n    return false;\n  }\n  if (state.src.charCodeAt(pos) !== 0x3C /* < */) {\n    return false;\n  }\n  let lineText = state.src.slice(pos, max);\n  let i = 0;\n  for (; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) {\n      break;\n    }\n  }\n  if (i === HTML_SEQUENCES.length) {\n    return false;\n  }\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2];\n  }\n  let nextLine = startLine + 1;\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) {\n        break;\n      }\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n      lineText = state.src.slice(pos, max);\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) {\n          nextLine++;\n        }\n        break;\n      }\n    }\n  }\n  state.line = nextLine;\n  const token = state.push('html_block', '', 0);\n  token.map = [startLine, nextLine];\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n  return true;\n}\n\n// heading (#, ##, ...)\n\nfunction heading(state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine];\n  let max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n  let ch = state.src.charCodeAt(pos);\n  if (ch !== 0x23 /* # */ || pos >= max) {\n    return false;\n  }\n\n  // count heading level\n  let level = 1;\n  ch = state.src.charCodeAt(++pos);\n  while (ch === 0x23 /* # */ && pos < max && level <= 6) {\n    level++;\n    ch = state.src.charCodeAt(++pos);\n  }\n  if (level > 6 || pos < max && !isSpace(ch)) {\n    return false;\n  }\n  if (silent) {\n    return true;\n  }\n\n  // Let's cut tails like '    ###  ' from the end of string\n\n  max = state.skipSpacesBack(max, pos);\n  const tmp = state.skipCharsBack(max, 0x23, pos); // #\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp;\n  }\n  state.line = startLine + 1;\n  const token_o = state.push('heading_open', 'h' + String(level), 1);\n  token_o.markup = '########'.slice(0, level);\n  token_o.map = [startLine, state.line];\n  const token_i = state.push('inline', '', 0);\n  token_i.content = state.src.slice(pos, max).trim();\n  token_i.map = [startLine, state.line];\n  token_i.children = [];\n  const token_c = state.push('heading_close', 'h' + String(level), -1);\n  token_c.markup = '########'.slice(0, level);\n  return true;\n}\n\n// lheading (---, ===)\n\nfunction lheading(state, startLine, endLine /*, silent */) {\n  const terminatorRules = state.md.block.ruler.getRules('paragraph');\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n  const oldParentType = state.parentType;\n  state.parentType = 'paragraph'; // use paragraph to match terminatorRules\n\n  // jump line-by-line until empty one or EOF\n  let level = 0;\n  let marker;\n  let nextLine = startLine + 1;\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) {\n      continue;\n    }\n\n    //\n    // Check for underline in setext header\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      let pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      const max = state.eMarks[nextLine];\n      if (pos < max) {\n        marker = state.src.charCodeAt(pos);\n        if (marker === 0x2D /* - */ || marker === 0x3D /* = */) {\n          pos = state.skipChars(pos, marker);\n          pos = state.skipSpaces(pos);\n          if (pos >= max) {\n            level = marker === 0x3D /* = */ ? 1 : 2;\n            break;\n          }\n        }\n      }\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) {\n      continue;\n    }\n\n    // Some tags can terminate paragraph without empty line.\n    let terminate = false;\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) {\n      break;\n    }\n  }\n  if (!level) {\n    // Didn't find valid underline\n    return false;\n  }\n  const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n  state.line = nextLine + 1;\n  const token_o = state.push('heading_open', 'h' + String(level), 1);\n  token_o.markup = String.fromCharCode(marker);\n  token_o.map = [startLine, state.line];\n  const token_i = state.push('inline', '', 0);\n  token_i.content = content;\n  token_i.map = [startLine, state.line - 1];\n  token_i.children = [];\n  const token_c = state.push('heading_close', 'h' + String(level), -1);\n  token_c.markup = String.fromCharCode(marker);\n  state.parentType = oldParentType;\n  return true;\n}\n\n// Paragraph\n\nfunction paragraph(state, startLine, endLine) {\n  const terminatorRules = state.md.block.ruler.getRules('paragraph');\n  const oldParentType = state.parentType;\n  let nextLine = startLine + 1;\n  state.parentType = 'paragraph';\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) {\n      continue;\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) {\n      continue;\n    }\n\n    // Some tags can terminate paragraph without empty line.\n    let terminate = false;\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) {\n      break;\n    }\n  }\n  const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n  state.line = nextLine;\n  const token_o = state.push('paragraph_open', 'p', 1);\n  token_o.map = [startLine, state.line];\n  const token_i = state.push('inline', '', 0);\n  token_i.content = content;\n  token_i.map = [startLine, state.line];\n  token_i.children = [];\n  state.push('paragraph_close', 'p', -1);\n  state.parentType = oldParentType;\n  return true;\n}\n\n/** internal\n * class ParserBlock\n *\n * Block-level tokenizer.\n **/\n\nconst _rules$1 = [\n// First 2 params - rule name & source. Secondary array - list of rules,\n// which can be terminated by this one.\n['table', table, ['paragraph', 'reference']], ['code', code], ['fence', fence, ['paragraph', 'reference', 'blockquote', 'list']], ['blockquote', blockquote, ['paragraph', 'reference', 'blockquote', 'list']], ['hr', hr, ['paragraph', 'reference', 'blockquote', 'list']], ['list', list, ['paragraph', 'reference', 'blockquote']], ['reference', reference], ['html_block', html_block, ['paragraph', 'reference', 'blockquote']], ['heading', heading, ['paragraph', 'reference', 'blockquote']], ['lheading', lheading], ['paragraph', paragraph]];\n\n/**\n * new ParserBlock()\n **/\nfunction ParserBlock() {\n  /**\n   * ParserBlock#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of block rules.\n   **/\n  this.ruler = new Ruler();\n  for (let i = 0; i < _rules$1.length; i++) {\n    this.ruler.push(_rules$1[i][0], _rules$1[i][1], {\n      alt: (_rules$1[i][2] || []).slice()\n    });\n  }\n}\n\n// Generate tokens for input range\n//\nParserBlock.prototype.tokenize = function (state, startLine, endLine) {\n  const rules = this.ruler.getRules('');\n  const len = rules.length;\n  const maxNesting = state.md.options.maxNesting;\n  let line = startLine;\n  let hasEmptyLines = false;\n  while (line < endLine) {\n    state.line = line = state.skipEmptyLines(line);\n    if (line >= endLine) {\n      break;\n    }\n\n    // Termination condition for nested calls.\n    // Nested calls currently used for blockquotes & lists\n    if (state.sCount[line] < state.blkIndent) {\n      break;\n    }\n\n    // If nesting level exceeded - skip tail to the end. That's not ordinary\n    // situation and we should not care about content.\n    if (state.level >= maxNesting) {\n      state.line = endLine;\n      break;\n    }\n\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.line`\n    // - update `state.tokens`\n    // - return true\n    const prevLine = state.line;\n    let ok = false;\n    for (let i = 0; i < len; i++) {\n      ok = rules[i](state, line, endLine, false);\n      if (ok) {\n        if (prevLine >= state.line) {\n          throw new Error(\"block rule didn't increment state.line\");\n        }\n        break;\n      }\n    }\n\n    // this can only happen if user disables paragraph rule\n    if (!ok) throw new Error('none of the block rules matched');\n\n    // set state.tight if we had an empty line before current tag\n    // i.e. latest empty line should not count\n    state.tight = !hasEmptyLines;\n\n    // paragraph might \"eat\" one newline after it in nested lists\n    if (state.isEmpty(state.line - 1)) {\n      hasEmptyLines = true;\n    }\n    line = state.line;\n    if (line < endLine && state.isEmpty(line)) {\n      hasEmptyLines = true;\n      line++;\n      state.line = line;\n    }\n  }\n};\n\n/**\n * ParserBlock.parse(str, md, env, outTokens)\n *\n * Process input string and push block tokens into `outTokens`\n **/\nParserBlock.prototype.parse = function (src, md, env, outTokens) {\n  if (!src) {\n    return;\n  }\n  const state = new this.State(src, md, env, outTokens);\n  this.tokenize(state, state.line, state.lineMax);\n};\nParserBlock.prototype.State = StateBlock;\n\n// Inline parser state\n\nfunction StateInline(src, md, env, outTokens) {\n  this.src = src;\n  this.env = env;\n  this.md = md;\n  this.tokens = outTokens;\n  this.tokens_meta = Array(outTokens.length);\n  this.pos = 0;\n  this.posMax = this.src.length;\n  this.level = 0;\n  this.pending = '';\n  this.pendingLevel = 0;\n\n  // Stores { start: end } pairs. Useful for backtrack\n  // optimization of pairs parse (emphasis, strikes).\n  this.cache = {};\n\n  // List of emphasis-like delimiters for current tag\n  this.delimiters = [];\n\n  // Stack of delimiter lists for upper level tags\n  this._prev_delimiters = [];\n\n  // backtick length => last seen position\n  this.backticks = {};\n  this.backticksScanned = false;\n\n  // Counter used to disable inline linkify-it execution\n  // inside <a> and markdown links\n  this.linkLevel = 0;\n}\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  const token = new Token('text', '', 0);\n  token.content = this.pending;\n  token.level = this.pendingLevel;\n  this.tokens.push(token);\n  this.pending = '';\n  return token;\n};\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending();\n  }\n  const token = new Token(type, tag, nesting);\n  let token_meta = null;\n  if (nesting < 0) {\n    // closing tag\n    this.level--;\n    this.delimiters = this._prev_delimiters.pop();\n  }\n  token.level = this.level;\n  if (nesting > 0) {\n    // opening tag\n    this.level++;\n    this._prev_delimiters.push(this.delimiters);\n    this.delimiters = [];\n    token_meta = {\n      delimiters: this.delimiters\n    };\n  }\n  this.pendingLevel = this.level;\n  this.tokens.push(token);\n  this.tokens_meta.push(token_meta);\n  return token;\n};\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  const max = this.posMax;\n  const marker = this.src.charCodeAt(start);\n\n  // treat beginning of the line as a whitespace\n  const lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;\n  let pos = start;\n  while (pos < max && this.src.charCodeAt(pos) === marker) {\n    pos++;\n  }\n  const count = pos - start;\n\n  // treat end of the line as a whitespace\n  const nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;\n  const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n  const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n  const isLastWhiteSpace = isWhiteSpace(lastChar);\n  const isNextWhiteSpace = isWhiteSpace(nextChar);\n  const left_flanking = !isNextWhiteSpace && (!isNextPunctChar || isLastWhiteSpace || isLastPunctChar);\n  const right_flanking = !isLastWhiteSpace && (!isLastPunctChar || isNextWhiteSpace || isNextPunctChar);\n  const can_open = left_flanking && (canSplitWord || !right_flanking || isLastPunctChar);\n  const can_close = right_flanking && (canSplitWord || !left_flanking || isNextPunctChar);\n  return {\n    can_open,\n    can_close,\n    length: count\n  };\n};\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token;\n\n// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar(ch) {\n  switch (ch) {\n    case 0x0A /* \\n */:\n    case 0x21 /* ! */:\n    case 0x23 /* # */:\n    case 0x24 /* $ */:\n    case 0x25 /* % */:\n    case 0x26 /* & */:\n    case 0x2A /* * */:\n    case 0x2B /* + */:\n    case 0x2D /* - */:\n    case 0x3A /* : */:\n    case 0x3C /* < */:\n    case 0x3D /* = */:\n    case 0x3E /* > */:\n    case 0x40 /* @ */:\n    case 0x5B /* [ */:\n    case 0x5C /* \\ */:\n    case 0x5D /* ] */:\n    case 0x5E /* ^ */:\n    case 0x5F /* _ */:\n    case 0x60 /* ` */:\n    case 0x7B /* { */:\n    case 0x7D /* } */:\n    case 0x7E /* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\nfunction text(state, silent) {\n  let pos = state.pos;\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n  if (pos === state.pos) {\n    return false;\n  }\n  if (!silent) {\n    state.pending += state.src.slice(state.pos, pos);\n  }\n  state.pos = pos;\n  return true;\n}\n\n// Alternative implementation, for memory.\n//\n// It costs 10% of performance, but allows extend terminators list, if place it\n// to `ParserInline` property. Probably, will switch to it sometime, such\n// flexibility required.\n\n/*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n}; */\n\n// Process links like https://example.org/\n\n// RFC3986: scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\nconst SCHEME_RE = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i;\nfunction linkify(state, silent) {\n  if (!state.md.options.linkify) return false;\n  if (state.linkLevel > 0) return false;\n  const pos = state.pos;\n  const max = state.posMax;\n  if (pos + 3 > max) return false;\n  if (state.src.charCodeAt(pos) !== 0x3A /* : */) return false;\n  if (state.src.charCodeAt(pos + 1) !== 0x2F /* / */) return false;\n  if (state.src.charCodeAt(pos + 2) !== 0x2F /* / */) return false;\n  const match = state.pending.match(SCHEME_RE);\n  if (!match) return false;\n  const proto = match[1];\n  const link = state.md.linkify.matchAtStart(state.src.slice(pos - proto.length));\n  if (!link) return false;\n  let url = link.url;\n\n  // invalid link, but still detected by linkify somehow;\n  // need to check to prevent infinite loop below\n  if (url.length <= proto.length) return false;\n\n  // disallow '*' at the end of the link (conflicts with emphasis)\n  url = url.replace(/\\*+$/, '');\n  const fullUrl = state.md.normalizeLink(url);\n  if (!state.md.validateLink(fullUrl)) return false;\n  if (!silent) {\n    state.pending = state.pending.slice(0, -proto.length);\n    const token_o = state.push('link_open', 'a', 1);\n    token_o.attrs = [['href', fullUrl]];\n    token_o.markup = 'linkify';\n    token_o.info = 'auto';\n    const token_t = state.push('text', '', 0);\n    token_t.content = state.md.normalizeLinkText(url);\n    const token_c = state.push('link_close', 'a', -1);\n    token_c.markup = 'linkify';\n    token_c.info = 'auto';\n  }\n  state.pos += url.length - proto.length;\n  return true;\n}\n\n// Proceess '\\n'\n\nfunction newline(state, silent) {\n  let pos = state.pos;\n  if (state.src.charCodeAt(pos) !== 0x0A /* \\n */) {\n    return false;\n  }\n  const pmax = state.pending.length - 1;\n  const max = state.posMax;\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        // Find whitespaces tail of pending chars.\n        let ws = pmax - 1;\n        while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20) ws--;\n        state.pending = state.pending.slice(0, ws);\n        state.push('hardbreak', 'br', 0);\n      } else {\n        state.pending = state.pending.slice(0, -1);\n        state.push('softbreak', 'br', 0);\n      }\n    } else {\n      state.push('softbreak', 'br', 0);\n    }\n  }\n  pos++;\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n  state.pos = pos;\n  return true;\n}\n\n// Process escaped chars and hardbreaks\n\nconst ESCAPED = [];\nfor (let i = 0; i < 256; i++) {\n  ESCAPED.push(0);\n}\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'.split('').forEach(function (ch) {\n  ESCAPED[ch.charCodeAt(0)] = 1;\n});\nfunction escape(state, silent) {\n  let pos = state.pos;\n  const max = state.posMax;\n  if (state.src.charCodeAt(pos) !== 0x5C /* \\ */) return false;\n  pos++;\n\n  // '\\' at the end of the inline block\n  if (pos >= max) return false;\n  let ch1 = state.src.charCodeAt(pos);\n  if (ch1 === 0x0A) {\n    if (!silent) {\n      state.push('hardbreak', 'br', 0);\n    }\n    pos++;\n    // skip leading whitespaces from next line\n    while (pos < max) {\n      ch1 = state.src.charCodeAt(pos);\n      if (!isSpace(ch1)) break;\n      pos++;\n    }\n    state.pos = pos;\n    return true;\n  }\n  let escapedStr = state.src[pos];\n  if (ch1 >= 0xD800 && ch1 <= 0xDBFF && pos + 1 < max) {\n    const ch2 = state.src.charCodeAt(pos + 1);\n    if (ch2 >= 0xDC00 && ch2 <= 0xDFFF) {\n      escapedStr += state.src[pos + 1];\n      pos++;\n    }\n  }\n  const origStr = '\\\\' + escapedStr;\n  if (!silent) {\n    const token = state.push('text_special', '', 0);\n    if (ch1 < 256 && ESCAPED[ch1] !== 0) {\n      token.content = escapedStr;\n    } else {\n      token.content = origStr;\n    }\n    token.markup = origStr;\n    token.info = 'escape';\n  }\n  state.pos = pos + 1;\n  return true;\n}\n\n// Parse backticks\n\nfunction backtick(state, silent) {\n  let pos = state.pos;\n  const ch = state.src.charCodeAt(pos);\n  if (ch !== 0x60 /* ` */) {\n    return false;\n  }\n  const start = pos;\n  pos++;\n  const max = state.posMax;\n\n  // scan marker length\n  while (pos < max && state.src.charCodeAt(pos) === 0x60 /* ` */) {\n    pos++;\n  }\n  const marker = state.src.slice(start, pos);\n  const openerLength = marker.length;\n  if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n    if (!silent) state.pending += marker;\n    state.pos += openerLength;\n    return true;\n  }\n  let matchEnd = pos;\n  let matchStart;\n\n  // Nothing found in the cache, scan until the end of the line (or until marker is found)\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1;\n\n    // scan marker length\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60 /* ` */) {\n      matchEnd++;\n    }\n    const closerLength = matchEnd - matchStart;\n    if (closerLength === openerLength) {\n      // Found matching closer length.\n      if (!silent) {\n        const token = state.push('code_inline', 'code', 0);\n        token.markup = marker;\n        token.content = state.src.slice(pos, matchStart).replace(/\\n/g, ' ').replace(/^ (.+) $/, '$1');\n      }\n      state.pos = matchEnd;\n      return true;\n    }\n\n    // Some different length found, put it in cache as upper limit of where closer can be found\n    state.backticks[closerLength] = matchStart;\n  }\n\n  // Scanned through the end, didn't find anything\n  state.backticksScanned = true;\n  if (!silent) state.pending += marker;\n  state.pos += openerLength;\n  return true;\n}\n\n// ~~strike through~~\n//\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nfunction strikethrough_tokenize(state, silent) {\n  const start = state.pos;\n  const marker = state.src.charCodeAt(start);\n  if (silent) {\n    return false;\n  }\n  if (marker !== 0x7E /* ~ */) {\n    return false;\n  }\n  const scanned = state.scanDelims(state.pos, true);\n  let len = scanned.length;\n  const ch = String.fromCharCode(marker);\n  if (len < 2) {\n    return false;\n  }\n  let token;\n  if (len % 2) {\n    token = state.push('text', '', 0);\n    token.content = ch;\n    len--;\n  }\n  for (let i = 0; i < len; i += 2) {\n    token = state.push('text', '', 0);\n    token.content = ch + ch;\n    state.delimiters.push({\n      marker,\n      length: 0,\n      // disable \"rule of 3\" length checks meant for emphasis\n      token: state.tokens.length - 1,\n      end: -1,\n      open: scanned.can_open,\n      close: scanned.can_close\n    });\n  }\n  state.pos += scanned.length;\n  return true;\n}\nfunction postProcess$1(state, delimiters) {\n  let token;\n  const loneMarkers = [];\n  const max = delimiters.length;\n  for (let i = 0; i < max; i++) {\n    const startDelim = delimiters[i];\n    if (startDelim.marker !== 0x7E /* ~ */) {\n      continue;\n    }\n    if (startDelim.end === -1) {\n      continue;\n    }\n    const endDelim = delimiters[startDelim.end];\n    token = state.tokens[startDelim.token];\n    token.type = 's_open';\n    token.tag = 's';\n    token.nesting = 1;\n    token.markup = '~~';\n    token.content = '';\n    token = state.tokens[endDelim.token];\n    token.type = 's_close';\n    token.tag = 's';\n    token.nesting = -1;\n    token.markup = '~~';\n    token.content = '';\n    if (state.tokens[endDelim.token - 1].type === 'text' && state.tokens[endDelim.token - 1].content === '~') {\n      loneMarkers.push(endDelim.token - 1);\n    }\n  }\n\n  // If a marker sequence has an odd number of characters, it's splitted\n  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n  // start of the sequence.\n  //\n  // So, we have to move all those markers after subsequent s_close tags.\n  //\n  while (loneMarkers.length) {\n    const i = loneMarkers.pop();\n    let j = i + 1;\n    while (j < state.tokens.length && state.tokens[j].type === 's_close') {\n      j++;\n    }\n    j--;\n    if (i !== j) {\n      token = state.tokens[j];\n      state.tokens[j] = state.tokens[i];\n      state.tokens[i] = token;\n    }\n  }\n}\n\n// Walk through delimiter list and replace text tokens with tags\n//\nfunction strikethrough_postProcess(state) {\n  const tokens_meta = state.tokens_meta;\n  const max = state.tokens_meta.length;\n  postProcess$1(state, state.delimiters);\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess$1(state, tokens_meta[curr].delimiters);\n    }\n  }\n}\nvar r_strikethrough = {\n  tokenize: strikethrough_tokenize,\n  postProcess: strikethrough_postProcess\n};\n\n// Process *this* and _that_\n//\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nfunction emphasis_tokenize(state, silent) {\n  const start = state.pos;\n  const marker = state.src.charCodeAt(start);\n  if (silent) {\n    return false;\n  }\n  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) {\n    return false;\n  }\n  const scanned = state.scanDelims(state.pos, marker === 0x2A);\n  for (let i = 0; i < scanned.length; i++) {\n    const token = state.push('text', '', 0);\n    token.content = String.fromCharCode(marker);\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker,\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n      // A position of the token this delimiter corresponds to.\n      //\n      token: state.tokens.length - 1,\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end: -1,\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open: scanned.can_open,\n      close: scanned.can_close\n    });\n  }\n  state.pos += scanned.length;\n  return true;\n}\nfunction postProcess(state, delimiters) {\n  const max = delimiters.length;\n  for (let i = max - 1; i >= 0; i--) {\n    const startDelim = delimiters[i];\n    if (startDelim.marker !== 0x5F /* _ */ && startDelim.marker !== 0x2A /* * */) {\n      continue;\n    }\n\n    // Process only opening markers\n    if (startDelim.end === -1) {\n      continue;\n    }\n    const endDelim = delimiters[startDelim.end];\n\n    // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n    const isStrong = i > 0 && delimiters[i - 1].end === startDelim.end + 1 &&\n    // check that first two markers match and adjacent\n    delimiters[i - 1].marker === startDelim.marker && delimiters[i - 1].token === startDelim.token - 1 &&\n    // check that last two markers are adjacent (we can safely assume they match)\n    delimiters[startDelim.end + 1].token === endDelim.token + 1;\n    const ch = String.fromCharCode(startDelim.marker);\n    const token_o = state.tokens[startDelim.token];\n    token_o.type = isStrong ? 'strong_open' : 'em_open';\n    token_o.tag = isStrong ? 'strong' : 'em';\n    token_o.nesting = 1;\n    token_o.markup = isStrong ? ch + ch : ch;\n    token_o.content = '';\n    const token_c = state.tokens[endDelim.token];\n    token_c.type = isStrong ? 'strong_close' : 'em_close';\n    token_c.tag = isStrong ? 'strong' : 'em';\n    token_c.nesting = -1;\n    token_c.markup = isStrong ? ch + ch : ch;\n    token_c.content = '';\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = '';\n      state.tokens[delimiters[startDelim.end + 1].token].content = '';\n      i--;\n    }\n  }\n}\n\n// Walk through delimiter list and replace text tokens with tags\n//\nfunction emphasis_post_process(state) {\n  const tokens_meta = state.tokens_meta;\n  const max = state.tokens_meta.length;\n  postProcess(state, state.delimiters);\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n}\nvar r_emphasis = {\n  tokenize: emphasis_tokenize,\n  postProcess: emphasis_post_process\n};\n\n// Process [link](<to> \"stuff\")\n\nfunction link(state, silent) {\n  let code, label, res, ref;\n  let href = '';\n  let title = '';\n  let start = state.pos;\n  let parseReference = true;\n  if (state.src.charCodeAt(state.pos) !== 0x5B /* [ */) {\n    return false;\n  }\n  const oldPos = state.pos;\n  const max = state.posMax;\n  const labelStart = state.pos + 1;\n  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) {\n    return false;\n  }\n  let pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28 /* ( */) {\n    //\n    // Inline link\n    //\n\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false;\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) {\n        break;\n      }\n    }\n    if (pos >= max) {\n      return false;\n    }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                ^^ skipping these spaces\n      start = pos;\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) {\n          break;\n        }\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                  ^^^^^^^ parsing link title\n      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n      if (pos < max && start !== pos && res.ok) {\n        title = res.str;\n        pos = res.pos;\n\n        // [link](  <href>  \"title\"  )\n        //                         ^^ skipping these spaces\n        for (; pos < max; pos++) {\n          code = state.src.charCodeAt(pos);\n          if (!isSpace(code) && code !== 0x0A) {\n            break;\n          }\n        }\n      }\n    }\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29 /* ) */) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true;\n    }\n    pos++;\n  }\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') {\n      return false;\n    }\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B /* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) {\n      label = state.src.slice(labelStart, labelEnd);\n    }\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n    const token_o = state.push('link_open', 'a', 1);\n    const attrs = [['href', href]];\n    token_o.attrs = attrs;\n    if (title) {\n      attrs.push(['title', title]);\n    }\n    state.linkLevel++;\n    state.md.inline.tokenize(state);\n    state.linkLevel--;\n    state.push('link_close', 'a', -1);\n  }\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n}\n\n// Process ![image](<src> \"title\")\n\nfunction image(state, silent) {\n  let code, content, label, pos, ref, res, title, start;\n  let href = '';\n  const oldPos = state.pos;\n  const max = state.posMax;\n  if (state.src.charCodeAt(state.pos) !== 0x21 /* ! */) {\n    return false;\n  }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B /* [ */) {\n    return false;\n  }\n  const labelStart = state.pos + 2;\n  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) {\n    return false;\n  }\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28 /* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) {\n        break;\n      }\n    }\n    if (pos >= max) {\n      return false;\n    }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) {\n        break;\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) {\n          break;\n        }\n      }\n    } else {\n      title = '';\n    }\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29 /* ) */) {\n      state.pos = oldPos;\n      return false;\n    }\n    pos++;\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') {\n      return false;\n    }\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B /* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) {\n      label = state.src.slice(labelStart, labelEnd);\n    }\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    content = state.src.slice(labelStart, labelEnd);\n    const tokens = [];\n    state.md.inline.parse(content, state.md, state.env, tokens);\n    const token = state.push('image', 'img', 0);\n    const attrs = [['src', href], ['alt', '']];\n    token.attrs = attrs;\n    token.children = tokens;\n    token.content = content;\n    if (title) {\n      attrs.push(['title', title]);\n    }\n  }\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n}\n\n// Process autolinks '<protocol:...>'\n\n/* eslint max-len:0 */\nconst EMAIL_RE = /^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;\n/* eslint-disable-next-line no-control-regex */\nconst AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.-]{1,31}):([^<>\\x00-\\x20]*)$/;\nfunction autolink(state, silent) {\n  let pos = state.pos;\n  if (state.src.charCodeAt(pos) !== 0x3C /* < */) {\n    return false;\n  }\n  const start = state.pos;\n  const max = state.posMax;\n  for (;;) {\n    if (++pos >= max) return false;\n    const ch = state.src.charCodeAt(pos);\n    if (ch === 0x3C /* < */) return false;\n    if (ch === 0x3E /* > */) break;\n  }\n  const url = state.src.slice(start + 1, pos);\n  if (AUTOLINK_RE.test(url)) {\n    const fullUrl = state.md.normalizeLink(url);\n    if (!state.md.validateLink(fullUrl)) {\n      return false;\n    }\n    if (!silent) {\n      const token_o = state.push('link_open', 'a', 1);\n      token_o.attrs = [['href', fullUrl]];\n      token_o.markup = 'autolink';\n      token_o.info = 'auto';\n      const token_t = state.push('text', '', 0);\n      token_t.content = state.md.normalizeLinkText(url);\n      const token_c = state.push('link_close', 'a', -1);\n      token_c.markup = 'autolink';\n      token_c.info = 'auto';\n    }\n    state.pos += url.length + 2;\n    return true;\n  }\n  if (EMAIL_RE.test(url)) {\n    const fullUrl = state.md.normalizeLink('mailto:' + url);\n    if (!state.md.validateLink(fullUrl)) {\n      return false;\n    }\n    if (!silent) {\n      const token_o = state.push('link_open', 'a', 1);\n      token_o.attrs = [['href', fullUrl]];\n      token_o.markup = 'autolink';\n      token_o.info = 'auto';\n      const token_t = state.push('text', '', 0);\n      token_t.content = state.md.normalizeLinkText(url);\n      const token_c = state.push('link_close', 'a', -1);\n      token_c.markup = 'autolink';\n      token_c.info = 'auto';\n    }\n    state.pos += url.length + 2;\n    return true;\n  }\n  return false;\n}\n\n// Process html tags\n\nfunction isLinkOpen(str) {\n  return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\nfunction isLetter(ch) {\n  /* eslint no-bitwise:0 */\n  const lc = ch | 0x20; // to lower case\n  return lc >= 0x61 /* a */ && lc <= 0x7a /* z */;\n}\nfunction html_inline(state, silent) {\n  if (!state.md.options.html) {\n    return false;\n  }\n\n  // Check start\n  const max = state.posMax;\n  const pos = state.pos;\n  if (state.src.charCodeAt(pos) !== 0x3C /* < */ || pos + 2 >= max) {\n    return false;\n  }\n\n  // Quick fail on second char\n  const ch = state.src.charCodeAt(pos + 1);\n  if (ch !== 0x21 /* ! */ && ch !== 0x3F /* ? */ && ch !== 0x2F /* / */ && !isLetter(ch)) {\n    return false;\n  }\n  const match = state.src.slice(pos).match(HTML_TAG_RE);\n  if (!match) {\n    return false;\n  }\n  if (!silent) {\n    const token = state.push('html_inline', '', 0);\n    token.content = match[0];\n    if (isLinkOpen(token.content)) state.linkLevel++;\n    if (isLinkClose(token.content)) state.linkLevel--;\n  }\n  state.pos += match[0].length;\n  return true;\n}\n\n// Process html entity - &#123;, &#xAF;, &quot;, ...\n\nconst DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;\nconst NAMED_RE = /^&([a-z][a-z0-9]{1,31});/i;\nfunction entity(state, silent) {\n  const pos = state.pos;\n  const max = state.posMax;\n  if (state.src.charCodeAt(pos) !== 0x26 /* & */) return false;\n  if (pos + 1 >= max) return false;\n  const ch = state.src.charCodeAt(pos + 1);\n  if (ch === 0x23 /* # */) {\n    const match = state.src.slice(pos).match(DIGITAL_RE);\n    if (match) {\n      if (!silent) {\n        const code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);\n        const token = state.push('text_special', '', 0);\n        token.content = isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);\n        token.markup = match[0];\n        token.info = 'entity';\n      }\n      state.pos += match[0].length;\n      return true;\n    }\n  } else {\n    const match = state.src.slice(pos).match(NAMED_RE);\n    if (match) {\n      const decoded = entities.decodeHTML(match[0]);\n      if (decoded !== match[0]) {\n        if (!silent) {\n          const token = state.push('text_special', '', 0);\n          token.content = decoded;\n          token.markup = match[0];\n          token.info = 'entity';\n        }\n        state.pos += match[0].length;\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n// For each opening emphasis-like marker find a matching closing one\n//\n\nfunction processDelimiters(delimiters) {\n  const openersBottom = {};\n  const max = delimiters.length;\n  if (!max) return;\n\n  // headerIdx is the first delimiter of the current (where closer is) delimiter run\n  let headerIdx = 0;\n  let lastTokenIdx = -2; // needs any value lower than -1\n  const jumps = [];\n  for (let closerIdx = 0; closerIdx < max; closerIdx++) {\n    const closer = delimiters[closerIdx];\n    jumps.push(0);\n\n    // markers belong to same delimiter run if:\n    //  - they have adjacent tokens\n    //  - AND markers are the same\n    //\n    if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {\n      headerIdx = closerIdx;\n    }\n    lastTokenIdx = closer.token;\n\n    // Length is only used for emphasis-specific \"rule of 3\",\n    // if it's not defined (in strikethrough or 3rd party plugins),\n    // we can default it to 0 to disable those checks.\n    //\n    closer.length = closer.length || 0;\n    if (!closer.close) continue;\n\n    // Previously calculated lower bounds (previous fails)\n    // for each marker, each delimiter length modulo 3,\n    // and for whether this closer can be an opener;\n    // https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460\n    /* eslint-disable-next-line no-prototype-builtins */\n    if (!openersBottom.hasOwnProperty(closer.marker)) {\n      openersBottom[closer.marker] = [-1, -1, -1, -1, -1, -1];\n    }\n    const minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + closer.length % 3];\n    let openerIdx = headerIdx - jumps[headerIdx] - 1;\n    let newMinOpenerIdx = openerIdx;\n    for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {\n      const opener = delimiters[openerIdx];\n      if (opener.marker !== closer.marker) continue;\n      if (opener.open && opener.end < 0) {\n        let isOddMatch = false;\n\n        // from spec:\n        //\n        // If one of the delimiters can both open and close emphasis, then the\n        // sum of the lengths of the delimiter runs containing the opening and\n        // closing delimiters must not be a multiple of 3 unless both lengths\n        // are multiples of 3.\n        //\n        if (opener.close || closer.open) {\n          if ((opener.length + closer.length) % 3 === 0) {\n            if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {\n              isOddMatch = true;\n            }\n          }\n        }\n        if (!isOddMatch) {\n          // If previous delimiter cannot be an opener, we can safely skip\n          // the entire sequence in future checks. This is required to make\n          // sure algorithm has linear complexity (see *_*_*_*_*_... case).\n          //\n          const lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ? jumps[openerIdx - 1] + 1 : 0;\n          jumps[closerIdx] = closerIdx - openerIdx + lastJump;\n          jumps[openerIdx] = lastJump;\n          closer.open = false;\n          opener.end = closerIdx;\n          opener.close = false;\n          newMinOpenerIdx = -1;\n          // treat next token as start of run,\n          // it optimizes skips in **<...>**a**<...>** pathological case\n          lastTokenIdx = -2;\n          break;\n        }\n      }\n    }\n    if (newMinOpenerIdx !== -1) {\n      // If match for this delimiter run failed, we want to set lower bound for\n      // future lookups. This is required to make sure algorithm has linear\n      // complexity.\n      //\n      // See details here:\n      // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442\n      //\n      openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length || 0) % 3] = newMinOpenerIdx;\n    }\n  }\n}\nfunction link_pairs(state) {\n  const tokens_meta = state.tokens_meta;\n  const max = state.tokens_meta.length;\n  processDelimiters(state.delimiters);\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      processDelimiters(tokens_meta[curr].delimiters);\n    }\n  }\n}\n\n// Clean up tokens after emphasis and strikethrough postprocessing:\n// merge adjacent text nodes into one and re-calculate all token levels\n//\n// This is necessary because initially emphasis delimiter markers (*, _, ~)\n// are treated as their own separate text tokens. Then emphasis rule either\n// leaves them as text (needed to merge with adjacent text) or turns them\n// into opening/closing tags (which messes up levels inside).\n//\n\nfunction fragments_join(state) {\n  let curr, last;\n  let level = 0;\n  const tokens = state.tokens;\n  const max = state.tokens.length;\n  for (curr = last = 0; curr < max; curr++) {\n    // re-calculate levels after emphasis/strikethrough turns some text nodes\n    // into opening/closing tags\n    if (tokens[curr].nesting < 0) level--; // closing tag\n    tokens[curr].level = level;\n    if (tokens[curr].nesting > 0) level++; // opening tag\n\n    if (tokens[curr].type === 'text' && curr + 1 < max && tokens[curr + 1].type === 'text') {\n      // collapse two adjacent text nodes\n      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n    } else {\n      if (curr !== last) {\n        tokens[last] = tokens[curr];\n      }\n      last++;\n    }\n  }\n  if (curr !== last) {\n    tokens.length = last;\n  }\n}\n\n/** internal\n * class ParserInline\n *\n * Tokenizes paragraph content.\n **/\n\n\n// Parser rules\n\nconst _rules = [['text', text], ['linkify', linkify], ['newline', newline], ['escape', escape], ['backticks', backtick], ['strikethrough', r_strikethrough.tokenize], ['emphasis', r_emphasis.tokenize], ['link', link], ['image', image], ['autolink', autolink], ['html_inline', html_inline], ['entity', entity]];\n\n// `rule2` ruleset was created specifically for emphasis/strikethrough\n// post-processing and may be changed in the future.\n//\n// Don't use this for anything except pairs (plugins working with `balance_pairs`).\n//\nconst _rules2 = [['balance_pairs', link_pairs], ['strikethrough', r_strikethrough.postProcess], ['emphasis', r_emphasis.postProcess],\n// rules for pairs separate '**' into its own text tokens, which may be left unused,\n// rule below merges unused segments back with the rest of the text\n['fragments_join', fragments_join]];\n\n/**\n * new ParserInline()\n **/\nfunction ParserInline() {\n  /**\n   * ParserInline#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of inline rules.\n   **/\n  this.ruler = new Ruler();\n  for (let i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n\n  /**\n   * ParserInline#ruler2 -> Ruler\n   *\n   * [[Ruler]] instance. Second ruler used for post-processing\n   * (e.g. in emphasis-like rules).\n   **/\n  this.ruler2 = new Ruler();\n  for (let i = 0; i < _rules2.length; i++) {\n    this.ruler2.push(_rules2[i][0], _rules2[i][1]);\n  }\n}\n\n// Skip single token by running all rules in validation mode;\n// returns `true` if any rule reported success\n//\nParserInline.prototype.skipToken = function (state) {\n  const pos = state.pos;\n  const rules = this.ruler.getRules('');\n  const len = rules.length;\n  const maxNesting = state.md.options.maxNesting;\n  const cache = state.cache;\n  if (typeof cache[pos] !== 'undefined') {\n    state.pos = cache[pos];\n    return;\n  }\n  let ok = false;\n  if (state.level < maxNesting) {\n    for (let i = 0; i < len; i++) {\n      // Increment state.level and decrement it later to limit recursion.\n      // It's harmless to do here, because no tokens are created. But ideally,\n      // we'd need a separate private state variable for this purpose.\n      //\n      state.level++;\n      ok = rules[i](state, true);\n      state.level--;\n      if (ok) {\n        if (pos >= state.pos) {\n          throw new Error(\"inline rule didn't increment state.pos\");\n        }\n        break;\n      }\n    }\n  } else {\n    // Too much nesting, just skip until the end of the paragraph.\n    //\n    // NOTE: this will cause links to behave incorrectly in the following case,\n    //       when an amount of `[` is exactly equal to `maxNesting + 1`:\n    //\n    //       [[[[[[[[[[[[[[[[[[[[[foo]()\n    //\n    // TODO: remove this workaround when CM standard will allow nested links\n    //       (we can replace it by preventing links from being parsed in\n    //       validation mode)\n    //\n    state.pos = state.posMax;\n  }\n  if (!ok) {\n    state.pos++;\n  }\n  cache[pos] = state.pos;\n};\n\n// Generate tokens for input range\n//\nParserInline.prototype.tokenize = function (state) {\n  const rules = this.ruler.getRules('');\n  const len = rules.length;\n  const end = state.posMax;\n  const maxNesting = state.md.options.maxNesting;\n  while (state.pos < end) {\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.pos`\n    // - update `state.tokens`\n    // - return true\n    const prevPos = state.pos;\n    let ok = false;\n    if (state.level < maxNesting) {\n      for (let i = 0; i < len; i++) {\n        ok = rules[i](state, false);\n        if (ok) {\n          if (prevPos >= state.pos) {\n            throw new Error(\"inline rule didn't increment state.pos\");\n          }\n          break;\n        }\n      }\n    }\n    if (ok) {\n      if (state.pos >= end) {\n        break;\n      }\n      continue;\n    }\n    state.pending += state.src[state.pos++];\n  }\n  if (state.pending) {\n    state.pushPending();\n  }\n};\n\n/**\n * ParserInline.parse(str, md, env, outTokens)\n *\n * Process input string and push inline tokens into `outTokens`\n **/\nParserInline.prototype.parse = function (str, md, env, outTokens) {\n  const state = new this.State(str, md, env, outTokens);\n  this.tokenize(state);\n  const rules = this.ruler2.getRules('');\n  const len = rules.length;\n  for (let i = 0; i < len; i++) {\n    rules[i](state);\n  }\n};\nParserInline.prototype.State = StateInline;\n\n// markdown-it default options\n\nvar cfg_default = {\n  options: {\n    // Enable HTML tags in source\n    html: false,\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: false,\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n    // autoconvert URL-like texts to links\n    linkify: false,\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019',\n    /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n    // Internal protection, recursion limit\n    maxNesting: 100\n  },\n  components: {\n    core: {},\n    block: {},\n    inline: {}\n  }\n};\n\n// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n// modes. For example, to parse bold/italic only.\n\nvar cfg_zero = {\n  options: {\n    // Enable HTML tags in source\n    html: false,\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: false,\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n    // autoconvert URL-like texts to links\n    linkify: false,\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019',\n    /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n    // Internal protection, recursion limit\n    maxNesting: 20\n  },\n  components: {\n    core: {\n      rules: ['normalize', 'block', 'inline', 'text_join']\n    },\n    block: {\n      rules: ['paragraph']\n    },\n    inline: {\n      rules: ['text'],\n      rules2: ['balance_pairs', 'fragments_join']\n    }\n  }\n};\n\n// Commonmark default options\n\nvar cfg_commonmark = {\n  options: {\n    // Enable HTML tags in source\n    html: true,\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: true,\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n    // autoconvert URL-like texts to links\n    linkify: false,\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019',\n    /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n    // Internal protection, recursion limit\n    maxNesting: 20\n  },\n  components: {\n    core: {\n      rules: ['normalize', 'block', 'inline', 'text_join']\n    },\n    block: {\n      rules: ['blockquote', 'code', 'fence', 'heading', 'hr', 'html_block', 'lheading', 'list', 'reference', 'paragraph']\n    },\n    inline: {\n      rules: ['autolink', 'backticks', 'emphasis', 'entity', 'escape', 'html_inline', 'image', 'link', 'newline', 'text'],\n      rules2: ['balance_pairs', 'emphasis', 'fragments_join']\n    }\n  }\n};\n\n// Main parser class\n\nconst config = {\n  default: cfg_default,\n  zero: cfg_zero,\n  commonmark: cfg_commonmark\n};\n\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\n\nconst BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\nconst GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\nfunction validateLink(url) {\n  // url should be normalized at this point, and existing entities are decoded\n  const str = url.trim().toLowerCase();\n  return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) : true;\n}\nconst RECODE_HOSTNAME_FOR = ['http:', 'https:', 'mailto:'];\nfunction normalizeLink(url) {\n  const parsed = mdurl__namespace.parse(url, true);\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname);\n      } catch (er) {/**/}\n    }\n  }\n  return mdurl__namespace.encode(mdurl__namespace.format(parsed));\n}\nfunction normalizeLinkText(url) {\n  const parsed = mdurl__namespace.parse(url, true);\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toUnicode(parsed.hostname);\n      } catch (er) {/**/}\n    }\n  }\n\n  // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720\n  return mdurl__namespace.decode(mdurl__namespace.format(parsed), mdurl__namespace.decode.defaultChars + '%');\n}\n\n/**\n * class MarkdownIt\n *\n * Main parser/renderer class.\n *\n * ##### Usage\n *\n * ```javascript\n * // node.js, \"classic\" way:\n * var MarkdownIt = require('markdown-it'),\n *     md = new MarkdownIt();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // node.js, the same, but with sugar:\n * var md = require('markdown-it')();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // browser without AMD, added to \"window\" on script load\n * // Note, there are no dash.\n * var md = window.markdownit();\n * var result = md.render('# markdown-it rulezz!');\n * ```\n *\n * Single line rendering, without paragraph wrap:\n *\n * ```javascript\n * var md = require('markdown-it')();\n * var result = md.renderInline('__markdown-it__ rulezz!');\n * ```\n **/\n\n/**\n * new MarkdownIt([presetName, options])\n * - presetName (String): optional, `commonmark` / `zero`\n * - options (Object)\n *\n * Creates parser instanse with given config. Can be called without `new`.\n *\n * ##### presetName\n *\n * MarkdownIt provides named presets as a convenience to quickly\n * enable/disable active syntax rules and options for common use cases.\n *\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.mjs) -\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.mjs) -\n *   similar to GFM, used when no preset name given. Enables all available rules,\n *   but still without html, typographer & autolinker.\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.mjs) -\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n *   For example, when you need only `bold` and `italic` markup and nothing else.\n *\n * ##### options:\n *\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n *   That's not safe! You may need external sanitizer to protect output from XSS.\n *   It's better to extend features via plugins, instead of enabling HTML.\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\n *   world you will need HTML output.\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n *   Can be useful for external highlighters.\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.mjs) +\n *   quotes beautification (smartquotes).\n * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement\n *   pairs, when typographer enabled and smartquotes on. For example, you can\n *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and\n *   `['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›']` for French (including nbsp).\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n *   return empty string if the source was not changed and should be escaped\n *   externaly. If result starts with <pre... internal wrapper is skipped.\n *\n * ##### Example\n *\n * ```javascript\n * // commonmark mode\n * var md = require('markdown-it')('commonmark');\n *\n * // default mode\n * var md = require('markdown-it')();\n *\n * // enable everything\n * var md = require('markdown-it')({\n *   html: true,\n *   linkify: true,\n *   typographer: true\n * });\n * ```\n *\n * ##### Syntax highlighting\n *\n * ```js\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;\n *       } catch (__) {}\n *     }\n *\n *     return ''; // use external default escaping\n *   }\n * });\n * ```\n *\n * Or with full wrapper override (if you need assign class to `<pre>` or `<code>`):\n *\n * ```javascript\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * // Actual default values\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return '<pre><code class=\"hljs\">' +\n *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\n *                '</code></pre>';\n *       } catch (__) {}\n *     }\n *\n *     return '<pre><code class=\"hljs\">' + md.utils.escapeHtml(str) + '</code></pre>';\n *   }\n * });\n * ```\n *\n **/\nfunction MarkdownIt(presetName, options) {\n  if (!(this instanceof MarkdownIt)) {\n    return new MarkdownIt(presetName, options);\n  }\n  if (!options) {\n    if (!isString(presetName)) {\n      options = presetName || {};\n      presetName = 'default';\n    }\n  }\n\n  /**\n   * MarkdownIt#inline -> ParserInline\n   *\n   * Instance of [[ParserInline]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.inline = new ParserInline();\n\n  /**\n   * MarkdownIt#block -> ParserBlock\n   *\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.block = new ParserBlock();\n\n  /**\n   * MarkdownIt#core -> Core\n   *\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.core = new Core();\n\n  /**\n   * MarkdownIt#renderer -> Renderer\n   *\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n   * rules for new token types, generated by plugins.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * function myToken(tokens, idx, options, env, self) {\n   *   //...\n   *   return result;\n   * };\n   *\n   * md.renderer.rules['my_token'] = myToken\n   * ```\n   *\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.mjs).\n   **/\n  this.renderer = new Renderer();\n\n  /**\n   * MarkdownIt#linkify -> LinkifyIt\n   *\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.mjs)\n   * rule.\n   **/\n  this.linkify = new LinkifyIt();\n\n  /**\n   * MarkdownIt#validateLink(url) -> Boolean\n   *\n   * Link validation function. CommonMark allows too much in links. By default\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n   * except some embedded image types.\n   *\n   * You can change this behaviour:\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   * // enable everything\n   * md.validateLink = function () { return true; }\n   * ```\n   **/\n  this.validateLink = validateLink;\n\n  /**\n   * MarkdownIt#normalizeLink(url) -> String\n   *\n   * Function used to encode link url to a machine-readable format,\n   * which includes url-encoding, punycode, etc.\n   **/\n  this.normalizeLink = normalizeLink;\n\n  /**\n   * MarkdownIt#normalizeLinkText(url) -> String\n   *\n   * Function used to decode link url to a human-readable format`\n   **/\n  this.normalizeLinkText = normalizeLinkText;\n\n  // Expose utils & helpers for easy acces from plugins\n\n  /**\n   * MarkdownIt#utils -> utils\n   *\n   * Assorted utility functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.mjs).\n   **/\n  this.utils = utils;\n\n  /**\n   * MarkdownIt#helpers -> helpers\n   *\n   * Link components parser functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n   **/\n  this.helpers = assign({}, helpers);\n  this.options = {};\n  this.configure(presetName);\n  if (options) {\n    this.set(options);\n  }\n}\n\n/** chainable\n * MarkdownIt.set(options)\n *\n * Set parser options (in the same format as in constructor). Probably, you\n * will never need it, but you can change options after constructor call.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .set({ html: true, breaks: true })\n *             .set({ typographer, true });\n * ```\n *\n * __Note:__ To achieve the best possible performance, don't modify a\n * `markdown-it` instance options on the fly. If you need multiple configurations\n * it's best to create multiple instances and initialize each with separate\n * config.\n **/\nMarkdownIt.prototype.set = function (options) {\n  assign(this.options, options);\n  return this;\n};\n\n/** chainable, internal\n * MarkdownIt.configure(presets)\n *\n * Batch load of all options and compenent settings. This is internal method,\n * and you probably will not need it. But if you will - see available presets\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n *\n * We strongly recommend to use presets instead of direct config loads. That\n * will give better compatibility with next versions.\n **/\nMarkdownIt.prototype.configure = function (presets) {\n  const self = this;\n  if (isString(presets)) {\n    const presetName = presets;\n    presets = config[presetName];\n    if (!presets) {\n      throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name');\n    }\n  }\n  if (!presets) {\n    throw new Error('Wrong `markdown-it` preset, can\\'t be empty');\n  }\n  if (presets.options) {\n    self.set(presets.options);\n  }\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enableOnly(presets.components[name].rules);\n      }\n      if (presets.components[name].rules2) {\n        self[name].ruler2.enableOnly(presets.components[name].rules2);\n      }\n    });\n  }\n  return this;\n};\n\n/** chainable\n * MarkdownIt.enable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to enable\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable list or rules. It will automatically find appropriate components,\n * containing rules with given names. If rule not found, and `ignoreInvalid`\n * not set - throws exception.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .enable(['sub', 'sup'])\n *             .disable('smartquotes');\n * ```\n **/\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\n  let result = [];\n  if (!Array.isArray(list)) {\n    list = [list];\n  }\n  ['core', 'block', 'inline'].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.enable(list, true));\n  }, this);\n  result = result.concat(this.inline.ruler2.enable(list, true));\n  const missed = list.filter(function (name) {\n    return result.indexOf(name) < 0;\n  });\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);\n  }\n  return this;\n};\n\n/** chainable\n * MarkdownIt.disable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\n **/\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\n  let result = [];\n  if (!Array.isArray(list)) {\n    list = [list];\n  }\n  ['core', 'block', 'inline'].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.disable(list, true));\n  }, this);\n  result = result.concat(this.inline.ruler2.disable(list, true));\n  const missed = list.filter(function (name) {\n    return result.indexOf(name) < 0;\n  });\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);\n  }\n  return this;\n};\n\n/** chainable\n * MarkdownIt.use(plugin, params)\n *\n * Load specified plugin with given params into current parser instance.\n * It's just a sugar to call `plugin(md, params)` with curring.\n *\n * ##### Example\n *\n * ```javascript\n * var iterator = require('markdown-it-for-inline');\n * var md = require('markdown-it')()\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n *             });\n * ```\n **/\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\n  const args = [this].concat(Array.prototype.slice.call(arguments, 1));\n  plugin.apply(plugin, args);\n  return this;\n};\n\n/** internal\n * MarkdownIt.parse(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Parse input string and return list of block tokens (special token type\n * \"inline\" will contain list of inline tokens). You should not call this\n * method directly, until you write custom renderer (for example, to produce\n * AST).\n *\n * `env` is used to pass data between \"distributed\" rules and return additional\n * metadata like reference info, needed for the renderer. It also can be used to\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\n * and then pass updated object to renderer.\n **/\nMarkdownIt.prototype.parse = function (src, env) {\n  if (typeof src !== 'string') {\n    throw new Error('Input data should be a String');\n  }\n  const state = new this.core.State(src, this, env);\n  this.core.process(state);\n  return state.tokens;\n};\n\n/**\n * MarkdownIt.render(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Render markdown string into html. It does all magic for you :).\n *\n * `env` can be used to inject additional metadata (`{}` by default).\n * But you will not need it with high probability. See also comment\n * in [[MarkdownIt.parse]].\n **/\nMarkdownIt.prototype.render = function (src, env) {\n  env = env || {};\n  return this.renderer.render(this.parse(src, env), this.options, env);\n};\n\n/** internal\n * MarkdownIt.parseInline(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n * block tokens list with the single `inline` element, containing parsed inline\n * tokens in `children` property. Also updates `env` object.\n **/\nMarkdownIt.prototype.parseInline = function (src, env) {\n  const state = new this.core.State(src, this, env);\n  state.inlineMode = true;\n  this.core.process(state);\n  return state.tokens;\n};\n\n/**\n * MarkdownIt.renderInline(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n * will NOT be wrapped into `<p>` tags.\n **/\nMarkdownIt.prototype.renderInline = function (src, env) {\n  env = env || {};\n  return this.renderer.render(this.parseInline(src, env), this.options, env);\n};\n\nmodule.exports = MarkdownIt;\n","module.exports = require(\"vscode\");","// cellOptions.ts\r\nexport const cellOptions: Record<string, Record<string, string[]>> = {\r\n    \"Attributes\": {\r\n      \"label\": [\r\n        '`label` — Unique label for code cell. Used when other code needs to refer to the cell (e.g. for cross references `fig-samples` or `tbl-summary`).'\r\n      ],\r\n      \"classes\": ['`classes` — Classes to apply to cell container.'],\r\n      \"tags\": ['`tags` — Array of tags for notebook cell.'],\r\n      \"id\": ['`id` — Notebook cell identifier. If no `id` is present, `label` will be used instead. See [Jupyter proposal](https://jupyter.org/enhancement-proposals/62-cell-id/cell-id.html)']\r\n    },\r\n    \"Code Output\": {\r\n      eval: [\r\n        '`eval` — Evaluate code cells (if `false` just echos the code into output).',\r\n        '',\r\n        '- `true` (default): evaluate code cell',\r\n        '- `false`: don’t evaluate code cell',\r\n        '- `[...]:` A list of positive or negative line numbers to selectively include or exclude lines (knitr only)'\r\n      ],\r\n      \"echo\": [\r\n        '`echo` — Include cell source code in rendered output.',\r\n        '',\r\n        '- `true` (default): include source code',\r\n        '- `false`: do not include code (default in presentation formats lik `beamer`, `revealjs`, `pptx`)',\r\n        '- `fenced`: in addition to echoing, include the cell delimiter as part of the output',\r\n        '- `[...]:` A list of positive or negative line numbers to selectively include or exclude lines (knitr only)'\r\n      ],\r\n      \"code-fold\": [\r\n        '`code-fold` — Collapse code into an HTML `<details>` tag so the user can display it on-demand.',\r\n        '',\r\n        '- `true`: collapse code',\r\n        '- `false` (default): do not collapse',\r\n        '- `show`: use the <details> tag, but show the expanded code initially'\r\n      ],\r\n      \"code-summary\": ['`code-summary` — Summary text to use for code blocks collapsed using `code-fold`'],\r\n      \"code-overflow\": ['`code-overflow` — Choose overflow strategy (e.g. `scroll`, `wrap`).'],\r\n      \"code-line-numbers\": [\r\n        '`code-line-numbers` — Include line numbers or specify highlight animation (`true` or `false`). For revealjs output only, you can also specify a string to highlight specific lines (and/or animate between sets of highlighted lines).',\r\n        '',\r\n        'Examples:',\r\n        '- Sets of lines are denoted with commas: `3,4,5`',\r\n        '- Ranges can be denoted with dashes and combined with commas: `1-3,5`',\r\n        '- Finally, animation steps are separated by`|5|5-10,12`'\r\n      ],\r\n      \"lst-label\": ['`lst-label` — Label for code listing (used for cross references).'],\r\n      \"lst-cap\": ['`lst-cap` — Caption for code listing.'],\r\n      \"tidy\": ['`tidy` — `knitr` only: Whether to reformat R code.'],\r\n      \"tidy-opts\": ['`tidy-opts` — `knitr` only: List of options to pass to tidy handler.'],\r\n      \"collapse\": ['`collapse` — `knitr` only: Collapse all the source and output blocks from one code chunk into a single block.'],\r\n      \"prompt\": ['`prompt` — `knitr` only: Whether to add the prompt characters in R code. See prompt and continue on the help page `?base::options`. Note that adding prompts can make it difficult for readers to copy R code from the output, so prompt: false may be a better choice. This option may not work well when the engine is not R.'],\r\n      \"class-source\": ['`class-source` — `knitr` only: Class name(s) for source code blocks.'],\r\n      \"attr-source\": ['`tattr-source` — `knitr` only: Attribute(s) for source code blocks.']\r\n    },\r\n    \"Cell Output\": {\r\n      \"output\": [\r\n        '`output` — Include code execution results in output.',\r\n        '',\r\n        '- `true`: include results',\r\n        '- `false`: hide results',\r\n        '- `asis`: treat as raw markdown'\r\n      ],\r\n      \"warning\": ['`warning` — Include warnings in rendered output.'],\r\n      \"error\": ['`error` — Include errors in output(note that this implies that errors executing code will not halt processing of the document).'],\r\n      \"include\": ['`include` — Catch all for preventing any output (code or results) from being included in output.'],\r\n      \"panel\": ['`panel` — Panel type for cell output : `tabset`, `input`, `sidebar`, `fill`, `center`.'],\r\n      \"output-location\": [\r\n        '`output-location` — Location of output relative to the code that generated it. The possible values are as follows:',\r\n        '',\r\n        '- `default`: Normal flow of the slide after the code',\r\n        '- `fragment`: In a fragment (not visible until you advance)',\r\n        '- `slide`: On a new slide after the curent one',\r\n        '- `column`: In an adjacent column', \r\n        '- `column-fragment`: In an adjacent column (not visible until you advance)'\r\n      ],\r\n      \"message\": ['`message` — `knitr` only: Include messages in rendered output. Possible values are `true`, `false`, or `NA`. If `true`, messages are included in the output. If `false`, messages are not included. If `NA`, messages are not included in output but shown in the knitr log to console.'],\r\n      \"results\": ['`results` — `knitr` only: How to display text results. Note that this option only applies to normal text output (not warnings, messages, or errors). The possible values are `markup`, `asis`, `hold`, `hide`'],\r\n      \"comment\": ['`comment` — `knitr` only: Prefix to be added before each line of text output. By default, the text output is commented out by ##, so if readers want to copy and run the source code from the output document, they can select and copy everything from the chunk, since the text output is masked in comments (and will be ignored when running the copied text). Set comment: ’’ to remove the default.'],\r\n      \"class-output\": ['`class-output` — `knitr` only: Class name(s) for text/console output.'],\r\n      \"attr-output\": ['`attr-output` — `knitr` only: Attribute(s) for text/console output.'],\r\n      \"class-warning\": ['`class-warning` — `knitr` only: Class name(s) for warning output.'],\r\n      \"attr-warning\": ['`attr-warning` — `knitr` only: Attribute(s) for warning output.'],\r\n      \"class-message\": ['`class-message` — `knitr` only: Class name(s) for message output.'],\r\n      \"attr-message\": ['`attr-output` — `knitr` only: Attribute(s) for message output.'],\r\n      \"class-error\": ['`class-error` — `knitr` only: Class name(s) for error output.'],\r\n      \"attr-error\": ['`attr-error` — `knitr` only: Attribute(s) for error output.']\r\n    },\r\n    \"Figures\": {\r\n      \"fig-cap\": ['`fig-cap` — Caption for figure.'],\r\n      \"fig-subcap\": ['`fig-subcap` — Subcaptions for figures.'],\r\n      \"fig-link\": ['`fig-link` — Hyperlink target for the figure.'],\r\n      \"fig-align\": ['`fig-align` — Figure horizontal alignment (`left`, `right`, `center`, `default`).'],\r\n      \"fig-alt\": ['`fig-alt` — Alternative text for images.'],\r\n      \"fig-env\": ['`fig-env` — LaTeX environment for figures.'],\r\n      \"fig-pos\": ['`fig-pos` — LaTeX figure position (e.g. `H`, or false for none).'],\r\n      \"fig-scap\": ['`fig-scap` — Short caption (used in PDF lists).'],\r\n      \"fig-format\": ['`fig-format` — `knitr` only: Default output format for figures (retina, png, jpeg, svg, or pdf).'],\r\n      \"fig-dpi\": ['`fig-dpi` — `knitr` only: Default DPI for figures.'],\r\n      \"fig-asp\": ['`fig-asp` — `knitr` only: The aspect ratio of the plot, i.e., the ratio of height/width. When `fig-asp` is specified, the height of a plot (the option `fig-height`) is calculated from `fig-width` * `fig-asp`.'],\r\n      \"out-width\": ['`out-width` — `knitr` only: Width of the plot in the output document, which can be different from its physical fig-width, i.e., plots can be scaled in the output document. When used without a unit, the unit is assumed to be pixels. However, any of the following unit identifiers can be used: px, cm, mm, in, inch and %, for example, 3in, 8cm, 300px or 50%.'],\r\n      \"out-height\": ['`out-height` — `knitr` only: Height of the plot in the output document, which can be different from its physical fig-height, i.e., plots can be scaled in the output document. Depending on the output format, this option can take special values. For example, for LaTeX output, it can be 3in, or 8cm; for HTML, it can be 300px.'],\r\n      \"fig-keep\": ['`fig-dpi` — `knitr` only: How plots in chunks should be kept. Possible values are as follows: `high`, `none`, `all`, `first`, `last` or a numeric vector'],\r\n      \"fig-show\": ['`fig-show` — `knitr` only: How to show/arrange the plots. Possible values are as follows: `asis`, `hold`, `animate`, `hide`.'],\r\n      \"out-extra\": ['`out-extra` — `knitr` only: Additional raw LaTeX or HTML options to be applied to figures.'],\r\n      \"external\": ['`external` — `knitr` only: Externalize tikz graphics (pre-compile to PDF).'],\r\n      \"sanitize\": ['`sanitize` — `knitr` only: Sanitize tikz graphics (escape special LaTeX characters).'],\r\n      \"interval\": ['`interval` — `knitr` only: Time interval (number of seconds) between animation frames.'],\r\n      \"aniopts\": ['`aniopts` — `knitr` only: Extra options for animations; see the documentation of the LaTeX animate package.'],\r\n      \"animation-hook\": ['`animation-hook` — `knitr` only: Hook function to create animations in HTML output.'],\r\n    },\r\n    \"Tables\": {\r\n      \"tbl-cap\": ['`tbl-cap` — Table caption.'],\r\n      \"tbl-subcap\": ['`tbl-subcap` — Table subcaptions.'],\r\n      \"tbl-colwidths\": [\r\n        '`tbl-colwidths` — Apply explicit table column widths for markdown grid tables and pipe tables that are more than `columns` characters wide (72 by default). Some formats (e.g. HTML) do an excellent job automatically sizing table columns and so don’t benefit much from column width specifications. Other formats (e.g. LaTeX) require table column sizes in order to correctly flow longer cell content (this is a major reason why tables > 72 columns wide are assigned explicit widths by Pandoc).',\r\n        '',\r\n        '- `auto`: Apply markdown table column widths except when there is a hyperlink in the table (which tends to throw off automatic calculation of column widths based on the markdown text width of cells). (auto is the default for HTML output formats).',\r\n        '- `true`: Always apply markdown table widths (true is the default for all non-HTML formats).',\r\n        '- ``false`: Never apply markdown table widths.',\r\n        '- An array of numbers (e.g. `[40, 30, 30]`): Array of explicit width percentages.'\r\n      ],\r\n      \"html-table-processing\": ['`html-table-processing` — If `none`, don’t touch raw HTML tables.']\r\n    },\r\n    \"Panel Layout\": {\r\n      \"layout\": ['`layout` — 2D array of widths to layout blocks side-by-side or stacked.'],\r\n      \"layout-ncol\": ['`layout-ncol` — Number of layout columns.'],\r\n      \"layout-nrow\": ['`layout-nrow` — Number of layout rows.'],\r\n      \"layout-align\": ['`layout-align` — Horizontal alignment of layout (left, center, right).'],\r\n      \"layout-valign\": ['`layout-valign` — Vertical alignment of layout (top, center, bottom).']\r\n    },\r\n    \"Page Columns\": {\r\n      \"column\": ['`column` — Output column for page layout.'],\r\n      \"fig-column\": ['`fig-column` — Column for figure.'],\r\n      \"tbl-column\": ['`tbl-column` — Column for table.'],\r\n      \"cap-location\": ['`cap-location` — Caption position (top, bottom, margin).'],\r\n      \"fig-cap-location\": ['`fig-cap-location` — Caption for figure.'],\r\n      \"tbl-cap-location\": ['`tbl-cap-location` — Caption for table.']\r\n    },\r\n    \"Cache\": {\r\n      \"cache\": ['`cache` — `knitr` only: Whether to cache a code chunk. When evaluating code chunks for the second time, the cached chunks are skipped (unless they have been modified), but the objects created in these chunks are loaded from previously saved databases (.rdb and .rdx files), and these files are saved when a chunk is evaluated for the first time, or when cached files are not found (e.g., you may have removed them by hand). Note that the filename consists of the chunk label with an MD5 digest of the R code and chunk options of the code chunk, which means any changes in the chunk will produce a different MD5 digest, and hence invalidate the cache'],\r\n      \"cache-vars\": ['`cache-vars` — `knitr` only: Variable names to be saved in the cache database. By default, all variables created in the current chunks are identified and saved, but you may want to manually specify the variables to be saved, because the automatic detection of variables may not be robust, or you may want to save only a subset of variables.'],\r\n      \"cache-globals\": ['`cache-globals` — `knitr` only: Variables names that are not created from the current chunk.'],\r\n      \"cache-lazy\": ['`cache-lazy` — `knitr` only: Whether to lazyLoad() or directly load() objects. For very large objects, lazyloading may not work, so cache-lazy: false may be desirable.'],\r\n      \"cache-rebuild\": ['`cache-rebuild` — `knitr` only: Force rebuild of cache for chunk.'],\r\n      \"cache-comments\": ['`cache-comments` — `knitr` only: Prevent comment changes from invalidating the cache for a chunk.'],\r\n      \"dependson\": ['`dependson` — `knitr` only: Explicitly specify cache dependencies for this chunk (one or more chunk labels).'],\r\n      \"autodep\": ['`autodep` — `knitr` only: Detect cache dependencies automatically via usage of global variables.']\r\n    },\r\n    \"Include\": {\r\n      \"child\": ['`child` — `knitr` only:  One or more paths of child documents to be knitted and input into the main document.'],\r\n      \"file\": ['`file` — `knitr` only:  File containing code to execute for this chunk.'],\r\n      \"code\": ['`code` — `knitr` only:  String containing code to execute for this chunk.'],\r\n      \"purl\": ['`fpurl` — `knitr` only:  Include chunk when extracting code with `knitr::purl()`.']\r\n    }\r\n  };\r\n  ","'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7F]/; // Note: U+007F DEL is excluded too.\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, callback) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = callback(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {String} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(domain, callback) {\n\tconst parts = domain.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tdomain = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tdomain = domain.replace(regexSeparators, '\\x2E');\n\tconst labels = domain.split('.');\n\tconst encoded = map(labels, callback).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = codePoints => String.fromCodePoint(...codePoints);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint >= 0x30 && codePoint < 0x3A) {\n\t\treturn 26 + (codePoint - 0x30);\n\t}\n\tif (codePoint >= 0x41 && codePoint < 0x5B) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint >= 0x61 && codePoint < 0x7B) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tconst oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\t\t\tif (digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tconst inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tconst basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue === n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.3.1',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nexport { ucs2decode, ucs2encode, decode, encode, toASCII, toUnicode };\nexport default punycode;\n","import * as vscode from 'vscode';\r\nimport { cellOptions } from './cellOptions'; // Import the shared cell options\r\n\r\nexport function registerCellOptionHoverProvider(context: vscode.ExtensionContext) {\r\n  context.subscriptions.push(\r\n    vscode.languages.registerHoverProvider(['python', 'r'], {\r\n      provideHover(document, position) {\r\n        const line = document.lineAt(position.line).text;\r\n        if (!/^#\\s?\\|/.test(line.trimStart())) return;\r\n\r\n        const range = document.getWordRangeAtPosition(position, /[a-zA-Z0-9_-]+/);\r\n        if (!range) return;\r\n\r\n        const word = document.getText(range);\r\n        for (const groupKey in cellOptions) {\r\n          const group = cellOptions[groupKey];\r\n          if (Object.prototype.hasOwnProperty.call(group, word)) {\r\n            const markdown = new vscode.MarkdownString();\r\n            markdown.appendMarkdown(`### ${groupKey}\\n\\n`);\r\n            markdown.appendMarkdown(group[word].join('\\n'));\r\n            // Optionally, add a code block if needed:\r\n            // markdown.appendCodeblock(`#| ${word}: ...`, 'qmd');\r\n            markdown.isTrusted = true;\r\n            return new vscode.Hover(markdown);\r\n          }\r\n        }\r\n        return;\r\n      }\r\n    })\r\n  );\r\n}\r\n","'use strict';\n\nvar regex$5 = /[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n\nvar regex$4 = /[\\0-\\x1F\\x7F-\\x9F]/;\n\nvar regex$3 = /[\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u0890\\u0891\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]|\\uD804[\\uDCBD\\uDCCD]|\\uD80D[\\uDC30-\\uDC3F]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]/;\n\nvar regex$2 = /[!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDEAD\\uDF55-\\uDF59\\uDF86-\\uDF89]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDEB9\\uDF3C-\\uDF3E]|\\uD806[\\uDC3B\\uDD44-\\uDD46\\uDDE2\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2\\uDF00-\\uDF09]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8\\uDF43-\\uDF4F\\uDFFF]|\\uD809[\\uDC70-\\uDC74]|\\uD80B[\\uDFF1\\uDFF2]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD81B[\\uDE97-\\uDE9A\\uDFE2]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]/;\n\nvar regex$1 = /[\\$\\+<->\\^`\\|~\\xA2-\\xA6\\xA8\\xA9\\xAC\\xAE-\\xB1\\xB4\\xB8\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0384\\u0385\\u03F6\\u0482\\u058D-\\u058F\\u0606-\\u0608\\u060B\\u060E\\u060F\\u06DE\\u06E9\\u06FD\\u06FE\\u07F6\\u07FE\\u07FF\\u0888\\u09F2\\u09F3\\u09FA\\u09FB\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C7F\\u0D4F\\u0D79\\u0E3F\\u0F01-\\u0F03\\u0F13\\u0F15-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE\\u0FCF\\u0FD5-\\u0FD8\\u109E\\u109F\\u1390-\\u1399\\u166D\\u17DB\\u1940\\u19DE-\\u19FF\\u1B61-\\u1B6A\\u1B74-\\u1B7C\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2044\\u2052\\u207A-\\u207C\\u208A-\\u208C\\u20A0-\\u20C0\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2307\\u230C-\\u2328\\u232B-\\u2426\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2767\\u2794-\\u27C4\\u27C7-\\u27E5\\u27F0-\\u2982\\u2999-\\u29D7\\u29DC-\\u29FB\\u29FE-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2E50\\u2E51\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFF\\u3004\\u3012\\u3013\\u3020\\u3036\\u3037\\u303E\\u303F\\u309B\\u309C\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E3\\u31EF\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uAA77-\\uAA79\\uAB5B\\uAB6A\\uAB6B\\uFB29\\uFBB2-\\uFBC2\\uFD40-\\uFD4F\\uFDCF\\uFDFC-\\uFDFF\\uFE62\\uFE64-\\uFE66\\uFE69\\uFF04\\uFF0B\\uFF1C-\\uFF1E\\uFF3E\\uFF40\\uFF5C\\uFF5E\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9C\\uDDA0\\uDDD0-\\uDDFC]|\\uD802[\\uDC77\\uDC78\\uDEC8]|\\uD805\\uDF3F|\\uD807[\\uDFD5-\\uDFF1]|\\uD81A[\\uDF3C-\\uDF3F\\uDF45]|\\uD82F\\uDC9C|\\uD833[\\uDF50-\\uDFC3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDEA\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85\\uDE86]|\\uD838[\\uDD4F\\uDEFF]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD0D-\\uDDAD\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED7\\uDEDC-\\uDEEC\\uDEF0-\\uDEFC\\uDF00-\\uDF76\\uDF7B-\\uDFD9\\uDFE0-\\uDFEB\\uDFF0]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDCB0\\uDCB1\\uDD00-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE7C\\uDE80-\\uDE88\\uDE90-\\uDEBD\\uDEBF-\\uDEC5\\uDECE-\\uDEDB\\uDEE0-\\uDEE8\\uDEF0-\\uDEF8\\uDF00-\\uDF92\\uDF94-\\uDFCA]/;\n\nvar regex = /[ \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/;\n\nexports.Any = regex$5;\nexports.Cc = regex$4;\nexports.Cf = regex$3;\nexports.P = regex$2;\nexports.S = regex$1;\nexports.Z = regex;\n","\"use strict\";\n// Generated using scripts/write-encode-map.ts\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction restoreDiff(arr) {\n    for (var i = 1; i < arr.length; i++) {\n        arr[i][0] += arr[i - 1][0] + 1;\n    }\n    return arr;\n}\n// prettier-ignore\nexports.default = new Map(/* #__PURE__ */ restoreDiff([[9, \"&Tab;\"], [0, \"&NewLine;\"], [22, \"&excl;\"], [0, \"&quot;\"], [0, \"&num;\"], [0, \"&dollar;\"], [0, \"&percnt;\"], [0, \"&amp;\"], [0, \"&apos;\"], [0, \"&lpar;\"], [0, \"&rpar;\"], [0, \"&ast;\"], [0, \"&plus;\"], [0, \"&comma;\"], [1, \"&period;\"], [0, \"&sol;\"], [10, \"&colon;\"], [0, \"&semi;\"], [0, { v: \"&lt;\", n: 8402, o: \"&nvlt;\" }], [0, { v: \"&equals;\", n: 8421, o: \"&bne;\" }], [0, { v: \"&gt;\", n: 8402, o: \"&nvgt;\" }], [0, \"&quest;\"], [0, \"&commat;\"], [26, \"&lbrack;\"], [0, \"&bsol;\"], [0, \"&rbrack;\"], [0, \"&Hat;\"], [0, \"&lowbar;\"], [0, \"&DiacriticalGrave;\"], [5, { n: 106, o: \"&fjlig;\" }], [20, \"&lbrace;\"], [0, \"&verbar;\"], [0, \"&rbrace;\"], [34, \"&nbsp;\"], [0, \"&iexcl;\"], [0, \"&cent;\"], [0, \"&pound;\"], [0, \"&curren;\"], [0, \"&yen;\"], [0, \"&brvbar;\"], [0, \"&sect;\"], [0, \"&die;\"], [0, \"&copy;\"], [0, \"&ordf;\"], [0, \"&laquo;\"], [0, \"&not;\"], [0, \"&shy;\"], [0, \"&circledR;\"], [0, \"&macr;\"], [0, \"&deg;\"], [0, \"&PlusMinus;\"], [0, \"&sup2;\"], [0, \"&sup3;\"], [0, \"&acute;\"], [0, \"&micro;\"], [0, \"&para;\"], [0, \"&centerdot;\"], [0, \"&cedil;\"], [0, \"&sup1;\"], [0, \"&ordm;\"], [0, \"&raquo;\"], [0, \"&frac14;\"], [0, \"&frac12;\"], [0, \"&frac34;\"], [0, \"&iquest;\"], [0, \"&Agrave;\"], [0, \"&Aacute;\"], [0, \"&Acirc;\"], [0, \"&Atilde;\"], [0, \"&Auml;\"], [0, \"&angst;\"], [0, \"&AElig;\"], [0, \"&Ccedil;\"], [0, \"&Egrave;\"], [0, \"&Eacute;\"], [0, \"&Ecirc;\"], [0, \"&Euml;\"], [0, \"&Igrave;\"], [0, \"&Iacute;\"], [0, \"&Icirc;\"], [0, \"&Iuml;\"], [0, \"&ETH;\"], [0, \"&Ntilde;\"], [0, \"&Ograve;\"], [0, \"&Oacute;\"], [0, \"&Ocirc;\"], [0, \"&Otilde;\"], [0, \"&Ouml;\"], [0, \"&times;\"], [0, \"&Oslash;\"], [0, \"&Ugrave;\"], [0, \"&Uacute;\"], [0, \"&Ucirc;\"], [0, \"&Uuml;\"], [0, \"&Yacute;\"], [0, \"&THORN;\"], [0, \"&szlig;\"], [0, \"&agrave;\"], [0, \"&aacute;\"], [0, \"&acirc;\"], [0, \"&atilde;\"], [0, \"&auml;\"], [0, \"&aring;\"], [0, \"&aelig;\"], [0, \"&ccedil;\"], [0, \"&egrave;\"], [0, \"&eacute;\"], [0, \"&ecirc;\"], [0, \"&euml;\"], [0, \"&igrave;\"], [0, \"&iacute;\"], [0, \"&icirc;\"], [0, \"&iuml;\"], [0, \"&eth;\"], [0, \"&ntilde;\"], [0, \"&ograve;\"], [0, \"&oacute;\"], [0, \"&ocirc;\"], [0, \"&otilde;\"], [0, \"&ouml;\"], [0, \"&div;\"], [0, \"&oslash;\"], [0, \"&ugrave;\"], [0, \"&uacute;\"], [0, \"&ucirc;\"], [0, \"&uuml;\"], [0, \"&yacute;\"], [0, \"&thorn;\"], [0, \"&yuml;\"], [0, \"&Amacr;\"], [0, \"&amacr;\"], [0, \"&Abreve;\"], [0, \"&abreve;\"], [0, \"&Aogon;\"], [0, \"&aogon;\"], [0, \"&Cacute;\"], [0, \"&cacute;\"], [0, \"&Ccirc;\"], [0, \"&ccirc;\"], [0, \"&Cdot;\"], [0, \"&cdot;\"], [0, \"&Ccaron;\"], [0, \"&ccaron;\"], [0, \"&Dcaron;\"], [0, \"&dcaron;\"], [0, \"&Dstrok;\"], [0, \"&dstrok;\"], [0, \"&Emacr;\"], [0, \"&emacr;\"], [2, \"&Edot;\"], [0, \"&edot;\"], [0, \"&Eogon;\"], [0, \"&eogon;\"], [0, \"&Ecaron;\"], [0, \"&ecaron;\"], [0, \"&Gcirc;\"], [0, \"&gcirc;\"], [0, \"&Gbreve;\"], [0, \"&gbreve;\"], [0, \"&Gdot;\"], [0, \"&gdot;\"], [0, \"&Gcedil;\"], [1, \"&Hcirc;\"], [0, \"&hcirc;\"], [0, \"&Hstrok;\"], [0, \"&hstrok;\"], [0, \"&Itilde;\"], [0, \"&itilde;\"], [0, \"&Imacr;\"], [0, \"&imacr;\"], [2, \"&Iogon;\"], [0, \"&iogon;\"], [0, \"&Idot;\"], [0, \"&imath;\"], [0, \"&IJlig;\"], [0, \"&ijlig;\"], [0, \"&Jcirc;\"], [0, \"&jcirc;\"], [0, \"&Kcedil;\"], [0, \"&kcedil;\"], [0, \"&kgreen;\"], [0, \"&Lacute;\"], [0, \"&lacute;\"], [0, \"&Lcedil;\"], [0, \"&lcedil;\"], [0, \"&Lcaron;\"], [0, \"&lcaron;\"], [0, \"&Lmidot;\"], [0, \"&lmidot;\"], [0, \"&Lstrok;\"], [0, \"&lstrok;\"], [0, \"&Nacute;\"], [0, \"&nacute;\"], [0, \"&Ncedil;\"], [0, \"&ncedil;\"], [0, \"&Ncaron;\"], [0, \"&ncaron;\"], [0, \"&napos;\"], [0, \"&ENG;\"], [0, \"&eng;\"], [0, \"&Omacr;\"], [0, \"&omacr;\"], [2, \"&Odblac;\"], [0, \"&odblac;\"], [0, \"&OElig;\"], [0, \"&oelig;\"], [0, \"&Racute;\"], [0, \"&racute;\"], [0, \"&Rcedil;\"], [0, \"&rcedil;\"], [0, \"&Rcaron;\"], [0, \"&rcaron;\"], [0, \"&Sacute;\"], [0, \"&sacute;\"], [0, \"&Scirc;\"], [0, \"&scirc;\"], [0, \"&Scedil;\"], [0, \"&scedil;\"], [0, \"&Scaron;\"], [0, \"&scaron;\"], [0, \"&Tcedil;\"], [0, \"&tcedil;\"], [0, \"&Tcaron;\"], [0, \"&tcaron;\"], [0, \"&Tstrok;\"], [0, \"&tstrok;\"], [0, \"&Utilde;\"], [0, \"&utilde;\"], [0, \"&Umacr;\"], [0, \"&umacr;\"], [0, \"&Ubreve;\"], [0, \"&ubreve;\"], [0, \"&Uring;\"], [0, \"&uring;\"], [0, \"&Udblac;\"], [0, \"&udblac;\"], [0, \"&Uogon;\"], [0, \"&uogon;\"], [0, \"&Wcirc;\"], [0, \"&wcirc;\"], [0, \"&Ycirc;\"], [0, \"&ycirc;\"], [0, \"&Yuml;\"], [0, \"&Zacute;\"], [0, \"&zacute;\"], [0, \"&Zdot;\"], [0, \"&zdot;\"], [0, \"&Zcaron;\"], [0, \"&zcaron;\"], [19, \"&fnof;\"], [34, \"&imped;\"], [63, \"&gacute;\"], [65, \"&jmath;\"], [142, \"&circ;\"], [0, \"&caron;\"], [16, \"&breve;\"], [0, \"&DiacriticalDot;\"], [0, \"&ring;\"], [0, \"&ogon;\"], [0, \"&DiacriticalTilde;\"], [0, \"&dblac;\"], [51, \"&DownBreve;\"], [127, \"&Alpha;\"], [0, \"&Beta;\"], [0, \"&Gamma;\"], [0, \"&Delta;\"], [0, \"&Epsilon;\"], [0, \"&Zeta;\"], [0, \"&Eta;\"], [0, \"&Theta;\"], [0, \"&Iota;\"], [0, \"&Kappa;\"], [0, \"&Lambda;\"], [0, \"&Mu;\"], [0, \"&Nu;\"], [0, \"&Xi;\"], [0, \"&Omicron;\"], [0, \"&Pi;\"], [0, \"&Rho;\"], [1, \"&Sigma;\"], [0, \"&Tau;\"], [0, \"&Upsilon;\"], [0, \"&Phi;\"], [0, \"&Chi;\"], [0, \"&Psi;\"], [0, \"&ohm;\"], [7, \"&alpha;\"], [0, \"&beta;\"], [0, \"&gamma;\"], [0, \"&delta;\"], [0, \"&epsi;\"], [0, \"&zeta;\"], [0, \"&eta;\"], [0, \"&theta;\"], [0, \"&iota;\"], [0, \"&kappa;\"], [0, \"&lambda;\"], [0, \"&mu;\"], [0, \"&nu;\"], [0, \"&xi;\"], [0, \"&omicron;\"], [0, \"&pi;\"], [0, \"&rho;\"], [0, \"&sigmaf;\"], [0, \"&sigma;\"], [0, \"&tau;\"], [0, \"&upsi;\"], [0, \"&phi;\"], [0, \"&chi;\"], [0, \"&psi;\"], [0, \"&omega;\"], [7, \"&thetasym;\"], [0, \"&Upsi;\"], [2, \"&phiv;\"], [0, \"&piv;\"], [5, \"&Gammad;\"], [0, \"&digamma;\"], [18, \"&kappav;\"], [0, \"&rhov;\"], [3, \"&epsiv;\"], [0, \"&backepsilon;\"], [10, \"&IOcy;\"], [0, \"&DJcy;\"], [0, \"&GJcy;\"], [0, \"&Jukcy;\"], [0, \"&DScy;\"], [0, \"&Iukcy;\"], [0, \"&YIcy;\"], [0, \"&Jsercy;\"], [0, \"&LJcy;\"], [0, \"&NJcy;\"], [0, \"&TSHcy;\"], [0, \"&KJcy;\"], [1, \"&Ubrcy;\"], [0, \"&DZcy;\"], [0, \"&Acy;\"], [0, \"&Bcy;\"], [0, \"&Vcy;\"], [0, \"&Gcy;\"], [0, \"&Dcy;\"], [0, \"&IEcy;\"], [0, \"&ZHcy;\"], [0, \"&Zcy;\"], [0, \"&Icy;\"], [0, \"&Jcy;\"], [0, \"&Kcy;\"], [0, \"&Lcy;\"], [0, \"&Mcy;\"], [0, \"&Ncy;\"], [0, \"&Ocy;\"], [0, \"&Pcy;\"], [0, \"&Rcy;\"], [0, \"&Scy;\"], [0, \"&Tcy;\"], [0, \"&Ucy;\"], [0, \"&Fcy;\"], [0, \"&KHcy;\"], [0, \"&TScy;\"], [0, \"&CHcy;\"], [0, \"&SHcy;\"], [0, \"&SHCHcy;\"], [0, \"&HARDcy;\"], [0, \"&Ycy;\"], [0, \"&SOFTcy;\"], [0, \"&Ecy;\"], [0, \"&YUcy;\"], [0, \"&YAcy;\"], [0, \"&acy;\"], [0, \"&bcy;\"], [0, \"&vcy;\"], [0, \"&gcy;\"], [0, \"&dcy;\"], [0, \"&iecy;\"], [0, \"&zhcy;\"], [0, \"&zcy;\"], [0, \"&icy;\"], [0, \"&jcy;\"], [0, \"&kcy;\"], [0, \"&lcy;\"], [0, \"&mcy;\"], [0, \"&ncy;\"], [0, \"&ocy;\"], [0, \"&pcy;\"], [0, \"&rcy;\"], [0, \"&scy;\"], [0, \"&tcy;\"], [0, \"&ucy;\"], [0, \"&fcy;\"], [0, \"&khcy;\"], [0, \"&tscy;\"], [0, \"&chcy;\"], [0, \"&shcy;\"], [0, \"&shchcy;\"], [0, \"&hardcy;\"], [0, \"&ycy;\"], [0, \"&softcy;\"], [0, \"&ecy;\"], [0, \"&yucy;\"], [0, \"&yacy;\"], [1, \"&iocy;\"], [0, \"&djcy;\"], [0, \"&gjcy;\"], [0, \"&jukcy;\"], [0, \"&dscy;\"], [0, \"&iukcy;\"], [0, \"&yicy;\"], [0, \"&jsercy;\"], [0, \"&ljcy;\"], [0, \"&njcy;\"], [0, \"&tshcy;\"], [0, \"&kjcy;\"], [1, \"&ubrcy;\"], [0, \"&dzcy;\"], [7074, \"&ensp;\"], [0, \"&emsp;\"], [0, \"&emsp13;\"], [0, \"&emsp14;\"], [1, \"&numsp;\"], [0, \"&puncsp;\"], [0, \"&ThinSpace;\"], [0, \"&hairsp;\"], [0, \"&NegativeMediumSpace;\"], [0, \"&zwnj;\"], [0, \"&zwj;\"], [0, \"&lrm;\"], [0, \"&rlm;\"], [0, \"&dash;\"], [2, \"&ndash;\"], [0, \"&mdash;\"], [0, \"&horbar;\"], [0, \"&Verbar;\"], [1, \"&lsquo;\"], [0, \"&CloseCurlyQuote;\"], [0, \"&lsquor;\"], [1, \"&ldquo;\"], [0, \"&CloseCurlyDoubleQuote;\"], [0, \"&bdquo;\"], [1, \"&dagger;\"], [0, \"&Dagger;\"], [0, \"&bull;\"], [2, \"&nldr;\"], [0, \"&hellip;\"], [9, \"&permil;\"], [0, \"&pertenk;\"], [0, \"&prime;\"], [0, \"&Prime;\"], [0, \"&tprime;\"], [0, \"&backprime;\"], [3, \"&lsaquo;\"], [0, \"&rsaquo;\"], [3, \"&oline;\"], [2, \"&caret;\"], [1, \"&hybull;\"], [0, \"&frasl;\"], [10, \"&bsemi;\"], [7, \"&qprime;\"], [7, { v: \"&MediumSpace;\", n: 8202, o: \"&ThickSpace;\" }], [0, \"&NoBreak;\"], [0, \"&af;\"], [0, \"&InvisibleTimes;\"], [0, \"&ic;\"], [72, \"&euro;\"], [46, \"&tdot;\"], [0, \"&DotDot;\"], [37, \"&complexes;\"], [2, \"&incare;\"], [4, \"&gscr;\"], [0, \"&hamilt;\"], [0, \"&Hfr;\"], [0, \"&Hopf;\"], [0, \"&planckh;\"], [0, \"&hbar;\"], [0, \"&imagline;\"], [0, \"&Ifr;\"], [0, \"&lagran;\"], [0, \"&ell;\"], [1, \"&naturals;\"], [0, \"&numero;\"], [0, \"&copysr;\"], [0, \"&weierp;\"], [0, \"&Popf;\"], [0, \"&Qopf;\"], [0, \"&realine;\"], [0, \"&real;\"], [0, \"&reals;\"], [0, \"&rx;\"], [3, \"&trade;\"], [1, \"&integers;\"], [2, \"&mho;\"], [0, \"&zeetrf;\"], [0, \"&iiota;\"], [2, \"&bernou;\"], [0, \"&Cayleys;\"], [1, \"&escr;\"], [0, \"&Escr;\"], [0, \"&Fouriertrf;\"], [1, \"&Mellintrf;\"], [0, \"&order;\"], [0, \"&alefsym;\"], [0, \"&beth;\"], [0, \"&gimel;\"], [0, \"&daleth;\"], [12, \"&CapitalDifferentialD;\"], [0, \"&dd;\"], [0, \"&ee;\"], [0, \"&ii;\"], [10, \"&frac13;\"], [0, \"&frac23;\"], [0, \"&frac15;\"], [0, \"&frac25;\"], [0, \"&frac35;\"], [0, \"&frac45;\"], [0, \"&frac16;\"], [0, \"&frac56;\"], [0, \"&frac18;\"], [0, \"&frac38;\"], [0, \"&frac58;\"], [0, \"&frac78;\"], [49, \"&larr;\"], [0, \"&ShortUpArrow;\"], [0, \"&rarr;\"], [0, \"&darr;\"], [0, \"&harr;\"], [0, \"&updownarrow;\"], [0, \"&nwarr;\"], [0, \"&nearr;\"], [0, \"&LowerRightArrow;\"], [0, \"&LowerLeftArrow;\"], [0, \"&nlarr;\"], [0, \"&nrarr;\"], [1, { v: \"&rarrw;\", n: 824, o: \"&nrarrw;\" }], [0, \"&Larr;\"], [0, \"&Uarr;\"], [0, \"&Rarr;\"], [0, \"&Darr;\"], [0, \"&larrtl;\"], [0, \"&rarrtl;\"], [0, \"&LeftTeeArrow;\"], [0, \"&mapstoup;\"], [0, \"&map;\"], [0, \"&DownTeeArrow;\"], [1, \"&hookleftarrow;\"], [0, \"&hookrightarrow;\"], [0, \"&larrlp;\"], [0, \"&looparrowright;\"], [0, \"&harrw;\"], [0, \"&nharr;\"], [1, \"&lsh;\"], [0, \"&rsh;\"], [0, \"&ldsh;\"], [0, \"&rdsh;\"], [1, \"&crarr;\"], [0, \"&cularr;\"], [0, \"&curarr;\"], [2, \"&circlearrowleft;\"], [0, \"&circlearrowright;\"], [0, \"&leftharpoonup;\"], [0, \"&DownLeftVector;\"], [0, \"&RightUpVector;\"], [0, \"&LeftUpVector;\"], [0, \"&rharu;\"], [0, \"&DownRightVector;\"], [0, \"&dharr;\"], [0, \"&dharl;\"], [0, \"&RightArrowLeftArrow;\"], [0, \"&udarr;\"], [0, \"&LeftArrowRightArrow;\"], [0, \"&leftleftarrows;\"], [0, \"&upuparrows;\"], [0, \"&rightrightarrows;\"], [0, \"&ddarr;\"], [0, \"&leftrightharpoons;\"], [0, \"&Equilibrium;\"], [0, \"&nlArr;\"], [0, \"&nhArr;\"], [0, \"&nrArr;\"], [0, \"&DoubleLeftArrow;\"], [0, \"&DoubleUpArrow;\"], [0, \"&DoubleRightArrow;\"], [0, \"&dArr;\"], [0, \"&DoubleLeftRightArrow;\"], [0, \"&DoubleUpDownArrow;\"], [0, \"&nwArr;\"], [0, \"&neArr;\"], [0, \"&seArr;\"], [0, \"&swArr;\"], [0, \"&lAarr;\"], [0, \"&rAarr;\"], [1, \"&zigrarr;\"], [6, \"&larrb;\"], [0, \"&rarrb;\"], [15, \"&DownArrowUpArrow;\"], [7, \"&loarr;\"], [0, \"&roarr;\"], [0, \"&hoarr;\"], [0, \"&forall;\"], [0, \"&comp;\"], [0, { v: \"&part;\", n: 824, o: \"&npart;\" }], [0, \"&exist;\"], [0, \"&nexist;\"], [0, \"&empty;\"], [1, \"&Del;\"], [0, \"&Element;\"], [0, \"&NotElement;\"], [1, \"&ni;\"], [0, \"&notni;\"], [2, \"&prod;\"], [0, \"&coprod;\"], [0, \"&sum;\"], [0, \"&minus;\"], [0, \"&MinusPlus;\"], [0, \"&dotplus;\"], [1, \"&Backslash;\"], [0, \"&lowast;\"], [0, \"&compfn;\"], [1, \"&radic;\"], [2, \"&prop;\"], [0, \"&infin;\"], [0, \"&angrt;\"], [0, { v: \"&ang;\", n: 8402, o: \"&nang;\" }], [0, \"&angmsd;\"], [0, \"&angsph;\"], [0, \"&mid;\"], [0, \"&nmid;\"], [0, \"&DoubleVerticalBar;\"], [0, \"&NotDoubleVerticalBar;\"], [0, \"&and;\"], [0, \"&or;\"], [0, { v: \"&cap;\", n: 65024, o: \"&caps;\" }], [0, { v: \"&cup;\", n: 65024, o: \"&cups;\" }], [0, \"&int;\"], [0, \"&Int;\"], [0, \"&iiint;\"], [0, \"&conint;\"], [0, \"&Conint;\"], [0, \"&Cconint;\"], [0, \"&cwint;\"], [0, \"&ClockwiseContourIntegral;\"], [0, \"&awconint;\"], [0, \"&there4;\"], [0, \"&becaus;\"], [0, \"&ratio;\"], [0, \"&Colon;\"], [0, \"&dotminus;\"], [1, \"&mDDot;\"], [0, \"&homtht;\"], [0, { v: \"&sim;\", n: 8402, o: \"&nvsim;\" }], [0, { v: \"&backsim;\", n: 817, o: \"&race;\" }], [0, { v: \"&ac;\", n: 819, o: \"&acE;\" }], [0, \"&acd;\"], [0, \"&VerticalTilde;\"], [0, \"&NotTilde;\"], [0, { v: \"&eqsim;\", n: 824, o: \"&nesim;\" }], [0, \"&sime;\"], [0, \"&NotTildeEqual;\"], [0, \"&cong;\"], [0, \"&simne;\"], [0, \"&ncong;\"], [0, \"&ap;\"], [0, \"&nap;\"], [0, \"&ape;\"], [0, { v: \"&apid;\", n: 824, o: \"&napid;\" }], [0, \"&backcong;\"], [0, { v: \"&asympeq;\", n: 8402, o: \"&nvap;\" }], [0, { v: \"&bump;\", n: 824, o: \"&nbump;\" }], [0, { v: \"&bumpe;\", n: 824, o: \"&nbumpe;\" }], [0, { v: \"&doteq;\", n: 824, o: \"&nedot;\" }], [0, \"&doteqdot;\"], [0, \"&efDot;\"], [0, \"&erDot;\"], [0, \"&Assign;\"], [0, \"&ecolon;\"], [0, \"&ecir;\"], [0, \"&circeq;\"], [1, \"&wedgeq;\"], [0, \"&veeeq;\"], [1, \"&triangleq;\"], [2, \"&equest;\"], [0, \"&ne;\"], [0, { v: \"&Congruent;\", n: 8421, o: \"&bnequiv;\" }], [0, \"&nequiv;\"], [1, { v: \"&le;\", n: 8402, o: \"&nvle;\" }], [0, { v: \"&ge;\", n: 8402, o: \"&nvge;\" }], [0, { v: \"&lE;\", n: 824, o: \"&nlE;\" }], [0, { v: \"&gE;\", n: 824, o: \"&ngE;\" }], [0, { v: \"&lnE;\", n: 65024, o: \"&lvertneqq;\" }], [0, { v: \"&gnE;\", n: 65024, o: \"&gvertneqq;\" }], [0, { v: \"&ll;\", n: new Map(/* #__PURE__ */ restoreDiff([[824, \"&nLtv;\"], [7577, \"&nLt;\"]])) }], [0, { v: \"&gg;\", n: new Map(/* #__PURE__ */ restoreDiff([[824, \"&nGtv;\"], [7577, \"&nGt;\"]])) }], [0, \"&between;\"], [0, \"&NotCupCap;\"], [0, \"&nless;\"], [0, \"&ngt;\"], [0, \"&nle;\"], [0, \"&nge;\"], [0, \"&lesssim;\"], [0, \"&GreaterTilde;\"], [0, \"&nlsim;\"], [0, \"&ngsim;\"], [0, \"&LessGreater;\"], [0, \"&gl;\"], [0, \"&NotLessGreater;\"], [0, \"&NotGreaterLess;\"], [0, \"&pr;\"], [0, \"&sc;\"], [0, \"&prcue;\"], [0, \"&sccue;\"], [0, \"&PrecedesTilde;\"], [0, { v: \"&scsim;\", n: 824, o: \"&NotSucceedsTilde;\" }], [0, \"&NotPrecedes;\"], [0, \"&NotSucceeds;\"], [0, { v: \"&sub;\", n: 8402, o: \"&NotSubset;\" }], [0, { v: \"&sup;\", n: 8402, o: \"&NotSuperset;\" }], [0, \"&nsub;\"], [0, \"&nsup;\"], [0, \"&sube;\"], [0, \"&supe;\"], [0, \"&NotSubsetEqual;\"], [0, \"&NotSupersetEqual;\"], [0, { v: \"&subne;\", n: 65024, o: \"&varsubsetneq;\" }], [0, { v: \"&supne;\", n: 65024, o: \"&varsupsetneq;\" }], [1, \"&cupdot;\"], [0, \"&UnionPlus;\"], [0, { v: \"&sqsub;\", n: 824, o: \"&NotSquareSubset;\" }], [0, { v: \"&sqsup;\", n: 824, o: \"&NotSquareSuperset;\" }], [0, \"&sqsube;\"], [0, \"&sqsupe;\"], [0, { v: \"&sqcap;\", n: 65024, o: \"&sqcaps;\" }], [0, { v: \"&sqcup;\", n: 65024, o: \"&sqcups;\" }], [0, \"&CirclePlus;\"], [0, \"&CircleMinus;\"], [0, \"&CircleTimes;\"], [0, \"&osol;\"], [0, \"&CircleDot;\"], [0, \"&circledcirc;\"], [0, \"&circledast;\"], [1, \"&circleddash;\"], [0, \"&boxplus;\"], [0, \"&boxminus;\"], [0, \"&boxtimes;\"], [0, \"&dotsquare;\"], [0, \"&RightTee;\"], [0, \"&dashv;\"], [0, \"&DownTee;\"], [0, \"&bot;\"], [1, \"&models;\"], [0, \"&DoubleRightTee;\"], [0, \"&Vdash;\"], [0, \"&Vvdash;\"], [0, \"&VDash;\"], [0, \"&nvdash;\"], [0, \"&nvDash;\"], [0, \"&nVdash;\"], [0, \"&nVDash;\"], [0, \"&prurel;\"], [1, \"&LeftTriangle;\"], [0, \"&RightTriangle;\"], [0, { v: \"&LeftTriangleEqual;\", n: 8402, o: \"&nvltrie;\" }], [0, { v: \"&RightTriangleEqual;\", n: 8402, o: \"&nvrtrie;\" }], [0, \"&origof;\"], [0, \"&imof;\"], [0, \"&multimap;\"], [0, \"&hercon;\"], [0, \"&intcal;\"], [0, \"&veebar;\"], [1, \"&barvee;\"], [0, \"&angrtvb;\"], [0, \"&lrtri;\"], [0, \"&bigwedge;\"], [0, \"&bigvee;\"], [0, \"&bigcap;\"], [0, \"&bigcup;\"], [0, \"&diam;\"], [0, \"&sdot;\"], [0, \"&sstarf;\"], [0, \"&divideontimes;\"], [0, \"&bowtie;\"], [0, \"&ltimes;\"], [0, \"&rtimes;\"], [0, \"&leftthreetimes;\"], [0, \"&rightthreetimes;\"], [0, \"&backsimeq;\"], [0, \"&curlyvee;\"], [0, \"&curlywedge;\"], [0, \"&Sub;\"], [0, \"&Sup;\"], [0, \"&Cap;\"], [0, \"&Cup;\"], [0, \"&fork;\"], [0, \"&epar;\"], [0, \"&lessdot;\"], [0, \"&gtdot;\"], [0, { v: \"&Ll;\", n: 824, o: \"&nLl;\" }], [0, { v: \"&Gg;\", n: 824, o: \"&nGg;\" }], [0, { v: \"&leg;\", n: 65024, o: \"&lesg;\" }], [0, { v: \"&gel;\", n: 65024, o: \"&gesl;\" }], [2, \"&cuepr;\"], [0, \"&cuesc;\"], [0, \"&NotPrecedesSlantEqual;\"], [0, \"&NotSucceedsSlantEqual;\"], [0, \"&NotSquareSubsetEqual;\"], [0, \"&NotSquareSupersetEqual;\"], [2, \"&lnsim;\"], [0, \"&gnsim;\"], [0, \"&precnsim;\"], [0, \"&scnsim;\"], [0, \"&nltri;\"], [0, \"&NotRightTriangle;\"], [0, \"&nltrie;\"], [0, \"&NotRightTriangleEqual;\"], [0, \"&vellip;\"], [0, \"&ctdot;\"], [0, \"&utdot;\"], [0, \"&dtdot;\"], [0, \"&disin;\"], [0, \"&isinsv;\"], [0, \"&isins;\"], [0, { v: \"&isindot;\", n: 824, o: \"&notindot;\" }], [0, \"&notinvc;\"], [0, \"&notinvb;\"], [1, { v: \"&isinE;\", n: 824, o: \"&notinE;\" }], [0, \"&nisd;\"], [0, \"&xnis;\"], [0, \"&nis;\"], [0, \"&notnivc;\"], [0, \"&notnivb;\"], [6, \"&barwed;\"], [0, \"&Barwed;\"], [1, \"&lceil;\"], [0, \"&rceil;\"], [0, \"&LeftFloor;\"], [0, \"&rfloor;\"], [0, \"&drcrop;\"], [0, \"&dlcrop;\"], [0, \"&urcrop;\"], [0, \"&ulcrop;\"], [0, \"&bnot;\"], [1, \"&profline;\"], [0, \"&profsurf;\"], [1, \"&telrec;\"], [0, \"&target;\"], [5, \"&ulcorn;\"], [0, \"&urcorn;\"], [0, \"&dlcorn;\"], [0, \"&drcorn;\"], [2, \"&frown;\"], [0, \"&smile;\"], [9, \"&cylcty;\"], [0, \"&profalar;\"], [7, \"&topbot;\"], [6, \"&ovbar;\"], [1, \"&solbar;\"], [60, \"&angzarr;\"], [51, \"&lmoustache;\"], [0, \"&rmoustache;\"], [2, \"&OverBracket;\"], [0, \"&bbrk;\"], [0, \"&bbrktbrk;\"], [37, \"&OverParenthesis;\"], [0, \"&UnderParenthesis;\"], [0, \"&OverBrace;\"], [0, \"&UnderBrace;\"], [2, \"&trpezium;\"], [4, \"&elinters;\"], [59, \"&blank;\"], [164, \"&circledS;\"], [55, \"&boxh;\"], [1, \"&boxv;\"], [9, \"&boxdr;\"], [3, \"&boxdl;\"], [3, \"&boxur;\"], [3, \"&boxul;\"], [3, \"&boxvr;\"], [7, \"&boxvl;\"], [7, \"&boxhd;\"], [7, \"&boxhu;\"], [7, \"&boxvh;\"], [19, \"&boxH;\"], [0, \"&boxV;\"], [0, \"&boxdR;\"], [0, \"&boxDr;\"], [0, \"&boxDR;\"], [0, \"&boxdL;\"], [0, \"&boxDl;\"], [0, \"&boxDL;\"], [0, \"&boxuR;\"], [0, \"&boxUr;\"], [0, \"&boxUR;\"], [0, \"&boxuL;\"], [0, \"&boxUl;\"], [0, \"&boxUL;\"], [0, \"&boxvR;\"], [0, \"&boxVr;\"], [0, \"&boxVR;\"], [0, \"&boxvL;\"], [0, \"&boxVl;\"], [0, \"&boxVL;\"], [0, \"&boxHd;\"], [0, \"&boxhD;\"], [0, \"&boxHD;\"], [0, \"&boxHu;\"], [0, \"&boxhU;\"], [0, \"&boxHU;\"], [0, \"&boxvH;\"], [0, \"&boxVh;\"], [0, \"&boxVH;\"], [19, \"&uhblk;\"], [3, \"&lhblk;\"], [3, \"&block;\"], [8, \"&blk14;\"], [0, \"&blk12;\"], [0, \"&blk34;\"], [13, \"&square;\"], [8, \"&blacksquare;\"], [0, \"&EmptyVerySmallSquare;\"], [1, \"&rect;\"], [0, \"&marker;\"], [2, \"&fltns;\"], [1, \"&bigtriangleup;\"], [0, \"&blacktriangle;\"], [0, \"&triangle;\"], [2, \"&blacktriangleright;\"], [0, \"&rtri;\"], [3, \"&bigtriangledown;\"], [0, \"&blacktriangledown;\"], [0, \"&dtri;\"], [2, \"&blacktriangleleft;\"], [0, \"&ltri;\"], [6, \"&loz;\"], [0, \"&cir;\"], [32, \"&tridot;\"], [2, \"&bigcirc;\"], [8, \"&ultri;\"], [0, \"&urtri;\"], [0, \"&lltri;\"], [0, \"&EmptySmallSquare;\"], [0, \"&FilledSmallSquare;\"], [8, \"&bigstar;\"], [0, \"&star;\"], [7, \"&phone;\"], [49, \"&female;\"], [1, \"&male;\"], [29, \"&spades;\"], [2, \"&clubs;\"], [1, \"&hearts;\"], [0, \"&diamondsuit;\"], [3, \"&sung;\"], [2, \"&flat;\"], [0, \"&natural;\"], [0, \"&sharp;\"], [163, \"&check;\"], [3, \"&cross;\"], [8, \"&malt;\"], [21, \"&sext;\"], [33, \"&VerticalSeparator;\"], [25, \"&lbbrk;\"], [0, \"&rbbrk;\"], [84, \"&bsolhsub;\"], [0, \"&suphsol;\"], [28, \"&LeftDoubleBracket;\"], [0, \"&RightDoubleBracket;\"], [0, \"&lang;\"], [0, \"&rang;\"], [0, \"&Lang;\"], [0, \"&Rang;\"], [0, \"&loang;\"], [0, \"&roang;\"], [7, \"&longleftarrow;\"], [0, \"&longrightarrow;\"], [0, \"&longleftrightarrow;\"], [0, \"&DoubleLongLeftArrow;\"], [0, \"&DoubleLongRightArrow;\"], [0, \"&DoubleLongLeftRightArrow;\"], [1, \"&longmapsto;\"], [2, \"&dzigrarr;\"], [258, \"&nvlArr;\"], [0, \"&nvrArr;\"], [0, \"&nvHarr;\"], [0, \"&Map;\"], [6, \"&lbarr;\"], [0, \"&bkarow;\"], [0, \"&lBarr;\"], [0, \"&dbkarow;\"], [0, \"&drbkarow;\"], [0, \"&DDotrahd;\"], [0, \"&UpArrowBar;\"], [0, \"&DownArrowBar;\"], [2, \"&Rarrtl;\"], [2, \"&latail;\"], [0, \"&ratail;\"], [0, \"&lAtail;\"], [0, \"&rAtail;\"], [0, \"&larrfs;\"], [0, \"&rarrfs;\"], [0, \"&larrbfs;\"], [0, \"&rarrbfs;\"], [2, \"&nwarhk;\"], [0, \"&nearhk;\"], [0, \"&hksearow;\"], [0, \"&hkswarow;\"], [0, \"&nwnear;\"], [0, \"&nesear;\"], [0, \"&seswar;\"], [0, \"&swnwar;\"], [8, { v: \"&rarrc;\", n: 824, o: \"&nrarrc;\" }], [1, \"&cudarrr;\"], [0, \"&ldca;\"], [0, \"&rdca;\"], [0, \"&cudarrl;\"], [0, \"&larrpl;\"], [2, \"&curarrm;\"], [0, \"&cularrp;\"], [7, \"&rarrpl;\"], [2, \"&harrcir;\"], [0, \"&Uarrocir;\"], [0, \"&lurdshar;\"], [0, \"&ldrushar;\"], [2, \"&LeftRightVector;\"], [0, \"&RightUpDownVector;\"], [0, \"&DownLeftRightVector;\"], [0, \"&LeftUpDownVector;\"], [0, \"&LeftVectorBar;\"], [0, \"&RightVectorBar;\"], [0, \"&RightUpVectorBar;\"], [0, \"&RightDownVectorBar;\"], [0, \"&DownLeftVectorBar;\"], [0, \"&DownRightVectorBar;\"], [0, \"&LeftUpVectorBar;\"], [0, \"&LeftDownVectorBar;\"], [0, \"&LeftTeeVector;\"], [0, \"&RightTeeVector;\"], [0, \"&RightUpTeeVector;\"], [0, \"&RightDownTeeVector;\"], [0, \"&DownLeftTeeVector;\"], [0, \"&DownRightTeeVector;\"], [0, \"&LeftUpTeeVector;\"], [0, \"&LeftDownTeeVector;\"], [0, \"&lHar;\"], [0, \"&uHar;\"], [0, \"&rHar;\"], [0, \"&dHar;\"], [0, \"&luruhar;\"], [0, \"&ldrdhar;\"], [0, \"&ruluhar;\"], [0, \"&rdldhar;\"], [0, \"&lharul;\"], [0, \"&llhard;\"], [0, \"&rharul;\"], [0, \"&lrhard;\"], [0, \"&udhar;\"], [0, \"&duhar;\"], [0, \"&RoundImplies;\"], [0, \"&erarr;\"], [0, \"&simrarr;\"], [0, \"&larrsim;\"], [0, \"&rarrsim;\"], [0, \"&rarrap;\"], [0, \"&ltlarr;\"], [1, \"&gtrarr;\"], [0, \"&subrarr;\"], [1, \"&suplarr;\"], [0, \"&lfisht;\"], [0, \"&rfisht;\"], [0, \"&ufisht;\"], [0, \"&dfisht;\"], [5, \"&lopar;\"], [0, \"&ropar;\"], [4, \"&lbrke;\"], [0, \"&rbrke;\"], [0, \"&lbrkslu;\"], [0, \"&rbrksld;\"], [0, \"&lbrksld;\"], [0, \"&rbrkslu;\"], [0, \"&langd;\"], [0, \"&rangd;\"], [0, \"&lparlt;\"], [0, \"&rpargt;\"], [0, \"&gtlPar;\"], [0, \"&ltrPar;\"], [3, \"&vzigzag;\"], [1, \"&vangrt;\"], [0, \"&angrtvbd;\"], [6, \"&ange;\"], [0, \"&range;\"], [0, \"&dwangle;\"], [0, \"&uwangle;\"], [0, \"&angmsdaa;\"], [0, \"&angmsdab;\"], [0, \"&angmsdac;\"], [0, \"&angmsdad;\"], [0, \"&angmsdae;\"], [0, \"&angmsdaf;\"], [0, \"&angmsdag;\"], [0, \"&angmsdah;\"], [0, \"&bemptyv;\"], [0, \"&demptyv;\"], [0, \"&cemptyv;\"], [0, \"&raemptyv;\"], [0, \"&laemptyv;\"], [0, \"&ohbar;\"], [0, \"&omid;\"], [0, \"&opar;\"], [1, \"&operp;\"], [1, \"&olcross;\"], [0, \"&odsold;\"], [1, \"&olcir;\"], [0, \"&ofcir;\"], [0, \"&olt;\"], [0, \"&ogt;\"], [0, \"&cirscir;\"], [0, \"&cirE;\"], [0, \"&solb;\"], [0, \"&bsolb;\"], [3, \"&boxbox;\"], [3, \"&trisb;\"], [0, \"&rtriltri;\"], [0, { v: \"&LeftTriangleBar;\", n: 824, o: \"&NotLeftTriangleBar;\" }], [0, { v: \"&RightTriangleBar;\", n: 824, o: \"&NotRightTriangleBar;\" }], [11, \"&iinfin;\"], [0, \"&infintie;\"], [0, \"&nvinfin;\"], [4, \"&eparsl;\"], [0, \"&smeparsl;\"], [0, \"&eqvparsl;\"], [5, \"&blacklozenge;\"], [8, \"&RuleDelayed;\"], [1, \"&dsol;\"], [9, \"&bigodot;\"], [0, \"&bigoplus;\"], [0, \"&bigotimes;\"], [1, \"&biguplus;\"], [1, \"&bigsqcup;\"], [5, \"&iiiint;\"], [0, \"&fpartint;\"], [2, \"&cirfnint;\"], [0, \"&awint;\"], [0, \"&rppolint;\"], [0, \"&scpolint;\"], [0, \"&npolint;\"], [0, \"&pointint;\"], [0, \"&quatint;\"], [0, \"&intlarhk;\"], [10, \"&pluscir;\"], [0, \"&plusacir;\"], [0, \"&simplus;\"], [0, \"&plusdu;\"], [0, \"&plussim;\"], [0, \"&plustwo;\"], [1, \"&mcomma;\"], [0, \"&minusdu;\"], [2, \"&loplus;\"], [0, \"&roplus;\"], [0, \"&Cross;\"], [0, \"&timesd;\"], [0, \"&timesbar;\"], [1, \"&smashp;\"], [0, \"&lotimes;\"], [0, \"&rotimes;\"], [0, \"&otimesas;\"], [0, \"&Otimes;\"], [0, \"&odiv;\"], [0, \"&triplus;\"], [0, \"&triminus;\"], [0, \"&tritime;\"], [0, \"&intprod;\"], [2, \"&amalg;\"], [0, \"&capdot;\"], [1, \"&ncup;\"], [0, \"&ncap;\"], [0, \"&capand;\"], [0, \"&cupor;\"], [0, \"&cupcap;\"], [0, \"&capcup;\"], [0, \"&cupbrcap;\"], [0, \"&capbrcup;\"], [0, \"&cupcup;\"], [0, \"&capcap;\"], [0, \"&ccups;\"], [0, \"&ccaps;\"], [2, \"&ccupssm;\"], [2, \"&And;\"], [0, \"&Or;\"], [0, \"&andand;\"], [0, \"&oror;\"], [0, \"&orslope;\"], [0, \"&andslope;\"], [1, \"&andv;\"], [0, \"&orv;\"], [0, \"&andd;\"], [0, \"&ord;\"], [1, \"&wedbar;\"], [6, \"&sdote;\"], [3, \"&simdot;\"], [2, { v: \"&congdot;\", n: 824, o: \"&ncongdot;\" }], [0, \"&easter;\"], [0, \"&apacir;\"], [0, { v: \"&apE;\", n: 824, o: \"&napE;\" }], [0, \"&eplus;\"], [0, \"&pluse;\"], [0, \"&Esim;\"], [0, \"&Colone;\"], [0, \"&Equal;\"], [1, \"&ddotseq;\"], [0, \"&equivDD;\"], [0, \"&ltcir;\"], [0, \"&gtcir;\"], [0, \"&ltquest;\"], [0, \"&gtquest;\"], [0, { v: \"&leqslant;\", n: 824, o: \"&nleqslant;\" }], [0, { v: \"&geqslant;\", n: 824, o: \"&ngeqslant;\" }], [0, \"&lesdot;\"], [0, \"&gesdot;\"], [0, \"&lesdoto;\"], [0, \"&gesdoto;\"], [0, \"&lesdotor;\"], [0, \"&gesdotol;\"], [0, \"&lap;\"], [0, \"&gap;\"], [0, \"&lne;\"], [0, \"&gne;\"], [0, \"&lnap;\"], [0, \"&gnap;\"], [0, \"&lEg;\"], [0, \"&gEl;\"], [0, \"&lsime;\"], [0, \"&gsime;\"], [0, \"&lsimg;\"], [0, \"&gsiml;\"], [0, \"&lgE;\"], [0, \"&glE;\"], [0, \"&lesges;\"], [0, \"&gesles;\"], [0, \"&els;\"], [0, \"&egs;\"], [0, \"&elsdot;\"], [0, \"&egsdot;\"], [0, \"&el;\"], [0, \"&eg;\"], [2, \"&siml;\"], [0, \"&simg;\"], [0, \"&simlE;\"], [0, \"&simgE;\"], [0, { v: \"&LessLess;\", n: 824, o: \"&NotNestedLessLess;\" }], [0, { v: \"&GreaterGreater;\", n: 824, o: \"&NotNestedGreaterGreater;\" }], [1, \"&glj;\"], [0, \"&gla;\"], [0, \"&ltcc;\"], [0, \"&gtcc;\"], [0, \"&lescc;\"], [0, \"&gescc;\"], [0, \"&smt;\"], [0, \"&lat;\"], [0, { v: \"&smte;\", n: 65024, o: \"&smtes;\" }], [0, { v: \"&late;\", n: 65024, o: \"&lates;\" }], [0, \"&bumpE;\"], [0, { v: \"&PrecedesEqual;\", n: 824, o: \"&NotPrecedesEqual;\" }], [0, { v: \"&sce;\", n: 824, o: \"&NotSucceedsEqual;\" }], [2, \"&prE;\"], [0, \"&scE;\"], [0, \"&precneqq;\"], [0, \"&scnE;\"], [0, \"&prap;\"], [0, \"&scap;\"], [0, \"&precnapprox;\"], [0, \"&scnap;\"], [0, \"&Pr;\"], [0, \"&Sc;\"], [0, \"&subdot;\"], [0, \"&supdot;\"], [0, \"&subplus;\"], [0, \"&supplus;\"], [0, \"&submult;\"], [0, \"&supmult;\"], [0, \"&subedot;\"], [0, \"&supedot;\"], [0, { v: \"&subE;\", n: 824, o: \"&nsubE;\" }], [0, { v: \"&supE;\", n: 824, o: \"&nsupE;\" }], [0, \"&subsim;\"], [0, \"&supsim;\"], [2, { v: \"&subnE;\", n: 65024, o: \"&varsubsetneqq;\" }], [0, { v: \"&supnE;\", n: 65024, o: \"&varsupsetneqq;\" }], [2, \"&csub;\"], [0, \"&csup;\"], [0, \"&csube;\"], [0, \"&csupe;\"], [0, \"&subsup;\"], [0, \"&supsub;\"], [0, \"&subsub;\"], [0, \"&supsup;\"], [0, \"&suphsub;\"], [0, \"&supdsub;\"], [0, \"&forkv;\"], [0, \"&topfork;\"], [0, \"&mlcp;\"], [8, \"&Dashv;\"], [1, \"&Vdashl;\"], [0, \"&Barv;\"], [0, \"&vBar;\"], [0, \"&vBarv;\"], [1, \"&Vbar;\"], [0, \"&Not;\"], [0, \"&bNot;\"], [0, \"&rnmid;\"], [0, \"&cirmid;\"], [0, \"&midcir;\"], [0, \"&topcir;\"], [0, \"&nhpar;\"], [0, \"&parsim;\"], [9, { v: \"&parsl;\", n: 8421, o: \"&nparsl;\" }], [44343, { n: new Map(/* #__PURE__ */ restoreDiff([[56476, \"&Ascr;\"], [1, \"&Cscr;\"], [0, \"&Dscr;\"], [2, \"&Gscr;\"], [2, \"&Jscr;\"], [0, \"&Kscr;\"], [2, \"&Nscr;\"], [0, \"&Oscr;\"], [0, \"&Pscr;\"], [0, \"&Qscr;\"], [1, \"&Sscr;\"], [0, \"&Tscr;\"], [0, \"&Uscr;\"], [0, \"&Vscr;\"], [0, \"&Wscr;\"], [0, \"&Xscr;\"], [0, \"&Yscr;\"], [0, \"&Zscr;\"], [0, \"&ascr;\"], [0, \"&bscr;\"], [0, \"&cscr;\"], [0, \"&dscr;\"], [1, \"&fscr;\"], [1, \"&hscr;\"], [0, \"&iscr;\"], [0, \"&jscr;\"], [0, \"&kscr;\"], [0, \"&lscr;\"], [0, \"&mscr;\"], [0, \"&nscr;\"], [1, \"&pscr;\"], [0, \"&qscr;\"], [0, \"&rscr;\"], [0, \"&sscr;\"], [0, \"&tscr;\"], [0, \"&uscr;\"], [0, \"&vscr;\"], [0, \"&wscr;\"], [0, \"&xscr;\"], [0, \"&yscr;\"], [0, \"&zscr;\"], [52, \"&Afr;\"], [0, \"&Bfr;\"], [1, \"&Dfr;\"], [0, \"&Efr;\"], [0, \"&Ffr;\"], [0, \"&Gfr;\"], [2, \"&Jfr;\"], [0, \"&Kfr;\"], [0, \"&Lfr;\"], [0, \"&Mfr;\"], [0, \"&Nfr;\"], [0, \"&Ofr;\"], [0, \"&Pfr;\"], [0, \"&Qfr;\"], [1, \"&Sfr;\"], [0, \"&Tfr;\"], [0, \"&Ufr;\"], [0, \"&Vfr;\"], [0, \"&Wfr;\"], [0, \"&Xfr;\"], [0, \"&Yfr;\"], [1, \"&afr;\"], [0, \"&bfr;\"], [0, \"&cfr;\"], [0, \"&dfr;\"], [0, \"&efr;\"], [0, \"&ffr;\"], [0, \"&gfr;\"], [0, \"&hfr;\"], [0, \"&ifr;\"], [0, \"&jfr;\"], [0, \"&kfr;\"], [0, \"&lfr;\"], [0, \"&mfr;\"], [0, \"&nfr;\"], [0, \"&ofr;\"], [0, \"&pfr;\"], [0, \"&qfr;\"], [0, \"&rfr;\"], [0, \"&sfr;\"], [0, \"&tfr;\"], [0, \"&ufr;\"], [0, \"&vfr;\"], [0, \"&wfr;\"], [0, \"&xfr;\"], [0, \"&yfr;\"], [0, \"&zfr;\"], [0, \"&Aopf;\"], [0, \"&Bopf;\"], [1, \"&Dopf;\"], [0, \"&Eopf;\"], [0, \"&Fopf;\"], [0, \"&Gopf;\"], [1, \"&Iopf;\"], [0, \"&Jopf;\"], [0, \"&Kopf;\"], [0, \"&Lopf;\"], [0, \"&Mopf;\"], [1, \"&Oopf;\"], [3, \"&Sopf;\"], [0, \"&Topf;\"], [0, \"&Uopf;\"], [0, \"&Vopf;\"], [0, \"&Wopf;\"], [0, \"&Xopf;\"], [0, \"&Yopf;\"], [1, \"&aopf;\"], [0, \"&bopf;\"], [0, \"&copf;\"], [0, \"&dopf;\"], [0, \"&eopf;\"], [0, \"&fopf;\"], [0, \"&gopf;\"], [0, \"&hopf;\"], [0, \"&iopf;\"], [0, \"&jopf;\"], [0, \"&kopf;\"], [0, \"&lopf;\"], [0, \"&mopf;\"], [0, \"&nopf;\"], [0, \"&oopf;\"], [0, \"&popf;\"], [0, \"&qopf;\"], [0, \"&ropf;\"], [0, \"&sopf;\"], [0, \"&topf;\"], [0, \"&uopf;\"], [0, \"&vopf;\"], [0, \"&wopf;\"], [0, \"&xopf;\"], [0, \"&yopf;\"], [0, \"&zopf;\"]])) }], [8906, \"&fflig;\"], [0, \"&filig;\"], [0, \"&fllig;\"], [0, \"&ffilig;\"], [0, \"&ffllig;\"]]));\n//# sourceMappingURL=encode-html.js.map","\"use strict\";\n// Generated using scripts/write-decode-map.ts\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = new Uint16Array(\n// prettier-ignore\n\"\\u0200aglq\\t\\x15\\x18\\x1b\\u026d\\x0f\\0\\0\\x12p;\\u4026os;\\u4027t;\\u403et;\\u403cuot;\\u4022\"\n    .split(\"\")\n    .map(function (c) { return c.charCodeAt(0); }));\n//# sourceMappingURL=decode-data-xml.js.map","import * as vscode from \"vscode\";\r\nimport { cellOptions } from \"./cellOptions\";\r\n\r\nexport class ConfigureCellOptionsCommand {\r\n  public static readonly id = \"quarto-wingman.configureCellOptions\";\r\n\r\n  public async execute(line: number): Promise<void> {\r\n    const editor = vscode.window.activeTextEditor;\r\n    if (!editor) {\r\n      return;\r\n    }\r\n\r\n    // STEP 1: Select a Main Section (Attributes, Code Output, etc.)\r\n    const mainSections: vscode.QuickPickItem[] = Object.keys(cellOptions).map(category => ({\r\n      label: `$(settings-gear) ${category}`, // Using a Codicon (folder)\r\n      description: `Select options under \"${category}\"`,\r\n      detail: \"\"\r\n    }));\r\n\r\n    const mainPick = await vscode.window.showQuickPick(mainSections, {\r\n      placeHolder: \"Select a main section (Attributes, Code Output, etc.)\"\r\n    });\r\n    if (!mainPick) {\r\n      return;\r\n    }\r\n    // Remove the icon prefix to obtain the plain category name.\r\n    const chosenSection = mainPick.label.replace(/^\\$\\(.+?\\)\\s*/, \"\");\r\n\r\n    // STEP 2: Select an Option within the Chosen Section\r\n    const subOptions = Object.keys(cellOptions[chosenSection]).map(optionKey => ({\r\n      label: optionKey,\r\n      description: `$(symbol-key) ${optionKey}`,\r\n      detail: cellOptions[chosenSection][optionKey][0] || \"\"\r\n    }));\r\n    // Also allow for a custom option.\r\n    subOptions.push({\r\n      label: \"custom...\",\r\n      description: \"Enter a custom cell option name\",\r\n      detail: \"\"\r\n    });\r\n\r\n    const subPick = await vscode.window.showQuickPick(subOptions, {\r\n      placeHolder: `Select an option under \"${chosenSection}\"`\r\n    });\r\n    if (!subPick) {\r\n      return;\r\n    }\r\n\r\n    let finalKey = subPick.label;\r\n    if (finalKey === \"custom...\") {\r\n      const custom = await vscode.window.showInputBox({\r\n        prompt: \"Enter custom option name\"\r\n      });\r\n      if (!custom) {\r\n        return;\r\n      }\r\n      finalKey = custom;\r\n    }\r\n\r\n    // STEP 3: Prompt the User for a Value\r\n    const value = await vscode.window.showInputBox({\r\n      prompt: `Set value for '${finalKey}'`,\r\n      placeHolder: \"true / false / string / number\"\r\n    });\r\n    if (value === undefined) {\r\n      return;\r\n    }\r\n\r\n    // Insert the new configuration line after the current code cell.\r\n    const insertPos = new vscode.Position(line + 1, 0);\r\n    await editor.edit(editBuilder => {\r\n      editBuilder.insert(insertPos, `#| ${finalKey}: ${value}\\n`);\r\n    });\r\n  }\r\n}\r\n\r\n// This function registers your cell options command (which is invoked by the CodeLens)\r\nexport function registerCellOptionsCommands(context: vscode.ExtensionContext): void {\r\n    const command = new ConfigureCellOptionsCommand();\r\n    const disposable = vscode.commands.registerCommand(\r\n      ConfigureCellOptionsCommand.id, \r\n      (line: number) => command.execute(line)\r\n    );\r\n    context.subscriptions.push(disposable);\r\n  }","\"use strict\";\n// Generated using scripts/write-decode-map.ts\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = new Uint16Array(\n// prettier-ignore\n\"\\u1d41<\\xd5\\u0131\\u028a\\u049d\\u057b\\u05d0\\u0675\\u06de\\u07a2\\u07d6\\u080f\\u0a4a\\u0a91\\u0da1\\u0e6d\\u0f09\\u0f26\\u10ca\\u1228\\u12e1\\u1415\\u149d\\u14c3\\u14df\\u1525\\0\\0\\0\\0\\0\\0\\u156b\\u16cd\\u198d\\u1c12\\u1ddd\\u1f7e\\u2060\\u21b0\\u228d\\u23c0\\u23fb\\u2442\\u2824\\u2912\\u2d08\\u2e48\\u2fce\\u3016\\u32ba\\u3639\\u37ac\\u38fe\\u3a28\\u3a71\\u3ae0\\u3b2e\\u0800EMabcfglmnoprstu\\\\bfms\\x7f\\x84\\x8b\\x90\\x95\\x98\\xa6\\xb3\\xb9\\xc8\\xcflig\\u803b\\xc6\\u40c6P\\u803b&\\u4026cute\\u803b\\xc1\\u40c1reve;\\u4102\\u0100iyx}rc\\u803b\\xc2\\u40c2;\\u4410r;\\uc000\\ud835\\udd04rave\\u803b\\xc0\\u40c0pha;\\u4391acr;\\u4100d;\\u6a53\\u0100gp\\x9d\\xa1on;\\u4104f;\\uc000\\ud835\\udd38plyFunction;\\u6061ing\\u803b\\xc5\\u40c5\\u0100cs\\xbe\\xc3r;\\uc000\\ud835\\udc9cign;\\u6254ilde\\u803b\\xc3\\u40c3ml\\u803b\\xc4\\u40c4\\u0400aceforsu\\xe5\\xfb\\xfe\\u0117\\u011c\\u0122\\u0127\\u012a\\u0100cr\\xea\\xf2kslash;\\u6216\\u0176\\xf6\\xf8;\\u6ae7ed;\\u6306y;\\u4411\\u0180crt\\u0105\\u010b\\u0114ause;\\u6235noullis;\\u612ca;\\u4392r;\\uc000\\ud835\\udd05pf;\\uc000\\ud835\\udd39eve;\\u42d8c\\xf2\\u0113mpeq;\\u624e\\u0700HOacdefhilorsu\\u014d\\u0151\\u0156\\u0180\\u019e\\u01a2\\u01b5\\u01b7\\u01ba\\u01dc\\u0215\\u0273\\u0278\\u027ecy;\\u4427PY\\u803b\\xa9\\u40a9\\u0180cpy\\u015d\\u0162\\u017aute;\\u4106\\u0100;i\\u0167\\u0168\\u62d2talDifferentialD;\\u6145leys;\\u612d\\u0200aeio\\u0189\\u018e\\u0194\\u0198ron;\\u410cdil\\u803b\\xc7\\u40c7rc;\\u4108nint;\\u6230ot;\\u410a\\u0100dn\\u01a7\\u01adilla;\\u40b8terDot;\\u40b7\\xf2\\u017fi;\\u43a7rcle\\u0200DMPT\\u01c7\\u01cb\\u01d1\\u01d6ot;\\u6299inus;\\u6296lus;\\u6295imes;\\u6297o\\u0100cs\\u01e2\\u01f8kwiseContourIntegral;\\u6232eCurly\\u0100DQ\\u0203\\u020foubleQuote;\\u601duote;\\u6019\\u0200lnpu\\u021e\\u0228\\u0247\\u0255on\\u0100;e\\u0225\\u0226\\u6237;\\u6a74\\u0180git\\u022f\\u0236\\u023aruent;\\u6261nt;\\u622fourIntegral;\\u622e\\u0100fr\\u024c\\u024e;\\u6102oduct;\\u6210nterClockwiseContourIntegral;\\u6233oss;\\u6a2fcr;\\uc000\\ud835\\udc9ep\\u0100;C\\u0284\\u0285\\u62d3ap;\\u624d\\u0580DJSZacefios\\u02a0\\u02ac\\u02b0\\u02b4\\u02b8\\u02cb\\u02d7\\u02e1\\u02e6\\u0333\\u048d\\u0100;o\\u0179\\u02a5trahd;\\u6911cy;\\u4402cy;\\u4405cy;\\u440f\\u0180grs\\u02bf\\u02c4\\u02c7ger;\\u6021r;\\u61a1hv;\\u6ae4\\u0100ay\\u02d0\\u02d5ron;\\u410e;\\u4414l\\u0100;t\\u02dd\\u02de\\u6207a;\\u4394r;\\uc000\\ud835\\udd07\\u0100af\\u02eb\\u0327\\u0100cm\\u02f0\\u0322ritical\\u0200ADGT\\u0300\\u0306\\u0316\\u031ccute;\\u40b4o\\u0174\\u030b\\u030d;\\u42d9bleAcute;\\u42ddrave;\\u4060ilde;\\u42dcond;\\u62c4ferentialD;\\u6146\\u0470\\u033d\\0\\0\\0\\u0342\\u0354\\0\\u0405f;\\uc000\\ud835\\udd3b\\u0180;DE\\u0348\\u0349\\u034d\\u40a8ot;\\u60dcqual;\\u6250ble\\u0300CDLRUV\\u0363\\u0372\\u0382\\u03cf\\u03e2\\u03f8ontourIntegra\\xec\\u0239o\\u0274\\u0379\\0\\0\\u037b\\xbb\\u0349nArrow;\\u61d3\\u0100eo\\u0387\\u03a4ft\\u0180ART\\u0390\\u0396\\u03a1rrow;\\u61d0ightArrow;\\u61d4e\\xe5\\u02cang\\u0100LR\\u03ab\\u03c4eft\\u0100AR\\u03b3\\u03b9rrow;\\u67f8ightArrow;\\u67faightArrow;\\u67f9ight\\u0100AT\\u03d8\\u03derrow;\\u61d2ee;\\u62a8p\\u0241\\u03e9\\0\\0\\u03efrrow;\\u61d1ownArrow;\\u61d5erticalBar;\\u6225n\\u0300ABLRTa\\u0412\\u042a\\u0430\\u045e\\u047f\\u037crrow\\u0180;BU\\u041d\\u041e\\u0422\\u6193ar;\\u6913pArrow;\\u61f5reve;\\u4311eft\\u02d2\\u043a\\0\\u0446\\0\\u0450ightVector;\\u6950eeVector;\\u695eector\\u0100;B\\u0459\\u045a\\u61bdar;\\u6956ight\\u01d4\\u0467\\0\\u0471eeVector;\\u695fector\\u0100;B\\u047a\\u047b\\u61c1ar;\\u6957ee\\u0100;A\\u0486\\u0487\\u62a4rrow;\\u61a7\\u0100ct\\u0492\\u0497r;\\uc000\\ud835\\udc9frok;\\u4110\\u0800NTacdfglmopqstux\\u04bd\\u04c0\\u04c4\\u04cb\\u04de\\u04e2\\u04e7\\u04ee\\u04f5\\u0521\\u052f\\u0536\\u0552\\u055d\\u0560\\u0565G;\\u414aH\\u803b\\xd0\\u40d0cute\\u803b\\xc9\\u40c9\\u0180aiy\\u04d2\\u04d7\\u04dcron;\\u411arc\\u803b\\xca\\u40ca;\\u442dot;\\u4116r;\\uc000\\ud835\\udd08rave\\u803b\\xc8\\u40c8ement;\\u6208\\u0100ap\\u04fa\\u04fecr;\\u4112ty\\u0253\\u0506\\0\\0\\u0512mallSquare;\\u65fberySmallSquare;\\u65ab\\u0100gp\\u0526\\u052aon;\\u4118f;\\uc000\\ud835\\udd3csilon;\\u4395u\\u0100ai\\u053c\\u0549l\\u0100;T\\u0542\\u0543\\u6a75ilde;\\u6242librium;\\u61cc\\u0100ci\\u0557\\u055ar;\\u6130m;\\u6a73a;\\u4397ml\\u803b\\xcb\\u40cb\\u0100ip\\u056a\\u056fsts;\\u6203onentialE;\\u6147\\u0280cfios\\u0585\\u0588\\u058d\\u05b2\\u05ccy;\\u4424r;\\uc000\\ud835\\udd09lled\\u0253\\u0597\\0\\0\\u05a3mallSquare;\\u65fcerySmallSquare;\\u65aa\\u0370\\u05ba\\0\\u05bf\\0\\0\\u05c4f;\\uc000\\ud835\\udd3dAll;\\u6200riertrf;\\u6131c\\xf2\\u05cb\\u0600JTabcdfgorst\\u05e8\\u05ec\\u05ef\\u05fa\\u0600\\u0612\\u0616\\u061b\\u061d\\u0623\\u066c\\u0672cy;\\u4403\\u803b>\\u403emma\\u0100;d\\u05f7\\u05f8\\u4393;\\u43dcreve;\\u411e\\u0180eiy\\u0607\\u060c\\u0610dil;\\u4122rc;\\u411c;\\u4413ot;\\u4120r;\\uc000\\ud835\\udd0a;\\u62d9pf;\\uc000\\ud835\\udd3eeater\\u0300EFGLST\\u0635\\u0644\\u064e\\u0656\\u065b\\u0666qual\\u0100;L\\u063e\\u063f\\u6265ess;\\u62dbullEqual;\\u6267reater;\\u6aa2ess;\\u6277lantEqual;\\u6a7eilde;\\u6273cr;\\uc000\\ud835\\udca2;\\u626b\\u0400Aacfiosu\\u0685\\u068b\\u0696\\u069b\\u069e\\u06aa\\u06be\\u06caRDcy;\\u442a\\u0100ct\\u0690\\u0694ek;\\u42c7;\\u405eirc;\\u4124r;\\u610clbertSpace;\\u610b\\u01f0\\u06af\\0\\u06b2f;\\u610dizontalLine;\\u6500\\u0100ct\\u06c3\\u06c5\\xf2\\u06a9rok;\\u4126mp\\u0144\\u06d0\\u06d8ownHum\\xf0\\u012fqual;\\u624f\\u0700EJOacdfgmnostu\\u06fa\\u06fe\\u0703\\u0707\\u070e\\u071a\\u071e\\u0721\\u0728\\u0744\\u0778\\u078b\\u078f\\u0795cy;\\u4415lig;\\u4132cy;\\u4401cute\\u803b\\xcd\\u40cd\\u0100iy\\u0713\\u0718rc\\u803b\\xce\\u40ce;\\u4418ot;\\u4130r;\\u6111rave\\u803b\\xcc\\u40cc\\u0180;ap\\u0720\\u072f\\u073f\\u0100cg\\u0734\\u0737r;\\u412ainaryI;\\u6148lie\\xf3\\u03dd\\u01f4\\u0749\\0\\u0762\\u0100;e\\u074d\\u074e\\u622c\\u0100gr\\u0753\\u0758ral;\\u622bsection;\\u62c2isible\\u0100CT\\u076c\\u0772omma;\\u6063imes;\\u6062\\u0180gpt\\u077f\\u0783\\u0788on;\\u412ef;\\uc000\\ud835\\udd40a;\\u4399cr;\\u6110ilde;\\u4128\\u01eb\\u079a\\0\\u079ecy;\\u4406l\\u803b\\xcf\\u40cf\\u0280cfosu\\u07ac\\u07b7\\u07bc\\u07c2\\u07d0\\u0100iy\\u07b1\\u07b5rc;\\u4134;\\u4419r;\\uc000\\ud835\\udd0dpf;\\uc000\\ud835\\udd41\\u01e3\\u07c7\\0\\u07ccr;\\uc000\\ud835\\udca5rcy;\\u4408kcy;\\u4404\\u0380HJacfos\\u07e4\\u07e8\\u07ec\\u07f1\\u07fd\\u0802\\u0808cy;\\u4425cy;\\u440cppa;\\u439a\\u0100ey\\u07f6\\u07fbdil;\\u4136;\\u441ar;\\uc000\\ud835\\udd0epf;\\uc000\\ud835\\udd42cr;\\uc000\\ud835\\udca6\\u0580JTaceflmost\\u0825\\u0829\\u082c\\u0850\\u0863\\u09b3\\u09b8\\u09c7\\u09cd\\u0a37\\u0a47cy;\\u4409\\u803b<\\u403c\\u0280cmnpr\\u0837\\u083c\\u0841\\u0844\\u084dute;\\u4139bda;\\u439bg;\\u67ealacetrf;\\u6112r;\\u619e\\u0180aey\\u0857\\u085c\\u0861ron;\\u413ddil;\\u413b;\\u441b\\u0100fs\\u0868\\u0970t\\u0500ACDFRTUVar\\u087e\\u08a9\\u08b1\\u08e0\\u08e6\\u08fc\\u092f\\u095b\\u0390\\u096a\\u0100nr\\u0883\\u088fgleBracket;\\u67e8row\\u0180;BR\\u0899\\u089a\\u089e\\u6190ar;\\u61e4ightArrow;\\u61c6eiling;\\u6308o\\u01f5\\u08b7\\0\\u08c3bleBracket;\\u67e6n\\u01d4\\u08c8\\0\\u08d2eeVector;\\u6961ector\\u0100;B\\u08db\\u08dc\\u61c3ar;\\u6959loor;\\u630aight\\u0100AV\\u08ef\\u08f5rrow;\\u6194ector;\\u694e\\u0100er\\u0901\\u0917e\\u0180;AV\\u0909\\u090a\\u0910\\u62a3rrow;\\u61a4ector;\\u695aiangle\\u0180;BE\\u0924\\u0925\\u0929\\u62b2ar;\\u69cfqual;\\u62b4p\\u0180DTV\\u0937\\u0942\\u094cownVector;\\u6951eeVector;\\u6960ector\\u0100;B\\u0956\\u0957\\u61bfar;\\u6958ector\\u0100;B\\u0965\\u0966\\u61bcar;\\u6952ight\\xe1\\u039cs\\u0300EFGLST\\u097e\\u098b\\u0995\\u099d\\u09a2\\u09adqualGreater;\\u62daullEqual;\\u6266reater;\\u6276ess;\\u6aa1lantEqual;\\u6a7dilde;\\u6272r;\\uc000\\ud835\\udd0f\\u0100;e\\u09bd\\u09be\\u62d8ftarrow;\\u61daidot;\\u413f\\u0180npw\\u09d4\\u0a16\\u0a1bg\\u0200LRlr\\u09de\\u09f7\\u0a02\\u0a10eft\\u0100AR\\u09e6\\u09ecrrow;\\u67f5ightArrow;\\u67f7ightArrow;\\u67f6eft\\u0100ar\\u03b3\\u0a0aight\\xe1\\u03bfight\\xe1\\u03caf;\\uc000\\ud835\\udd43er\\u0100LR\\u0a22\\u0a2ceftArrow;\\u6199ightArrow;\\u6198\\u0180cht\\u0a3e\\u0a40\\u0a42\\xf2\\u084c;\\u61b0rok;\\u4141;\\u626a\\u0400acefiosu\\u0a5a\\u0a5d\\u0a60\\u0a77\\u0a7c\\u0a85\\u0a8b\\u0a8ep;\\u6905y;\\u441c\\u0100dl\\u0a65\\u0a6fiumSpace;\\u605flintrf;\\u6133r;\\uc000\\ud835\\udd10nusPlus;\\u6213pf;\\uc000\\ud835\\udd44c\\xf2\\u0a76;\\u439c\\u0480Jacefostu\\u0aa3\\u0aa7\\u0aad\\u0ac0\\u0b14\\u0b19\\u0d91\\u0d97\\u0d9ecy;\\u440acute;\\u4143\\u0180aey\\u0ab4\\u0ab9\\u0aberon;\\u4147dil;\\u4145;\\u441d\\u0180gsw\\u0ac7\\u0af0\\u0b0eative\\u0180MTV\\u0ad3\\u0adf\\u0ae8ediumSpace;\\u600bhi\\u0100cn\\u0ae6\\u0ad8\\xeb\\u0ad9eryThi\\xee\\u0ad9ted\\u0100GL\\u0af8\\u0b06reaterGreate\\xf2\\u0673essLes\\xf3\\u0a48Line;\\u400ar;\\uc000\\ud835\\udd11\\u0200Bnpt\\u0b22\\u0b28\\u0b37\\u0b3areak;\\u6060BreakingSpace;\\u40a0f;\\u6115\\u0680;CDEGHLNPRSTV\\u0b55\\u0b56\\u0b6a\\u0b7c\\u0ba1\\u0beb\\u0c04\\u0c5e\\u0c84\\u0ca6\\u0cd8\\u0d61\\u0d85\\u6aec\\u0100ou\\u0b5b\\u0b64ngruent;\\u6262pCap;\\u626doubleVerticalBar;\\u6226\\u0180lqx\\u0b83\\u0b8a\\u0b9bement;\\u6209ual\\u0100;T\\u0b92\\u0b93\\u6260ilde;\\uc000\\u2242\\u0338ists;\\u6204reater\\u0380;EFGLST\\u0bb6\\u0bb7\\u0bbd\\u0bc9\\u0bd3\\u0bd8\\u0be5\\u626fqual;\\u6271ullEqual;\\uc000\\u2267\\u0338reater;\\uc000\\u226b\\u0338ess;\\u6279lantEqual;\\uc000\\u2a7e\\u0338ilde;\\u6275ump\\u0144\\u0bf2\\u0bfdownHump;\\uc000\\u224e\\u0338qual;\\uc000\\u224f\\u0338e\\u0100fs\\u0c0a\\u0c27tTriangle\\u0180;BE\\u0c1a\\u0c1b\\u0c21\\u62eaar;\\uc000\\u29cf\\u0338qual;\\u62ecs\\u0300;EGLST\\u0c35\\u0c36\\u0c3c\\u0c44\\u0c4b\\u0c58\\u626equal;\\u6270reater;\\u6278ess;\\uc000\\u226a\\u0338lantEqual;\\uc000\\u2a7d\\u0338ilde;\\u6274ested\\u0100GL\\u0c68\\u0c79reaterGreater;\\uc000\\u2aa2\\u0338essLess;\\uc000\\u2aa1\\u0338recedes\\u0180;ES\\u0c92\\u0c93\\u0c9b\\u6280qual;\\uc000\\u2aaf\\u0338lantEqual;\\u62e0\\u0100ei\\u0cab\\u0cb9verseElement;\\u620cghtTriangle\\u0180;BE\\u0ccb\\u0ccc\\u0cd2\\u62ebar;\\uc000\\u29d0\\u0338qual;\\u62ed\\u0100qu\\u0cdd\\u0d0cuareSu\\u0100bp\\u0ce8\\u0cf9set\\u0100;E\\u0cf0\\u0cf3\\uc000\\u228f\\u0338qual;\\u62e2erset\\u0100;E\\u0d03\\u0d06\\uc000\\u2290\\u0338qual;\\u62e3\\u0180bcp\\u0d13\\u0d24\\u0d4eset\\u0100;E\\u0d1b\\u0d1e\\uc000\\u2282\\u20d2qual;\\u6288ceeds\\u0200;EST\\u0d32\\u0d33\\u0d3b\\u0d46\\u6281qual;\\uc000\\u2ab0\\u0338lantEqual;\\u62e1ilde;\\uc000\\u227f\\u0338erset\\u0100;E\\u0d58\\u0d5b\\uc000\\u2283\\u20d2qual;\\u6289ilde\\u0200;EFT\\u0d6e\\u0d6f\\u0d75\\u0d7f\\u6241qual;\\u6244ullEqual;\\u6247ilde;\\u6249erticalBar;\\u6224cr;\\uc000\\ud835\\udca9ilde\\u803b\\xd1\\u40d1;\\u439d\\u0700Eacdfgmoprstuv\\u0dbd\\u0dc2\\u0dc9\\u0dd5\\u0ddb\\u0de0\\u0de7\\u0dfc\\u0e02\\u0e20\\u0e22\\u0e32\\u0e3f\\u0e44lig;\\u4152cute\\u803b\\xd3\\u40d3\\u0100iy\\u0dce\\u0dd3rc\\u803b\\xd4\\u40d4;\\u441eblac;\\u4150r;\\uc000\\ud835\\udd12rave\\u803b\\xd2\\u40d2\\u0180aei\\u0dee\\u0df2\\u0df6cr;\\u414cga;\\u43a9cron;\\u439fpf;\\uc000\\ud835\\udd46enCurly\\u0100DQ\\u0e0e\\u0e1aoubleQuote;\\u601cuote;\\u6018;\\u6a54\\u0100cl\\u0e27\\u0e2cr;\\uc000\\ud835\\udcaaash\\u803b\\xd8\\u40d8i\\u016c\\u0e37\\u0e3cde\\u803b\\xd5\\u40d5es;\\u6a37ml\\u803b\\xd6\\u40d6er\\u0100BP\\u0e4b\\u0e60\\u0100ar\\u0e50\\u0e53r;\\u603eac\\u0100ek\\u0e5a\\u0e5c;\\u63deet;\\u63b4arenthesis;\\u63dc\\u0480acfhilors\\u0e7f\\u0e87\\u0e8a\\u0e8f\\u0e92\\u0e94\\u0e9d\\u0eb0\\u0efcrtialD;\\u6202y;\\u441fr;\\uc000\\ud835\\udd13i;\\u43a6;\\u43a0usMinus;\\u40b1\\u0100ip\\u0ea2\\u0eadncareplan\\xe5\\u069df;\\u6119\\u0200;eio\\u0eb9\\u0eba\\u0ee0\\u0ee4\\u6abbcedes\\u0200;EST\\u0ec8\\u0ec9\\u0ecf\\u0eda\\u627aqual;\\u6aaflantEqual;\\u627cilde;\\u627eme;\\u6033\\u0100dp\\u0ee9\\u0eeeuct;\\u620fortion\\u0100;a\\u0225\\u0ef9l;\\u621d\\u0100ci\\u0f01\\u0f06r;\\uc000\\ud835\\udcab;\\u43a8\\u0200Ufos\\u0f11\\u0f16\\u0f1b\\u0f1fOT\\u803b\\\"\\u4022r;\\uc000\\ud835\\udd14pf;\\u611acr;\\uc000\\ud835\\udcac\\u0600BEacefhiorsu\\u0f3e\\u0f43\\u0f47\\u0f60\\u0f73\\u0fa7\\u0faa\\u0fad\\u1096\\u10a9\\u10b4\\u10bearr;\\u6910G\\u803b\\xae\\u40ae\\u0180cnr\\u0f4e\\u0f53\\u0f56ute;\\u4154g;\\u67ebr\\u0100;t\\u0f5c\\u0f5d\\u61a0l;\\u6916\\u0180aey\\u0f67\\u0f6c\\u0f71ron;\\u4158dil;\\u4156;\\u4420\\u0100;v\\u0f78\\u0f79\\u611cerse\\u0100EU\\u0f82\\u0f99\\u0100lq\\u0f87\\u0f8eement;\\u620builibrium;\\u61cbpEquilibrium;\\u696fr\\xbb\\u0f79o;\\u43a1ght\\u0400ACDFTUVa\\u0fc1\\u0feb\\u0ff3\\u1022\\u1028\\u105b\\u1087\\u03d8\\u0100nr\\u0fc6\\u0fd2gleBracket;\\u67e9row\\u0180;BL\\u0fdc\\u0fdd\\u0fe1\\u6192ar;\\u61e5eftArrow;\\u61c4eiling;\\u6309o\\u01f5\\u0ff9\\0\\u1005bleBracket;\\u67e7n\\u01d4\\u100a\\0\\u1014eeVector;\\u695dector\\u0100;B\\u101d\\u101e\\u61c2ar;\\u6955loor;\\u630b\\u0100er\\u102d\\u1043e\\u0180;AV\\u1035\\u1036\\u103c\\u62a2rrow;\\u61a6ector;\\u695biangle\\u0180;BE\\u1050\\u1051\\u1055\\u62b3ar;\\u69d0qual;\\u62b5p\\u0180DTV\\u1063\\u106e\\u1078ownVector;\\u694feeVector;\\u695cector\\u0100;B\\u1082\\u1083\\u61bear;\\u6954ector\\u0100;B\\u1091\\u1092\\u61c0ar;\\u6953\\u0100pu\\u109b\\u109ef;\\u611dndImplies;\\u6970ightarrow;\\u61db\\u0100ch\\u10b9\\u10bcr;\\u611b;\\u61b1leDelayed;\\u69f4\\u0680HOacfhimoqstu\\u10e4\\u10f1\\u10f7\\u10fd\\u1119\\u111e\\u1151\\u1156\\u1161\\u1167\\u11b5\\u11bb\\u11bf\\u0100Cc\\u10e9\\u10eeHcy;\\u4429y;\\u4428FTcy;\\u442ccute;\\u415a\\u0280;aeiy\\u1108\\u1109\\u110e\\u1113\\u1117\\u6abcron;\\u4160dil;\\u415erc;\\u415c;\\u4421r;\\uc000\\ud835\\udd16ort\\u0200DLRU\\u112a\\u1134\\u113e\\u1149ownArrow\\xbb\\u041eeftArrow\\xbb\\u089aightArrow\\xbb\\u0fddpArrow;\\u6191gma;\\u43a3allCircle;\\u6218pf;\\uc000\\ud835\\udd4a\\u0272\\u116d\\0\\0\\u1170t;\\u621aare\\u0200;ISU\\u117b\\u117c\\u1189\\u11af\\u65a1ntersection;\\u6293u\\u0100bp\\u118f\\u119eset\\u0100;E\\u1197\\u1198\\u628fqual;\\u6291erset\\u0100;E\\u11a8\\u11a9\\u6290qual;\\u6292nion;\\u6294cr;\\uc000\\ud835\\udcaear;\\u62c6\\u0200bcmp\\u11c8\\u11db\\u1209\\u120b\\u0100;s\\u11cd\\u11ce\\u62d0et\\u0100;E\\u11cd\\u11d5qual;\\u6286\\u0100ch\\u11e0\\u1205eeds\\u0200;EST\\u11ed\\u11ee\\u11f4\\u11ff\\u627bqual;\\u6ab0lantEqual;\\u627dilde;\\u627fTh\\xe1\\u0f8c;\\u6211\\u0180;es\\u1212\\u1213\\u1223\\u62d1rset\\u0100;E\\u121c\\u121d\\u6283qual;\\u6287et\\xbb\\u1213\\u0580HRSacfhiors\\u123e\\u1244\\u1249\\u1255\\u125e\\u1271\\u1276\\u129f\\u12c2\\u12c8\\u12d1ORN\\u803b\\xde\\u40deADE;\\u6122\\u0100Hc\\u124e\\u1252cy;\\u440by;\\u4426\\u0100bu\\u125a\\u125c;\\u4009;\\u43a4\\u0180aey\\u1265\\u126a\\u126fron;\\u4164dil;\\u4162;\\u4422r;\\uc000\\ud835\\udd17\\u0100ei\\u127b\\u1289\\u01f2\\u1280\\0\\u1287efore;\\u6234a;\\u4398\\u0100cn\\u128e\\u1298kSpace;\\uc000\\u205f\\u200aSpace;\\u6009lde\\u0200;EFT\\u12ab\\u12ac\\u12b2\\u12bc\\u623cqual;\\u6243ullEqual;\\u6245ilde;\\u6248pf;\\uc000\\ud835\\udd4bipleDot;\\u60db\\u0100ct\\u12d6\\u12dbr;\\uc000\\ud835\\udcafrok;\\u4166\\u0ae1\\u12f7\\u130e\\u131a\\u1326\\0\\u132c\\u1331\\0\\0\\0\\0\\0\\u1338\\u133d\\u1377\\u1385\\0\\u13ff\\u1404\\u140a\\u1410\\u0100cr\\u12fb\\u1301ute\\u803b\\xda\\u40dar\\u0100;o\\u1307\\u1308\\u619fcir;\\u6949r\\u01e3\\u1313\\0\\u1316y;\\u440eve;\\u416c\\u0100iy\\u131e\\u1323rc\\u803b\\xdb\\u40db;\\u4423blac;\\u4170r;\\uc000\\ud835\\udd18rave\\u803b\\xd9\\u40d9acr;\\u416a\\u0100di\\u1341\\u1369er\\u0100BP\\u1348\\u135d\\u0100ar\\u134d\\u1350r;\\u405fac\\u0100ek\\u1357\\u1359;\\u63dfet;\\u63b5arenthesis;\\u63ddon\\u0100;P\\u1370\\u1371\\u62c3lus;\\u628e\\u0100gp\\u137b\\u137fon;\\u4172f;\\uc000\\ud835\\udd4c\\u0400ADETadps\\u1395\\u13ae\\u13b8\\u13c4\\u03e8\\u13d2\\u13d7\\u13f3rrow\\u0180;BD\\u1150\\u13a0\\u13a4ar;\\u6912ownArrow;\\u61c5ownArrow;\\u6195quilibrium;\\u696eee\\u0100;A\\u13cb\\u13cc\\u62a5rrow;\\u61a5own\\xe1\\u03f3er\\u0100LR\\u13de\\u13e8eftArrow;\\u6196ightArrow;\\u6197i\\u0100;l\\u13f9\\u13fa\\u43d2on;\\u43a5ing;\\u416ecr;\\uc000\\ud835\\udcb0ilde;\\u4168ml\\u803b\\xdc\\u40dc\\u0480Dbcdefosv\\u1427\\u142c\\u1430\\u1433\\u143e\\u1485\\u148a\\u1490\\u1496ash;\\u62abar;\\u6aeby;\\u4412ash\\u0100;l\\u143b\\u143c\\u62a9;\\u6ae6\\u0100er\\u1443\\u1445;\\u62c1\\u0180bty\\u144c\\u1450\\u147aar;\\u6016\\u0100;i\\u144f\\u1455cal\\u0200BLST\\u1461\\u1465\\u146a\\u1474ar;\\u6223ine;\\u407ceparator;\\u6758ilde;\\u6240ThinSpace;\\u600ar;\\uc000\\ud835\\udd19pf;\\uc000\\ud835\\udd4dcr;\\uc000\\ud835\\udcb1dash;\\u62aa\\u0280cefos\\u14a7\\u14ac\\u14b1\\u14b6\\u14bcirc;\\u4174dge;\\u62c0r;\\uc000\\ud835\\udd1apf;\\uc000\\ud835\\udd4ecr;\\uc000\\ud835\\udcb2\\u0200fios\\u14cb\\u14d0\\u14d2\\u14d8r;\\uc000\\ud835\\udd1b;\\u439epf;\\uc000\\ud835\\udd4fcr;\\uc000\\ud835\\udcb3\\u0480AIUacfosu\\u14f1\\u14f5\\u14f9\\u14fd\\u1504\\u150f\\u1514\\u151a\\u1520cy;\\u442fcy;\\u4407cy;\\u442ecute\\u803b\\xdd\\u40dd\\u0100iy\\u1509\\u150drc;\\u4176;\\u442br;\\uc000\\ud835\\udd1cpf;\\uc000\\ud835\\udd50cr;\\uc000\\ud835\\udcb4ml;\\u4178\\u0400Hacdefos\\u1535\\u1539\\u153f\\u154b\\u154f\\u155d\\u1560\\u1564cy;\\u4416cute;\\u4179\\u0100ay\\u1544\\u1549ron;\\u417d;\\u4417ot;\\u417b\\u01f2\\u1554\\0\\u155boWidt\\xe8\\u0ad9a;\\u4396r;\\u6128pf;\\u6124cr;\\uc000\\ud835\\udcb5\\u0be1\\u1583\\u158a\\u1590\\0\\u15b0\\u15b6\\u15bf\\0\\0\\0\\0\\u15c6\\u15db\\u15eb\\u165f\\u166d\\0\\u1695\\u169b\\u16b2\\u16b9\\0\\u16becute\\u803b\\xe1\\u40e1reve;\\u4103\\u0300;Ediuy\\u159c\\u159d\\u15a1\\u15a3\\u15a8\\u15ad\\u623e;\\uc000\\u223e\\u0333;\\u623frc\\u803b\\xe2\\u40e2te\\u80bb\\xb4\\u0306;\\u4430lig\\u803b\\xe6\\u40e6\\u0100;r\\xb2\\u15ba;\\uc000\\ud835\\udd1erave\\u803b\\xe0\\u40e0\\u0100ep\\u15ca\\u15d6\\u0100fp\\u15cf\\u15d4sym;\\u6135\\xe8\\u15d3ha;\\u43b1\\u0100ap\\u15dfc\\u0100cl\\u15e4\\u15e7r;\\u4101g;\\u6a3f\\u0264\\u15f0\\0\\0\\u160a\\u0280;adsv\\u15fa\\u15fb\\u15ff\\u1601\\u1607\\u6227nd;\\u6a55;\\u6a5clope;\\u6a58;\\u6a5a\\u0380;elmrsz\\u1618\\u1619\\u161b\\u161e\\u163f\\u164f\\u1659\\u6220;\\u69a4e\\xbb\\u1619sd\\u0100;a\\u1625\\u1626\\u6221\\u0461\\u1630\\u1632\\u1634\\u1636\\u1638\\u163a\\u163c\\u163e;\\u69a8;\\u69a9;\\u69aa;\\u69ab;\\u69ac;\\u69ad;\\u69ae;\\u69aft\\u0100;v\\u1645\\u1646\\u621fb\\u0100;d\\u164c\\u164d\\u62be;\\u699d\\u0100pt\\u1654\\u1657h;\\u6222\\xbb\\xb9arr;\\u637c\\u0100gp\\u1663\\u1667on;\\u4105f;\\uc000\\ud835\\udd52\\u0380;Eaeiop\\u12c1\\u167b\\u167d\\u1682\\u1684\\u1687\\u168a;\\u6a70cir;\\u6a6f;\\u624ad;\\u624bs;\\u4027rox\\u0100;e\\u12c1\\u1692\\xf1\\u1683ing\\u803b\\xe5\\u40e5\\u0180cty\\u16a1\\u16a6\\u16a8r;\\uc000\\ud835\\udcb6;\\u402amp\\u0100;e\\u12c1\\u16af\\xf1\\u0288ilde\\u803b\\xe3\\u40e3ml\\u803b\\xe4\\u40e4\\u0100ci\\u16c2\\u16c8onin\\xf4\\u0272nt;\\u6a11\\u0800Nabcdefiklnoprsu\\u16ed\\u16f1\\u1730\\u173c\\u1743\\u1748\\u1778\\u177d\\u17e0\\u17e6\\u1839\\u1850\\u170d\\u193d\\u1948\\u1970ot;\\u6aed\\u0100cr\\u16f6\\u171ek\\u0200ceps\\u1700\\u1705\\u170d\\u1713ong;\\u624cpsilon;\\u43f6rime;\\u6035im\\u0100;e\\u171a\\u171b\\u623dq;\\u62cd\\u0176\\u1722\\u1726ee;\\u62bded\\u0100;g\\u172c\\u172d\\u6305e\\xbb\\u172drk\\u0100;t\\u135c\\u1737brk;\\u63b6\\u0100oy\\u1701\\u1741;\\u4431quo;\\u601e\\u0280cmprt\\u1753\\u175b\\u1761\\u1764\\u1768aus\\u0100;e\\u010a\\u0109ptyv;\\u69b0s\\xe9\\u170cno\\xf5\\u0113\\u0180ahw\\u176f\\u1771\\u1773;\\u43b2;\\u6136een;\\u626cr;\\uc000\\ud835\\udd1fg\\u0380costuvw\\u178d\\u179d\\u17b3\\u17c1\\u17d5\\u17db\\u17de\\u0180aiu\\u1794\\u1796\\u179a\\xf0\\u0760rc;\\u65efp\\xbb\\u1371\\u0180dpt\\u17a4\\u17a8\\u17adot;\\u6a00lus;\\u6a01imes;\\u6a02\\u0271\\u17b9\\0\\0\\u17becup;\\u6a06ar;\\u6605riangle\\u0100du\\u17cd\\u17d2own;\\u65bdp;\\u65b3plus;\\u6a04e\\xe5\\u1444\\xe5\\u14adarow;\\u690d\\u0180ako\\u17ed\\u1826\\u1835\\u0100cn\\u17f2\\u1823k\\u0180lst\\u17fa\\u05ab\\u1802ozenge;\\u69ebriangle\\u0200;dlr\\u1812\\u1813\\u1818\\u181d\\u65b4own;\\u65beeft;\\u65c2ight;\\u65b8k;\\u6423\\u01b1\\u182b\\0\\u1833\\u01b2\\u182f\\0\\u1831;\\u6592;\\u65914;\\u6593ck;\\u6588\\u0100eo\\u183e\\u184d\\u0100;q\\u1843\\u1846\\uc000=\\u20e5uiv;\\uc000\\u2261\\u20e5t;\\u6310\\u0200ptwx\\u1859\\u185e\\u1867\\u186cf;\\uc000\\ud835\\udd53\\u0100;t\\u13cb\\u1863om\\xbb\\u13cctie;\\u62c8\\u0600DHUVbdhmptuv\\u1885\\u1896\\u18aa\\u18bb\\u18d7\\u18db\\u18ec\\u18ff\\u1905\\u190a\\u1910\\u1921\\u0200LRlr\\u188e\\u1890\\u1892\\u1894;\\u6557;\\u6554;\\u6556;\\u6553\\u0280;DUdu\\u18a1\\u18a2\\u18a4\\u18a6\\u18a8\\u6550;\\u6566;\\u6569;\\u6564;\\u6567\\u0200LRlr\\u18b3\\u18b5\\u18b7\\u18b9;\\u655d;\\u655a;\\u655c;\\u6559\\u0380;HLRhlr\\u18ca\\u18cb\\u18cd\\u18cf\\u18d1\\u18d3\\u18d5\\u6551;\\u656c;\\u6563;\\u6560;\\u656b;\\u6562;\\u655fox;\\u69c9\\u0200LRlr\\u18e4\\u18e6\\u18e8\\u18ea;\\u6555;\\u6552;\\u6510;\\u650c\\u0280;DUdu\\u06bd\\u18f7\\u18f9\\u18fb\\u18fd;\\u6565;\\u6568;\\u652c;\\u6534inus;\\u629flus;\\u629eimes;\\u62a0\\u0200LRlr\\u1919\\u191b\\u191d\\u191f;\\u655b;\\u6558;\\u6518;\\u6514\\u0380;HLRhlr\\u1930\\u1931\\u1933\\u1935\\u1937\\u1939\\u193b\\u6502;\\u656a;\\u6561;\\u655e;\\u653c;\\u6524;\\u651c\\u0100ev\\u0123\\u1942bar\\u803b\\xa6\\u40a6\\u0200ceio\\u1951\\u1956\\u195a\\u1960r;\\uc000\\ud835\\udcb7mi;\\u604fm\\u0100;e\\u171a\\u171cl\\u0180;bh\\u1968\\u1969\\u196b\\u405c;\\u69c5sub;\\u67c8\\u016c\\u1974\\u197el\\u0100;e\\u1979\\u197a\\u6022t\\xbb\\u197ap\\u0180;Ee\\u012f\\u1985\\u1987;\\u6aae\\u0100;q\\u06dc\\u06db\\u0ce1\\u19a7\\0\\u19e8\\u1a11\\u1a15\\u1a32\\0\\u1a37\\u1a50\\0\\0\\u1ab4\\0\\0\\u1ac1\\0\\0\\u1b21\\u1b2e\\u1b4d\\u1b52\\0\\u1bfd\\0\\u1c0c\\u0180cpr\\u19ad\\u19b2\\u19ddute;\\u4107\\u0300;abcds\\u19bf\\u19c0\\u19c4\\u19ca\\u19d5\\u19d9\\u6229nd;\\u6a44rcup;\\u6a49\\u0100au\\u19cf\\u19d2p;\\u6a4bp;\\u6a47ot;\\u6a40;\\uc000\\u2229\\ufe00\\u0100eo\\u19e2\\u19e5t;\\u6041\\xee\\u0693\\u0200aeiu\\u19f0\\u19fb\\u1a01\\u1a05\\u01f0\\u19f5\\0\\u19f8s;\\u6a4don;\\u410ddil\\u803b\\xe7\\u40e7rc;\\u4109ps\\u0100;s\\u1a0c\\u1a0d\\u6a4cm;\\u6a50ot;\\u410b\\u0180dmn\\u1a1b\\u1a20\\u1a26il\\u80bb\\xb8\\u01adptyv;\\u69b2t\\u8100\\xa2;e\\u1a2d\\u1a2e\\u40a2r\\xe4\\u01b2r;\\uc000\\ud835\\udd20\\u0180cei\\u1a3d\\u1a40\\u1a4dy;\\u4447ck\\u0100;m\\u1a47\\u1a48\\u6713ark\\xbb\\u1a48;\\u43c7r\\u0380;Ecefms\\u1a5f\\u1a60\\u1a62\\u1a6b\\u1aa4\\u1aaa\\u1aae\\u65cb;\\u69c3\\u0180;el\\u1a69\\u1a6a\\u1a6d\\u42c6q;\\u6257e\\u0261\\u1a74\\0\\0\\u1a88rrow\\u0100lr\\u1a7c\\u1a81eft;\\u61baight;\\u61bb\\u0280RSacd\\u1a92\\u1a94\\u1a96\\u1a9a\\u1a9f\\xbb\\u0f47;\\u64c8st;\\u629birc;\\u629aash;\\u629dnint;\\u6a10id;\\u6aefcir;\\u69c2ubs\\u0100;u\\u1abb\\u1abc\\u6663it\\xbb\\u1abc\\u02ec\\u1ac7\\u1ad4\\u1afa\\0\\u1b0aon\\u0100;e\\u1acd\\u1ace\\u403a\\u0100;q\\xc7\\xc6\\u026d\\u1ad9\\0\\0\\u1ae2a\\u0100;t\\u1ade\\u1adf\\u402c;\\u4040\\u0180;fl\\u1ae8\\u1ae9\\u1aeb\\u6201\\xee\\u1160e\\u0100mx\\u1af1\\u1af6ent\\xbb\\u1ae9e\\xf3\\u024d\\u01e7\\u1afe\\0\\u1b07\\u0100;d\\u12bb\\u1b02ot;\\u6a6dn\\xf4\\u0246\\u0180fry\\u1b10\\u1b14\\u1b17;\\uc000\\ud835\\udd54o\\xe4\\u0254\\u8100\\xa9;s\\u0155\\u1b1dr;\\u6117\\u0100ao\\u1b25\\u1b29rr;\\u61b5ss;\\u6717\\u0100cu\\u1b32\\u1b37r;\\uc000\\ud835\\udcb8\\u0100bp\\u1b3c\\u1b44\\u0100;e\\u1b41\\u1b42\\u6acf;\\u6ad1\\u0100;e\\u1b49\\u1b4a\\u6ad0;\\u6ad2dot;\\u62ef\\u0380delprvw\\u1b60\\u1b6c\\u1b77\\u1b82\\u1bac\\u1bd4\\u1bf9arr\\u0100lr\\u1b68\\u1b6a;\\u6938;\\u6935\\u0270\\u1b72\\0\\0\\u1b75r;\\u62dec;\\u62dfarr\\u0100;p\\u1b7f\\u1b80\\u61b6;\\u693d\\u0300;bcdos\\u1b8f\\u1b90\\u1b96\\u1ba1\\u1ba5\\u1ba8\\u622arcap;\\u6a48\\u0100au\\u1b9b\\u1b9ep;\\u6a46p;\\u6a4aot;\\u628dr;\\u6a45;\\uc000\\u222a\\ufe00\\u0200alrv\\u1bb5\\u1bbf\\u1bde\\u1be3rr\\u0100;m\\u1bbc\\u1bbd\\u61b7;\\u693cy\\u0180evw\\u1bc7\\u1bd4\\u1bd8q\\u0270\\u1bce\\0\\0\\u1bd2re\\xe3\\u1b73u\\xe3\\u1b75ee;\\u62ceedge;\\u62cfen\\u803b\\xa4\\u40a4earrow\\u0100lr\\u1bee\\u1bf3eft\\xbb\\u1b80ight\\xbb\\u1bbde\\xe4\\u1bdd\\u0100ci\\u1c01\\u1c07onin\\xf4\\u01f7nt;\\u6231lcty;\\u632d\\u0980AHabcdefhijlorstuwz\\u1c38\\u1c3b\\u1c3f\\u1c5d\\u1c69\\u1c75\\u1c8a\\u1c9e\\u1cac\\u1cb7\\u1cfb\\u1cff\\u1d0d\\u1d7b\\u1d91\\u1dab\\u1dbb\\u1dc6\\u1dcdr\\xf2\\u0381ar;\\u6965\\u0200glrs\\u1c48\\u1c4d\\u1c52\\u1c54ger;\\u6020eth;\\u6138\\xf2\\u1133h\\u0100;v\\u1c5a\\u1c5b\\u6010\\xbb\\u090a\\u016b\\u1c61\\u1c67arow;\\u690fa\\xe3\\u0315\\u0100ay\\u1c6e\\u1c73ron;\\u410f;\\u4434\\u0180;ao\\u0332\\u1c7c\\u1c84\\u0100gr\\u02bf\\u1c81r;\\u61catseq;\\u6a77\\u0180glm\\u1c91\\u1c94\\u1c98\\u803b\\xb0\\u40b0ta;\\u43b4ptyv;\\u69b1\\u0100ir\\u1ca3\\u1ca8sht;\\u697f;\\uc000\\ud835\\udd21ar\\u0100lr\\u1cb3\\u1cb5\\xbb\\u08dc\\xbb\\u101e\\u0280aegsv\\u1cc2\\u0378\\u1cd6\\u1cdc\\u1ce0m\\u0180;os\\u0326\\u1cca\\u1cd4nd\\u0100;s\\u0326\\u1cd1uit;\\u6666amma;\\u43ddin;\\u62f2\\u0180;io\\u1ce7\\u1ce8\\u1cf8\\u40f7de\\u8100\\xf7;o\\u1ce7\\u1cf0ntimes;\\u62c7n\\xf8\\u1cf7cy;\\u4452c\\u026f\\u1d06\\0\\0\\u1d0arn;\\u631eop;\\u630d\\u0280lptuw\\u1d18\\u1d1d\\u1d22\\u1d49\\u1d55lar;\\u4024f;\\uc000\\ud835\\udd55\\u0280;emps\\u030b\\u1d2d\\u1d37\\u1d3d\\u1d42q\\u0100;d\\u0352\\u1d33ot;\\u6251inus;\\u6238lus;\\u6214quare;\\u62a1blebarwedg\\xe5\\xfan\\u0180adh\\u112e\\u1d5d\\u1d67ownarrow\\xf3\\u1c83arpoon\\u0100lr\\u1d72\\u1d76ef\\xf4\\u1cb4igh\\xf4\\u1cb6\\u0162\\u1d7f\\u1d85karo\\xf7\\u0f42\\u026f\\u1d8a\\0\\0\\u1d8ern;\\u631fop;\\u630c\\u0180cot\\u1d98\\u1da3\\u1da6\\u0100ry\\u1d9d\\u1da1;\\uc000\\ud835\\udcb9;\\u4455l;\\u69f6rok;\\u4111\\u0100dr\\u1db0\\u1db4ot;\\u62f1i\\u0100;f\\u1dba\\u1816\\u65bf\\u0100ah\\u1dc0\\u1dc3r\\xf2\\u0429a\\xf2\\u0fa6angle;\\u69a6\\u0100ci\\u1dd2\\u1dd5y;\\u445fgrarr;\\u67ff\\u0900Dacdefglmnopqrstux\\u1e01\\u1e09\\u1e19\\u1e38\\u0578\\u1e3c\\u1e49\\u1e61\\u1e7e\\u1ea5\\u1eaf\\u1ebd\\u1ee1\\u1f2a\\u1f37\\u1f44\\u1f4e\\u1f5a\\u0100Do\\u1e06\\u1d34o\\xf4\\u1c89\\u0100cs\\u1e0e\\u1e14ute\\u803b\\xe9\\u40e9ter;\\u6a6e\\u0200aioy\\u1e22\\u1e27\\u1e31\\u1e36ron;\\u411br\\u0100;c\\u1e2d\\u1e2e\\u6256\\u803b\\xea\\u40ealon;\\u6255;\\u444dot;\\u4117\\u0100Dr\\u1e41\\u1e45ot;\\u6252;\\uc000\\ud835\\udd22\\u0180;rs\\u1e50\\u1e51\\u1e57\\u6a9aave\\u803b\\xe8\\u40e8\\u0100;d\\u1e5c\\u1e5d\\u6a96ot;\\u6a98\\u0200;ils\\u1e6a\\u1e6b\\u1e72\\u1e74\\u6a99nters;\\u63e7;\\u6113\\u0100;d\\u1e79\\u1e7a\\u6a95ot;\\u6a97\\u0180aps\\u1e85\\u1e89\\u1e97cr;\\u4113ty\\u0180;sv\\u1e92\\u1e93\\u1e95\\u6205et\\xbb\\u1e93p\\u01001;\\u1e9d\\u1ea4\\u0133\\u1ea1\\u1ea3;\\u6004;\\u6005\\u6003\\u0100gs\\u1eaa\\u1eac;\\u414bp;\\u6002\\u0100gp\\u1eb4\\u1eb8on;\\u4119f;\\uc000\\ud835\\udd56\\u0180als\\u1ec4\\u1ece\\u1ed2r\\u0100;s\\u1eca\\u1ecb\\u62d5l;\\u69e3us;\\u6a71i\\u0180;lv\\u1eda\\u1edb\\u1edf\\u43b5on\\xbb\\u1edb;\\u43f5\\u0200csuv\\u1eea\\u1ef3\\u1f0b\\u1f23\\u0100io\\u1eef\\u1e31rc\\xbb\\u1e2e\\u0269\\u1ef9\\0\\0\\u1efb\\xed\\u0548ant\\u0100gl\\u1f02\\u1f06tr\\xbb\\u1e5dess\\xbb\\u1e7a\\u0180aei\\u1f12\\u1f16\\u1f1als;\\u403dst;\\u625fv\\u0100;D\\u0235\\u1f20D;\\u6a78parsl;\\u69e5\\u0100Da\\u1f2f\\u1f33ot;\\u6253rr;\\u6971\\u0180cdi\\u1f3e\\u1f41\\u1ef8r;\\u612fo\\xf4\\u0352\\u0100ah\\u1f49\\u1f4b;\\u43b7\\u803b\\xf0\\u40f0\\u0100mr\\u1f53\\u1f57l\\u803b\\xeb\\u40ebo;\\u60ac\\u0180cip\\u1f61\\u1f64\\u1f67l;\\u4021s\\xf4\\u056e\\u0100eo\\u1f6c\\u1f74ctatio\\xee\\u0559nential\\xe5\\u0579\\u09e1\\u1f92\\0\\u1f9e\\0\\u1fa1\\u1fa7\\0\\0\\u1fc6\\u1fcc\\0\\u1fd3\\0\\u1fe6\\u1fea\\u2000\\0\\u2008\\u205allingdotse\\xf1\\u1e44y;\\u4444male;\\u6640\\u0180ilr\\u1fad\\u1fb3\\u1fc1lig;\\u8000\\ufb03\\u0269\\u1fb9\\0\\0\\u1fbdg;\\u8000\\ufb00ig;\\u8000\\ufb04;\\uc000\\ud835\\udd23lig;\\u8000\\ufb01lig;\\uc000fj\\u0180alt\\u1fd9\\u1fdc\\u1fe1t;\\u666dig;\\u8000\\ufb02ns;\\u65b1of;\\u4192\\u01f0\\u1fee\\0\\u1ff3f;\\uc000\\ud835\\udd57\\u0100ak\\u05bf\\u1ff7\\u0100;v\\u1ffc\\u1ffd\\u62d4;\\u6ad9artint;\\u6a0d\\u0100ao\\u200c\\u2055\\u0100cs\\u2011\\u2052\\u03b1\\u201a\\u2030\\u2038\\u2045\\u2048\\0\\u2050\\u03b2\\u2022\\u2025\\u2027\\u202a\\u202c\\0\\u202e\\u803b\\xbd\\u40bd;\\u6153\\u803b\\xbc\\u40bc;\\u6155;\\u6159;\\u615b\\u01b3\\u2034\\0\\u2036;\\u6154;\\u6156\\u02b4\\u203e\\u2041\\0\\0\\u2043\\u803b\\xbe\\u40be;\\u6157;\\u615c5;\\u6158\\u01b6\\u204c\\0\\u204e;\\u615a;\\u615d8;\\u615el;\\u6044wn;\\u6322cr;\\uc000\\ud835\\udcbb\\u0880Eabcdefgijlnorstv\\u2082\\u2089\\u209f\\u20a5\\u20b0\\u20b4\\u20f0\\u20f5\\u20fa\\u20ff\\u2103\\u2112\\u2138\\u0317\\u213e\\u2152\\u219e\\u0100;l\\u064d\\u2087;\\u6a8c\\u0180cmp\\u2090\\u2095\\u209dute;\\u41f5ma\\u0100;d\\u209c\\u1cda\\u43b3;\\u6a86reve;\\u411f\\u0100iy\\u20aa\\u20aerc;\\u411d;\\u4433ot;\\u4121\\u0200;lqs\\u063e\\u0642\\u20bd\\u20c9\\u0180;qs\\u063e\\u064c\\u20c4lan\\xf4\\u0665\\u0200;cdl\\u0665\\u20d2\\u20d5\\u20e5c;\\u6aa9ot\\u0100;o\\u20dc\\u20dd\\u6a80\\u0100;l\\u20e2\\u20e3\\u6a82;\\u6a84\\u0100;e\\u20ea\\u20ed\\uc000\\u22db\\ufe00s;\\u6a94r;\\uc000\\ud835\\udd24\\u0100;g\\u0673\\u061bmel;\\u6137cy;\\u4453\\u0200;Eaj\\u065a\\u210c\\u210e\\u2110;\\u6a92;\\u6aa5;\\u6aa4\\u0200Eaes\\u211b\\u211d\\u2129\\u2134;\\u6269p\\u0100;p\\u2123\\u2124\\u6a8arox\\xbb\\u2124\\u0100;q\\u212e\\u212f\\u6a88\\u0100;q\\u212e\\u211bim;\\u62e7pf;\\uc000\\ud835\\udd58\\u0100ci\\u2143\\u2146r;\\u610am\\u0180;el\\u066b\\u214e\\u2150;\\u6a8e;\\u6a90\\u8300>;cdlqr\\u05ee\\u2160\\u216a\\u216e\\u2173\\u2179\\u0100ci\\u2165\\u2167;\\u6aa7r;\\u6a7aot;\\u62d7Par;\\u6995uest;\\u6a7c\\u0280adels\\u2184\\u216a\\u2190\\u0656\\u219b\\u01f0\\u2189\\0\\u218epro\\xf8\\u209er;\\u6978q\\u0100lq\\u063f\\u2196les\\xf3\\u2088i\\xed\\u066b\\u0100en\\u21a3\\u21adrtneqq;\\uc000\\u2269\\ufe00\\xc5\\u21aa\\u0500Aabcefkosy\\u21c4\\u21c7\\u21f1\\u21f5\\u21fa\\u2218\\u221d\\u222f\\u2268\\u227dr\\xf2\\u03a0\\u0200ilmr\\u21d0\\u21d4\\u21d7\\u21dbrs\\xf0\\u1484f\\xbb\\u2024il\\xf4\\u06a9\\u0100dr\\u21e0\\u21e4cy;\\u444a\\u0180;cw\\u08f4\\u21eb\\u21efir;\\u6948;\\u61adar;\\u610firc;\\u4125\\u0180alr\\u2201\\u220e\\u2213rts\\u0100;u\\u2209\\u220a\\u6665it\\xbb\\u220alip;\\u6026con;\\u62b9r;\\uc000\\ud835\\udd25s\\u0100ew\\u2223\\u2229arow;\\u6925arow;\\u6926\\u0280amopr\\u223a\\u223e\\u2243\\u225e\\u2263rr;\\u61fftht;\\u623bk\\u0100lr\\u2249\\u2253eftarrow;\\u61a9ightarrow;\\u61aaf;\\uc000\\ud835\\udd59bar;\\u6015\\u0180clt\\u226f\\u2274\\u2278r;\\uc000\\ud835\\udcbdas\\xe8\\u21f4rok;\\u4127\\u0100bp\\u2282\\u2287ull;\\u6043hen\\xbb\\u1c5b\\u0ae1\\u22a3\\0\\u22aa\\0\\u22b8\\u22c5\\u22ce\\0\\u22d5\\u22f3\\0\\0\\u22f8\\u2322\\u2367\\u2362\\u237f\\0\\u2386\\u23aa\\u23b4cute\\u803b\\xed\\u40ed\\u0180;iy\\u0771\\u22b0\\u22b5rc\\u803b\\xee\\u40ee;\\u4438\\u0100cx\\u22bc\\u22bfy;\\u4435cl\\u803b\\xa1\\u40a1\\u0100fr\\u039f\\u22c9;\\uc000\\ud835\\udd26rave\\u803b\\xec\\u40ec\\u0200;ino\\u073e\\u22dd\\u22e9\\u22ee\\u0100in\\u22e2\\u22e6nt;\\u6a0ct;\\u622dfin;\\u69dcta;\\u6129lig;\\u4133\\u0180aop\\u22fe\\u231a\\u231d\\u0180cgt\\u2305\\u2308\\u2317r;\\u412b\\u0180elp\\u071f\\u230f\\u2313in\\xe5\\u078ear\\xf4\\u0720h;\\u4131f;\\u62b7ed;\\u41b5\\u0280;cfot\\u04f4\\u232c\\u2331\\u233d\\u2341are;\\u6105in\\u0100;t\\u2338\\u2339\\u621eie;\\u69dddo\\xf4\\u2319\\u0280;celp\\u0757\\u234c\\u2350\\u235b\\u2361al;\\u62ba\\u0100gr\\u2355\\u2359er\\xf3\\u1563\\xe3\\u234darhk;\\u6a17rod;\\u6a3c\\u0200cgpt\\u236f\\u2372\\u2376\\u237by;\\u4451on;\\u412ff;\\uc000\\ud835\\udd5aa;\\u43b9uest\\u803b\\xbf\\u40bf\\u0100ci\\u238a\\u238fr;\\uc000\\ud835\\udcben\\u0280;Edsv\\u04f4\\u239b\\u239d\\u23a1\\u04f3;\\u62f9ot;\\u62f5\\u0100;v\\u23a6\\u23a7\\u62f4;\\u62f3\\u0100;i\\u0777\\u23aelde;\\u4129\\u01eb\\u23b8\\0\\u23bccy;\\u4456l\\u803b\\xef\\u40ef\\u0300cfmosu\\u23cc\\u23d7\\u23dc\\u23e1\\u23e7\\u23f5\\u0100iy\\u23d1\\u23d5rc;\\u4135;\\u4439r;\\uc000\\ud835\\udd27ath;\\u4237pf;\\uc000\\ud835\\udd5b\\u01e3\\u23ec\\0\\u23f1r;\\uc000\\ud835\\udcbfrcy;\\u4458kcy;\\u4454\\u0400acfghjos\\u240b\\u2416\\u2422\\u2427\\u242d\\u2431\\u2435\\u243bppa\\u0100;v\\u2413\\u2414\\u43ba;\\u43f0\\u0100ey\\u241b\\u2420dil;\\u4137;\\u443ar;\\uc000\\ud835\\udd28reen;\\u4138cy;\\u4445cy;\\u445cpf;\\uc000\\ud835\\udd5ccr;\\uc000\\ud835\\udcc0\\u0b80ABEHabcdefghjlmnoprstuv\\u2470\\u2481\\u2486\\u248d\\u2491\\u250e\\u253d\\u255a\\u2580\\u264e\\u265e\\u2665\\u2679\\u267d\\u269a\\u26b2\\u26d8\\u275d\\u2768\\u278b\\u27c0\\u2801\\u2812\\u0180art\\u2477\\u247a\\u247cr\\xf2\\u09c6\\xf2\\u0395ail;\\u691barr;\\u690e\\u0100;g\\u0994\\u248b;\\u6a8bar;\\u6962\\u0963\\u24a5\\0\\u24aa\\0\\u24b1\\0\\0\\0\\0\\0\\u24b5\\u24ba\\0\\u24c6\\u24c8\\u24cd\\0\\u24f9ute;\\u413amptyv;\\u69b4ra\\xee\\u084cbda;\\u43bbg\\u0180;dl\\u088e\\u24c1\\u24c3;\\u6991\\xe5\\u088e;\\u6a85uo\\u803b\\xab\\u40abr\\u0400;bfhlpst\\u0899\\u24de\\u24e6\\u24e9\\u24eb\\u24ee\\u24f1\\u24f5\\u0100;f\\u089d\\u24e3s;\\u691fs;\\u691d\\xeb\\u2252p;\\u61abl;\\u6939im;\\u6973l;\\u61a2\\u0180;ae\\u24ff\\u2500\\u2504\\u6aabil;\\u6919\\u0100;s\\u2509\\u250a\\u6aad;\\uc000\\u2aad\\ufe00\\u0180abr\\u2515\\u2519\\u251drr;\\u690crk;\\u6772\\u0100ak\\u2522\\u252cc\\u0100ek\\u2528\\u252a;\\u407b;\\u405b\\u0100es\\u2531\\u2533;\\u698bl\\u0100du\\u2539\\u253b;\\u698f;\\u698d\\u0200aeuy\\u2546\\u254b\\u2556\\u2558ron;\\u413e\\u0100di\\u2550\\u2554il;\\u413c\\xec\\u08b0\\xe2\\u2529;\\u443b\\u0200cqrs\\u2563\\u2566\\u256d\\u257da;\\u6936uo\\u0100;r\\u0e19\\u1746\\u0100du\\u2572\\u2577har;\\u6967shar;\\u694bh;\\u61b2\\u0280;fgqs\\u258b\\u258c\\u0989\\u25f3\\u25ff\\u6264t\\u0280ahlrt\\u2598\\u25a4\\u25b7\\u25c2\\u25e8rrow\\u0100;t\\u0899\\u25a1a\\xe9\\u24f6arpoon\\u0100du\\u25af\\u25b4own\\xbb\\u045ap\\xbb\\u0966eftarrows;\\u61c7ight\\u0180ahs\\u25cd\\u25d6\\u25derrow\\u0100;s\\u08f4\\u08a7arpoon\\xf3\\u0f98quigarro\\xf7\\u21f0hreetimes;\\u62cb\\u0180;qs\\u258b\\u0993\\u25falan\\xf4\\u09ac\\u0280;cdgs\\u09ac\\u260a\\u260d\\u261d\\u2628c;\\u6aa8ot\\u0100;o\\u2614\\u2615\\u6a7f\\u0100;r\\u261a\\u261b\\u6a81;\\u6a83\\u0100;e\\u2622\\u2625\\uc000\\u22da\\ufe00s;\\u6a93\\u0280adegs\\u2633\\u2639\\u263d\\u2649\\u264bppro\\xf8\\u24c6ot;\\u62d6q\\u0100gq\\u2643\\u2645\\xf4\\u0989gt\\xf2\\u248c\\xf4\\u099bi\\xed\\u09b2\\u0180ilr\\u2655\\u08e1\\u265asht;\\u697c;\\uc000\\ud835\\udd29\\u0100;E\\u099c\\u2663;\\u6a91\\u0161\\u2669\\u2676r\\u0100du\\u25b2\\u266e\\u0100;l\\u0965\\u2673;\\u696alk;\\u6584cy;\\u4459\\u0280;acht\\u0a48\\u2688\\u268b\\u2691\\u2696r\\xf2\\u25c1orne\\xf2\\u1d08ard;\\u696bri;\\u65fa\\u0100io\\u269f\\u26a4dot;\\u4140ust\\u0100;a\\u26ac\\u26ad\\u63b0che\\xbb\\u26ad\\u0200Eaes\\u26bb\\u26bd\\u26c9\\u26d4;\\u6268p\\u0100;p\\u26c3\\u26c4\\u6a89rox\\xbb\\u26c4\\u0100;q\\u26ce\\u26cf\\u6a87\\u0100;q\\u26ce\\u26bbim;\\u62e6\\u0400abnoptwz\\u26e9\\u26f4\\u26f7\\u271a\\u272f\\u2741\\u2747\\u2750\\u0100nr\\u26ee\\u26f1g;\\u67ecr;\\u61fdr\\xeb\\u08c1g\\u0180lmr\\u26ff\\u270d\\u2714eft\\u0100ar\\u09e6\\u2707ight\\xe1\\u09f2apsto;\\u67fcight\\xe1\\u09fdparrow\\u0100lr\\u2725\\u2729ef\\xf4\\u24edight;\\u61ac\\u0180afl\\u2736\\u2739\\u273dr;\\u6985;\\uc000\\ud835\\udd5dus;\\u6a2dimes;\\u6a34\\u0161\\u274b\\u274fst;\\u6217\\xe1\\u134e\\u0180;ef\\u2757\\u2758\\u1800\\u65cange\\xbb\\u2758ar\\u0100;l\\u2764\\u2765\\u4028t;\\u6993\\u0280achmt\\u2773\\u2776\\u277c\\u2785\\u2787r\\xf2\\u08a8orne\\xf2\\u1d8car\\u0100;d\\u0f98\\u2783;\\u696d;\\u600eri;\\u62bf\\u0300achiqt\\u2798\\u279d\\u0a40\\u27a2\\u27ae\\u27bbquo;\\u6039r;\\uc000\\ud835\\udcc1m\\u0180;eg\\u09b2\\u27aa\\u27ac;\\u6a8d;\\u6a8f\\u0100bu\\u252a\\u27b3o\\u0100;r\\u0e1f\\u27b9;\\u601arok;\\u4142\\u8400<;cdhilqr\\u082b\\u27d2\\u2639\\u27dc\\u27e0\\u27e5\\u27ea\\u27f0\\u0100ci\\u27d7\\u27d9;\\u6aa6r;\\u6a79re\\xe5\\u25f2mes;\\u62c9arr;\\u6976uest;\\u6a7b\\u0100Pi\\u27f5\\u27f9ar;\\u6996\\u0180;ef\\u2800\\u092d\\u181b\\u65c3r\\u0100du\\u2807\\u280dshar;\\u694ahar;\\u6966\\u0100en\\u2817\\u2821rtneqq;\\uc000\\u2268\\ufe00\\xc5\\u281e\\u0700Dacdefhilnopsu\\u2840\\u2845\\u2882\\u288e\\u2893\\u28a0\\u28a5\\u28a8\\u28da\\u28e2\\u28e4\\u0a83\\u28f3\\u2902Dot;\\u623a\\u0200clpr\\u284e\\u2852\\u2863\\u287dr\\u803b\\xaf\\u40af\\u0100et\\u2857\\u2859;\\u6642\\u0100;e\\u285e\\u285f\\u6720se\\xbb\\u285f\\u0100;s\\u103b\\u2868to\\u0200;dlu\\u103b\\u2873\\u2877\\u287bow\\xee\\u048cef\\xf4\\u090f\\xf0\\u13d1ker;\\u65ae\\u0100oy\\u2887\\u288cmma;\\u6a29;\\u443cash;\\u6014asuredangle\\xbb\\u1626r;\\uc000\\ud835\\udd2ao;\\u6127\\u0180cdn\\u28af\\u28b4\\u28c9ro\\u803b\\xb5\\u40b5\\u0200;acd\\u1464\\u28bd\\u28c0\\u28c4s\\xf4\\u16a7ir;\\u6af0ot\\u80bb\\xb7\\u01b5us\\u0180;bd\\u28d2\\u1903\\u28d3\\u6212\\u0100;u\\u1d3c\\u28d8;\\u6a2a\\u0163\\u28de\\u28e1p;\\u6adb\\xf2\\u2212\\xf0\\u0a81\\u0100dp\\u28e9\\u28eeels;\\u62a7f;\\uc000\\ud835\\udd5e\\u0100ct\\u28f8\\u28fdr;\\uc000\\ud835\\udcc2pos\\xbb\\u159d\\u0180;lm\\u2909\\u290a\\u290d\\u43bctimap;\\u62b8\\u0c00GLRVabcdefghijlmoprstuvw\\u2942\\u2953\\u297e\\u2989\\u2998\\u29da\\u29e9\\u2a15\\u2a1a\\u2a58\\u2a5d\\u2a83\\u2a95\\u2aa4\\u2aa8\\u2b04\\u2b07\\u2b44\\u2b7f\\u2bae\\u2c34\\u2c67\\u2c7c\\u2ce9\\u0100gt\\u2947\\u294b;\\uc000\\u22d9\\u0338\\u0100;v\\u2950\\u0bcf\\uc000\\u226b\\u20d2\\u0180elt\\u295a\\u2972\\u2976ft\\u0100ar\\u2961\\u2967rrow;\\u61cdightarrow;\\u61ce;\\uc000\\u22d8\\u0338\\u0100;v\\u297b\\u0c47\\uc000\\u226a\\u20d2ightarrow;\\u61cf\\u0100Dd\\u298e\\u2993ash;\\u62afash;\\u62ae\\u0280bcnpt\\u29a3\\u29a7\\u29ac\\u29b1\\u29ccla\\xbb\\u02deute;\\u4144g;\\uc000\\u2220\\u20d2\\u0280;Eiop\\u0d84\\u29bc\\u29c0\\u29c5\\u29c8;\\uc000\\u2a70\\u0338d;\\uc000\\u224b\\u0338s;\\u4149ro\\xf8\\u0d84ur\\u0100;a\\u29d3\\u29d4\\u666el\\u0100;s\\u29d3\\u0b38\\u01f3\\u29df\\0\\u29e3p\\u80bb\\xa0\\u0b37mp\\u0100;e\\u0bf9\\u0c00\\u0280aeouy\\u29f4\\u29fe\\u2a03\\u2a10\\u2a13\\u01f0\\u29f9\\0\\u29fb;\\u6a43on;\\u4148dil;\\u4146ng\\u0100;d\\u0d7e\\u2a0aot;\\uc000\\u2a6d\\u0338p;\\u6a42;\\u443dash;\\u6013\\u0380;Aadqsx\\u0b92\\u2a29\\u2a2d\\u2a3b\\u2a41\\u2a45\\u2a50rr;\\u61d7r\\u0100hr\\u2a33\\u2a36k;\\u6924\\u0100;o\\u13f2\\u13f0ot;\\uc000\\u2250\\u0338ui\\xf6\\u0b63\\u0100ei\\u2a4a\\u2a4ear;\\u6928\\xed\\u0b98ist\\u0100;s\\u0ba0\\u0b9fr;\\uc000\\ud835\\udd2b\\u0200Eest\\u0bc5\\u2a66\\u2a79\\u2a7c\\u0180;qs\\u0bbc\\u2a6d\\u0be1\\u0180;qs\\u0bbc\\u0bc5\\u2a74lan\\xf4\\u0be2i\\xed\\u0bea\\u0100;r\\u0bb6\\u2a81\\xbb\\u0bb7\\u0180Aap\\u2a8a\\u2a8d\\u2a91r\\xf2\\u2971rr;\\u61aear;\\u6af2\\u0180;sv\\u0f8d\\u2a9c\\u0f8c\\u0100;d\\u2aa1\\u2aa2\\u62fc;\\u62facy;\\u445a\\u0380AEadest\\u2ab7\\u2aba\\u2abe\\u2ac2\\u2ac5\\u2af6\\u2af9r\\xf2\\u2966;\\uc000\\u2266\\u0338rr;\\u619ar;\\u6025\\u0200;fqs\\u0c3b\\u2ace\\u2ae3\\u2aeft\\u0100ar\\u2ad4\\u2ad9rro\\xf7\\u2ac1ightarro\\xf7\\u2a90\\u0180;qs\\u0c3b\\u2aba\\u2aealan\\xf4\\u0c55\\u0100;s\\u0c55\\u2af4\\xbb\\u0c36i\\xed\\u0c5d\\u0100;r\\u0c35\\u2afei\\u0100;e\\u0c1a\\u0c25i\\xe4\\u0d90\\u0100pt\\u2b0c\\u2b11f;\\uc000\\ud835\\udd5f\\u8180\\xac;in\\u2b19\\u2b1a\\u2b36\\u40acn\\u0200;Edv\\u0b89\\u2b24\\u2b28\\u2b2e;\\uc000\\u22f9\\u0338ot;\\uc000\\u22f5\\u0338\\u01e1\\u0b89\\u2b33\\u2b35;\\u62f7;\\u62f6i\\u0100;v\\u0cb8\\u2b3c\\u01e1\\u0cb8\\u2b41\\u2b43;\\u62fe;\\u62fd\\u0180aor\\u2b4b\\u2b63\\u2b69r\\u0200;ast\\u0b7b\\u2b55\\u2b5a\\u2b5flle\\xec\\u0b7bl;\\uc000\\u2afd\\u20e5;\\uc000\\u2202\\u0338lint;\\u6a14\\u0180;ce\\u0c92\\u2b70\\u2b73u\\xe5\\u0ca5\\u0100;c\\u0c98\\u2b78\\u0100;e\\u0c92\\u2b7d\\xf1\\u0c98\\u0200Aait\\u2b88\\u2b8b\\u2b9d\\u2ba7r\\xf2\\u2988rr\\u0180;cw\\u2b94\\u2b95\\u2b99\\u619b;\\uc000\\u2933\\u0338;\\uc000\\u219d\\u0338ghtarrow\\xbb\\u2b95ri\\u0100;e\\u0ccb\\u0cd6\\u0380chimpqu\\u2bbd\\u2bcd\\u2bd9\\u2b04\\u0b78\\u2be4\\u2bef\\u0200;cer\\u0d32\\u2bc6\\u0d37\\u2bc9u\\xe5\\u0d45;\\uc000\\ud835\\udcc3ort\\u026d\\u2b05\\0\\0\\u2bd6ar\\xe1\\u2b56m\\u0100;e\\u0d6e\\u2bdf\\u0100;q\\u0d74\\u0d73su\\u0100bp\\u2beb\\u2bed\\xe5\\u0cf8\\xe5\\u0d0b\\u0180bcp\\u2bf6\\u2c11\\u2c19\\u0200;Ees\\u2bff\\u2c00\\u0d22\\u2c04\\u6284;\\uc000\\u2ac5\\u0338et\\u0100;e\\u0d1b\\u2c0bq\\u0100;q\\u0d23\\u2c00c\\u0100;e\\u0d32\\u2c17\\xf1\\u0d38\\u0200;Ees\\u2c22\\u2c23\\u0d5f\\u2c27\\u6285;\\uc000\\u2ac6\\u0338et\\u0100;e\\u0d58\\u2c2eq\\u0100;q\\u0d60\\u2c23\\u0200gilr\\u2c3d\\u2c3f\\u2c45\\u2c47\\xec\\u0bd7lde\\u803b\\xf1\\u40f1\\xe7\\u0c43iangle\\u0100lr\\u2c52\\u2c5ceft\\u0100;e\\u0c1a\\u2c5a\\xf1\\u0c26ight\\u0100;e\\u0ccb\\u2c65\\xf1\\u0cd7\\u0100;m\\u2c6c\\u2c6d\\u43bd\\u0180;es\\u2c74\\u2c75\\u2c79\\u4023ro;\\u6116p;\\u6007\\u0480DHadgilrs\\u2c8f\\u2c94\\u2c99\\u2c9e\\u2ca3\\u2cb0\\u2cb6\\u2cd3\\u2ce3ash;\\u62adarr;\\u6904p;\\uc000\\u224d\\u20d2ash;\\u62ac\\u0100et\\u2ca8\\u2cac;\\uc000\\u2265\\u20d2;\\uc000>\\u20d2nfin;\\u69de\\u0180Aet\\u2cbd\\u2cc1\\u2cc5rr;\\u6902;\\uc000\\u2264\\u20d2\\u0100;r\\u2cca\\u2ccd\\uc000<\\u20d2ie;\\uc000\\u22b4\\u20d2\\u0100At\\u2cd8\\u2cdcrr;\\u6903rie;\\uc000\\u22b5\\u20d2im;\\uc000\\u223c\\u20d2\\u0180Aan\\u2cf0\\u2cf4\\u2d02rr;\\u61d6r\\u0100hr\\u2cfa\\u2cfdk;\\u6923\\u0100;o\\u13e7\\u13e5ear;\\u6927\\u1253\\u1a95\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\u2d2d\\0\\u2d38\\u2d48\\u2d60\\u2d65\\u2d72\\u2d84\\u1b07\\0\\0\\u2d8d\\u2dab\\0\\u2dc8\\u2dce\\0\\u2ddc\\u2e19\\u2e2b\\u2e3e\\u2e43\\u0100cs\\u2d31\\u1a97ute\\u803b\\xf3\\u40f3\\u0100iy\\u2d3c\\u2d45r\\u0100;c\\u1a9e\\u2d42\\u803b\\xf4\\u40f4;\\u443e\\u0280abios\\u1aa0\\u2d52\\u2d57\\u01c8\\u2d5alac;\\u4151v;\\u6a38old;\\u69bclig;\\u4153\\u0100cr\\u2d69\\u2d6dir;\\u69bf;\\uc000\\ud835\\udd2c\\u036f\\u2d79\\0\\0\\u2d7c\\0\\u2d82n;\\u42dbave\\u803b\\xf2\\u40f2;\\u69c1\\u0100bm\\u2d88\\u0df4ar;\\u69b5\\u0200acit\\u2d95\\u2d98\\u2da5\\u2da8r\\xf2\\u1a80\\u0100ir\\u2d9d\\u2da0r;\\u69beoss;\\u69bbn\\xe5\\u0e52;\\u69c0\\u0180aei\\u2db1\\u2db5\\u2db9cr;\\u414dga;\\u43c9\\u0180cdn\\u2dc0\\u2dc5\\u01cdron;\\u43bf;\\u69b6pf;\\uc000\\ud835\\udd60\\u0180ael\\u2dd4\\u2dd7\\u01d2r;\\u69b7rp;\\u69b9\\u0380;adiosv\\u2dea\\u2deb\\u2dee\\u2e08\\u2e0d\\u2e10\\u2e16\\u6228r\\xf2\\u1a86\\u0200;efm\\u2df7\\u2df8\\u2e02\\u2e05\\u6a5dr\\u0100;o\\u2dfe\\u2dff\\u6134f\\xbb\\u2dff\\u803b\\xaa\\u40aa\\u803b\\xba\\u40bagof;\\u62b6r;\\u6a56lope;\\u6a57;\\u6a5b\\u0180clo\\u2e1f\\u2e21\\u2e27\\xf2\\u2e01ash\\u803b\\xf8\\u40f8l;\\u6298i\\u016c\\u2e2f\\u2e34de\\u803b\\xf5\\u40f5es\\u0100;a\\u01db\\u2e3as;\\u6a36ml\\u803b\\xf6\\u40f6bar;\\u633d\\u0ae1\\u2e5e\\0\\u2e7d\\0\\u2e80\\u2e9d\\0\\u2ea2\\u2eb9\\0\\0\\u2ecb\\u0e9c\\0\\u2f13\\0\\0\\u2f2b\\u2fbc\\0\\u2fc8r\\u0200;ast\\u0403\\u2e67\\u2e72\\u0e85\\u8100\\xb6;l\\u2e6d\\u2e6e\\u40b6le\\xec\\u0403\\u0269\\u2e78\\0\\0\\u2e7bm;\\u6af3;\\u6afdy;\\u443fr\\u0280cimpt\\u2e8b\\u2e8f\\u2e93\\u1865\\u2e97nt;\\u4025od;\\u402eil;\\u6030enk;\\u6031r;\\uc000\\ud835\\udd2d\\u0180imo\\u2ea8\\u2eb0\\u2eb4\\u0100;v\\u2ead\\u2eae\\u43c6;\\u43d5ma\\xf4\\u0a76ne;\\u660e\\u0180;tv\\u2ebf\\u2ec0\\u2ec8\\u43c0chfork\\xbb\\u1ffd;\\u43d6\\u0100au\\u2ecf\\u2edfn\\u0100ck\\u2ed5\\u2eddk\\u0100;h\\u21f4\\u2edb;\\u610e\\xf6\\u21f4s\\u0480;abcdemst\\u2ef3\\u2ef4\\u1908\\u2ef9\\u2efd\\u2f04\\u2f06\\u2f0a\\u2f0e\\u402bcir;\\u6a23ir;\\u6a22\\u0100ou\\u1d40\\u2f02;\\u6a25;\\u6a72n\\u80bb\\xb1\\u0e9dim;\\u6a26wo;\\u6a27\\u0180ipu\\u2f19\\u2f20\\u2f25ntint;\\u6a15f;\\uc000\\ud835\\udd61nd\\u803b\\xa3\\u40a3\\u0500;Eaceinosu\\u0ec8\\u2f3f\\u2f41\\u2f44\\u2f47\\u2f81\\u2f89\\u2f92\\u2f7e\\u2fb6;\\u6ab3p;\\u6ab7u\\xe5\\u0ed9\\u0100;c\\u0ece\\u2f4c\\u0300;acens\\u0ec8\\u2f59\\u2f5f\\u2f66\\u2f68\\u2f7eppro\\xf8\\u2f43urlye\\xf1\\u0ed9\\xf1\\u0ece\\u0180aes\\u2f6f\\u2f76\\u2f7approx;\\u6ab9qq;\\u6ab5im;\\u62e8i\\xed\\u0edfme\\u0100;s\\u2f88\\u0eae\\u6032\\u0180Eas\\u2f78\\u2f90\\u2f7a\\xf0\\u2f75\\u0180dfp\\u0eec\\u2f99\\u2faf\\u0180als\\u2fa0\\u2fa5\\u2faalar;\\u632eine;\\u6312urf;\\u6313\\u0100;t\\u0efb\\u2fb4\\xef\\u0efbrel;\\u62b0\\u0100ci\\u2fc0\\u2fc5r;\\uc000\\ud835\\udcc5;\\u43c8ncsp;\\u6008\\u0300fiopsu\\u2fda\\u22e2\\u2fdf\\u2fe5\\u2feb\\u2ff1r;\\uc000\\ud835\\udd2epf;\\uc000\\ud835\\udd62rime;\\u6057cr;\\uc000\\ud835\\udcc6\\u0180aeo\\u2ff8\\u3009\\u3013t\\u0100ei\\u2ffe\\u3005rnion\\xf3\\u06b0nt;\\u6a16st\\u0100;e\\u3010\\u3011\\u403f\\xf1\\u1f19\\xf4\\u0f14\\u0a80ABHabcdefhilmnoprstux\\u3040\\u3051\\u3055\\u3059\\u30e0\\u310e\\u312b\\u3147\\u3162\\u3172\\u318e\\u3206\\u3215\\u3224\\u3229\\u3258\\u326e\\u3272\\u3290\\u32b0\\u32b7\\u0180art\\u3047\\u304a\\u304cr\\xf2\\u10b3\\xf2\\u03ddail;\\u691car\\xf2\\u1c65ar;\\u6964\\u0380cdenqrt\\u3068\\u3075\\u3078\\u307f\\u308f\\u3094\\u30cc\\u0100eu\\u306d\\u3071;\\uc000\\u223d\\u0331te;\\u4155i\\xe3\\u116emptyv;\\u69b3g\\u0200;del\\u0fd1\\u3089\\u308b\\u308d;\\u6992;\\u69a5\\xe5\\u0fd1uo\\u803b\\xbb\\u40bbr\\u0580;abcfhlpstw\\u0fdc\\u30ac\\u30af\\u30b7\\u30b9\\u30bc\\u30be\\u30c0\\u30c3\\u30c7\\u30cap;\\u6975\\u0100;f\\u0fe0\\u30b4s;\\u6920;\\u6933s;\\u691e\\xeb\\u225d\\xf0\\u272el;\\u6945im;\\u6974l;\\u61a3;\\u619d\\u0100ai\\u30d1\\u30d5il;\\u691ao\\u0100;n\\u30db\\u30dc\\u6236al\\xf3\\u0f1e\\u0180abr\\u30e7\\u30ea\\u30eer\\xf2\\u17e5rk;\\u6773\\u0100ak\\u30f3\\u30fdc\\u0100ek\\u30f9\\u30fb;\\u407d;\\u405d\\u0100es\\u3102\\u3104;\\u698cl\\u0100du\\u310a\\u310c;\\u698e;\\u6990\\u0200aeuy\\u3117\\u311c\\u3127\\u3129ron;\\u4159\\u0100di\\u3121\\u3125il;\\u4157\\xec\\u0ff2\\xe2\\u30fa;\\u4440\\u0200clqs\\u3134\\u3137\\u313d\\u3144a;\\u6937dhar;\\u6969uo\\u0100;r\\u020e\\u020dh;\\u61b3\\u0180acg\\u314e\\u315f\\u0f44l\\u0200;ips\\u0f78\\u3158\\u315b\\u109cn\\xe5\\u10bbar\\xf4\\u0fa9t;\\u65ad\\u0180ilr\\u3169\\u1023\\u316esht;\\u697d;\\uc000\\ud835\\udd2f\\u0100ao\\u3177\\u3186r\\u0100du\\u317d\\u317f\\xbb\\u047b\\u0100;l\\u1091\\u3184;\\u696c\\u0100;v\\u318b\\u318c\\u43c1;\\u43f1\\u0180gns\\u3195\\u31f9\\u31fcht\\u0300ahlrst\\u31a4\\u31b0\\u31c2\\u31d8\\u31e4\\u31eerrow\\u0100;t\\u0fdc\\u31ada\\xe9\\u30c8arpoon\\u0100du\\u31bb\\u31bfow\\xee\\u317ep\\xbb\\u1092eft\\u0100ah\\u31ca\\u31d0rrow\\xf3\\u0feaarpoon\\xf3\\u0551ightarrows;\\u61c9quigarro\\xf7\\u30cbhreetimes;\\u62ccg;\\u42daingdotse\\xf1\\u1f32\\u0180ahm\\u320d\\u3210\\u3213r\\xf2\\u0feaa\\xf2\\u0551;\\u600foust\\u0100;a\\u321e\\u321f\\u63b1che\\xbb\\u321fmid;\\u6aee\\u0200abpt\\u3232\\u323d\\u3240\\u3252\\u0100nr\\u3237\\u323ag;\\u67edr;\\u61fer\\xeb\\u1003\\u0180afl\\u3247\\u324a\\u324er;\\u6986;\\uc000\\ud835\\udd63us;\\u6a2eimes;\\u6a35\\u0100ap\\u325d\\u3267r\\u0100;g\\u3263\\u3264\\u4029t;\\u6994olint;\\u6a12ar\\xf2\\u31e3\\u0200achq\\u327b\\u3280\\u10bc\\u3285quo;\\u603ar;\\uc000\\ud835\\udcc7\\u0100bu\\u30fb\\u328ao\\u0100;r\\u0214\\u0213\\u0180hir\\u3297\\u329b\\u32a0re\\xe5\\u31f8mes;\\u62cai\\u0200;efl\\u32aa\\u1059\\u1821\\u32ab\\u65b9tri;\\u69celuhar;\\u6968;\\u611e\\u0d61\\u32d5\\u32db\\u32df\\u332c\\u3338\\u3371\\0\\u337a\\u33a4\\0\\0\\u33ec\\u33f0\\0\\u3428\\u3448\\u345a\\u34ad\\u34b1\\u34ca\\u34f1\\0\\u3616\\0\\0\\u3633cute;\\u415bqu\\xef\\u27ba\\u0500;Eaceinpsy\\u11ed\\u32f3\\u32f5\\u32ff\\u3302\\u330b\\u330f\\u331f\\u3326\\u3329;\\u6ab4\\u01f0\\u32fa\\0\\u32fc;\\u6ab8on;\\u4161u\\xe5\\u11fe\\u0100;d\\u11f3\\u3307il;\\u415frc;\\u415d\\u0180Eas\\u3316\\u3318\\u331b;\\u6ab6p;\\u6abaim;\\u62e9olint;\\u6a13i\\xed\\u1204;\\u4441ot\\u0180;be\\u3334\\u1d47\\u3335\\u62c5;\\u6a66\\u0380Aacmstx\\u3346\\u334a\\u3357\\u335b\\u335e\\u3363\\u336drr;\\u61d8r\\u0100hr\\u3350\\u3352\\xeb\\u2228\\u0100;o\\u0a36\\u0a34t\\u803b\\xa7\\u40a7i;\\u403bwar;\\u6929m\\u0100in\\u3369\\xf0nu\\xf3\\xf1t;\\u6736r\\u0100;o\\u3376\\u2055\\uc000\\ud835\\udd30\\u0200acoy\\u3382\\u3386\\u3391\\u33a0rp;\\u666f\\u0100hy\\u338b\\u338fcy;\\u4449;\\u4448rt\\u026d\\u3399\\0\\0\\u339ci\\xe4\\u1464ara\\xec\\u2e6f\\u803b\\xad\\u40ad\\u0100gm\\u33a8\\u33b4ma\\u0180;fv\\u33b1\\u33b2\\u33b2\\u43c3;\\u43c2\\u0400;deglnpr\\u12ab\\u33c5\\u33c9\\u33ce\\u33d6\\u33de\\u33e1\\u33e6ot;\\u6a6a\\u0100;q\\u12b1\\u12b0\\u0100;E\\u33d3\\u33d4\\u6a9e;\\u6aa0\\u0100;E\\u33db\\u33dc\\u6a9d;\\u6a9fe;\\u6246lus;\\u6a24arr;\\u6972ar\\xf2\\u113d\\u0200aeit\\u33f8\\u3408\\u340f\\u3417\\u0100ls\\u33fd\\u3404lsetm\\xe9\\u336ahp;\\u6a33parsl;\\u69e4\\u0100dl\\u1463\\u3414e;\\u6323\\u0100;e\\u341c\\u341d\\u6aaa\\u0100;s\\u3422\\u3423\\u6aac;\\uc000\\u2aac\\ufe00\\u0180flp\\u342e\\u3433\\u3442tcy;\\u444c\\u0100;b\\u3438\\u3439\\u402f\\u0100;a\\u343e\\u343f\\u69c4r;\\u633ff;\\uc000\\ud835\\udd64a\\u0100dr\\u344d\\u0402es\\u0100;u\\u3454\\u3455\\u6660it\\xbb\\u3455\\u0180csu\\u3460\\u3479\\u349f\\u0100au\\u3465\\u346fp\\u0100;s\\u1188\\u346b;\\uc000\\u2293\\ufe00p\\u0100;s\\u11b4\\u3475;\\uc000\\u2294\\ufe00u\\u0100bp\\u347f\\u348f\\u0180;es\\u1197\\u119c\\u3486et\\u0100;e\\u1197\\u348d\\xf1\\u119d\\u0180;es\\u11a8\\u11ad\\u3496et\\u0100;e\\u11a8\\u349d\\xf1\\u11ae\\u0180;af\\u117b\\u34a6\\u05b0r\\u0165\\u34ab\\u05b1\\xbb\\u117car\\xf2\\u1148\\u0200cemt\\u34b9\\u34be\\u34c2\\u34c5r;\\uc000\\ud835\\udcc8tm\\xee\\xf1i\\xec\\u3415ar\\xe6\\u11be\\u0100ar\\u34ce\\u34d5r\\u0100;f\\u34d4\\u17bf\\u6606\\u0100an\\u34da\\u34edight\\u0100ep\\u34e3\\u34eapsilo\\xee\\u1ee0h\\xe9\\u2eafs\\xbb\\u2852\\u0280bcmnp\\u34fb\\u355e\\u1209\\u358b\\u358e\\u0480;Edemnprs\\u350e\\u350f\\u3511\\u3515\\u351e\\u3523\\u352c\\u3531\\u3536\\u6282;\\u6ac5ot;\\u6abd\\u0100;d\\u11da\\u351aot;\\u6ac3ult;\\u6ac1\\u0100Ee\\u3528\\u352a;\\u6acb;\\u628alus;\\u6abfarr;\\u6979\\u0180eiu\\u353d\\u3552\\u3555t\\u0180;en\\u350e\\u3545\\u354bq\\u0100;q\\u11da\\u350feq\\u0100;q\\u352b\\u3528m;\\u6ac7\\u0100bp\\u355a\\u355c;\\u6ad5;\\u6ad3c\\u0300;acens\\u11ed\\u356c\\u3572\\u3579\\u357b\\u3326ppro\\xf8\\u32faurlye\\xf1\\u11fe\\xf1\\u11f3\\u0180aes\\u3582\\u3588\\u331bppro\\xf8\\u331aq\\xf1\\u3317g;\\u666a\\u0680123;Edehlmnps\\u35a9\\u35ac\\u35af\\u121c\\u35b2\\u35b4\\u35c0\\u35c9\\u35d5\\u35da\\u35df\\u35e8\\u35ed\\u803b\\xb9\\u40b9\\u803b\\xb2\\u40b2\\u803b\\xb3\\u40b3;\\u6ac6\\u0100os\\u35b9\\u35bct;\\u6abeub;\\u6ad8\\u0100;d\\u1222\\u35c5ot;\\u6ac4s\\u0100ou\\u35cf\\u35d2l;\\u67c9b;\\u6ad7arr;\\u697bult;\\u6ac2\\u0100Ee\\u35e4\\u35e6;\\u6acc;\\u628blus;\\u6ac0\\u0180eiu\\u35f4\\u3609\\u360ct\\u0180;en\\u121c\\u35fc\\u3602q\\u0100;q\\u1222\\u35b2eq\\u0100;q\\u35e7\\u35e4m;\\u6ac8\\u0100bp\\u3611\\u3613;\\u6ad4;\\u6ad6\\u0180Aan\\u361c\\u3620\\u362drr;\\u61d9r\\u0100hr\\u3626\\u3628\\xeb\\u222e\\u0100;o\\u0a2b\\u0a29war;\\u692alig\\u803b\\xdf\\u40df\\u0be1\\u3651\\u365d\\u3660\\u12ce\\u3673\\u3679\\0\\u367e\\u36c2\\0\\0\\0\\0\\0\\u36db\\u3703\\0\\u3709\\u376c\\0\\0\\0\\u3787\\u0272\\u3656\\0\\0\\u365bget;\\u6316;\\u43c4r\\xeb\\u0e5f\\u0180aey\\u3666\\u366b\\u3670ron;\\u4165dil;\\u4163;\\u4442lrec;\\u6315r;\\uc000\\ud835\\udd31\\u0200eiko\\u3686\\u369d\\u36b5\\u36bc\\u01f2\\u368b\\0\\u3691e\\u01004f\\u1284\\u1281a\\u0180;sv\\u3698\\u3699\\u369b\\u43b8ym;\\u43d1\\u0100cn\\u36a2\\u36b2k\\u0100as\\u36a8\\u36aeppro\\xf8\\u12c1im\\xbb\\u12acs\\xf0\\u129e\\u0100as\\u36ba\\u36ae\\xf0\\u12c1rn\\u803b\\xfe\\u40fe\\u01ec\\u031f\\u36c6\\u22e7es\\u8180\\xd7;bd\\u36cf\\u36d0\\u36d8\\u40d7\\u0100;a\\u190f\\u36d5r;\\u6a31;\\u6a30\\u0180eps\\u36e1\\u36e3\\u3700\\xe1\\u2a4d\\u0200;bcf\\u0486\\u36ec\\u36f0\\u36f4ot;\\u6336ir;\\u6af1\\u0100;o\\u36f9\\u36fc\\uc000\\ud835\\udd65rk;\\u6ada\\xe1\\u3362rime;\\u6034\\u0180aip\\u370f\\u3712\\u3764d\\xe5\\u1248\\u0380adempst\\u3721\\u374d\\u3740\\u3751\\u3757\\u375c\\u375fngle\\u0280;dlqr\\u3730\\u3731\\u3736\\u3740\\u3742\\u65b5own\\xbb\\u1dbbeft\\u0100;e\\u2800\\u373e\\xf1\\u092e;\\u625cight\\u0100;e\\u32aa\\u374b\\xf1\\u105aot;\\u65ecinus;\\u6a3alus;\\u6a39b;\\u69cdime;\\u6a3bezium;\\u63e2\\u0180cht\\u3772\\u377d\\u3781\\u0100ry\\u3777\\u377b;\\uc000\\ud835\\udcc9;\\u4446cy;\\u445brok;\\u4167\\u0100io\\u378b\\u378ex\\xf4\\u1777head\\u0100lr\\u3797\\u37a0eftarro\\xf7\\u084fightarrow\\xbb\\u0f5d\\u0900AHabcdfghlmoprstuw\\u37d0\\u37d3\\u37d7\\u37e4\\u37f0\\u37fc\\u380e\\u381c\\u3823\\u3834\\u3851\\u385d\\u386b\\u38a9\\u38cc\\u38d2\\u38ea\\u38f6r\\xf2\\u03edar;\\u6963\\u0100cr\\u37dc\\u37e2ute\\u803b\\xfa\\u40fa\\xf2\\u1150r\\u01e3\\u37ea\\0\\u37edy;\\u445eve;\\u416d\\u0100iy\\u37f5\\u37farc\\u803b\\xfb\\u40fb;\\u4443\\u0180abh\\u3803\\u3806\\u380br\\xf2\\u13adlac;\\u4171a\\xf2\\u13c3\\u0100ir\\u3813\\u3818sht;\\u697e;\\uc000\\ud835\\udd32rave\\u803b\\xf9\\u40f9\\u0161\\u3827\\u3831r\\u0100lr\\u382c\\u382e\\xbb\\u0957\\xbb\\u1083lk;\\u6580\\u0100ct\\u3839\\u384d\\u026f\\u383f\\0\\0\\u384arn\\u0100;e\\u3845\\u3846\\u631cr\\xbb\\u3846op;\\u630fri;\\u65f8\\u0100al\\u3856\\u385acr;\\u416b\\u80bb\\xa8\\u0349\\u0100gp\\u3862\\u3866on;\\u4173f;\\uc000\\ud835\\udd66\\u0300adhlsu\\u114b\\u3878\\u387d\\u1372\\u3891\\u38a0own\\xe1\\u13b3arpoon\\u0100lr\\u3888\\u388cef\\xf4\\u382digh\\xf4\\u382fi\\u0180;hl\\u3899\\u389a\\u389c\\u43c5\\xbb\\u13faon\\xbb\\u389aparrows;\\u61c8\\u0180cit\\u38b0\\u38c4\\u38c8\\u026f\\u38b6\\0\\0\\u38c1rn\\u0100;e\\u38bc\\u38bd\\u631dr\\xbb\\u38bdop;\\u630eng;\\u416fri;\\u65f9cr;\\uc000\\ud835\\udcca\\u0180dir\\u38d9\\u38dd\\u38e2ot;\\u62f0lde;\\u4169i\\u0100;f\\u3730\\u38e8\\xbb\\u1813\\u0100am\\u38ef\\u38f2r\\xf2\\u38a8l\\u803b\\xfc\\u40fcangle;\\u69a7\\u0780ABDacdeflnoprsz\\u391c\\u391f\\u3929\\u392d\\u39b5\\u39b8\\u39bd\\u39df\\u39e4\\u39e8\\u39f3\\u39f9\\u39fd\\u3a01\\u3a20r\\xf2\\u03f7ar\\u0100;v\\u3926\\u3927\\u6ae8;\\u6ae9as\\xe8\\u03e1\\u0100nr\\u3932\\u3937grt;\\u699c\\u0380eknprst\\u34e3\\u3946\\u394b\\u3952\\u395d\\u3964\\u3996app\\xe1\\u2415othin\\xe7\\u1e96\\u0180hir\\u34eb\\u2ec8\\u3959op\\xf4\\u2fb5\\u0100;h\\u13b7\\u3962\\xef\\u318d\\u0100iu\\u3969\\u396dgm\\xe1\\u33b3\\u0100bp\\u3972\\u3984setneq\\u0100;q\\u397d\\u3980\\uc000\\u228a\\ufe00;\\uc000\\u2acb\\ufe00setneq\\u0100;q\\u398f\\u3992\\uc000\\u228b\\ufe00;\\uc000\\u2acc\\ufe00\\u0100hr\\u399b\\u399fet\\xe1\\u369ciangle\\u0100lr\\u39aa\\u39afeft\\xbb\\u0925ight\\xbb\\u1051y;\\u4432ash\\xbb\\u1036\\u0180elr\\u39c4\\u39d2\\u39d7\\u0180;be\\u2dea\\u39cb\\u39cfar;\\u62bbq;\\u625alip;\\u62ee\\u0100bt\\u39dc\\u1468a\\xf2\\u1469r;\\uc000\\ud835\\udd33tr\\xe9\\u39aesu\\u0100bp\\u39ef\\u39f1\\xbb\\u0d1c\\xbb\\u0d59pf;\\uc000\\ud835\\udd67ro\\xf0\\u0efbtr\\xe9\\u39b4\\u0100cu\\u3a06\\u3a0br;\\uc000\\ud835\\udccb\\u0100bp\\u3a10\\u3a18n\\u0100Ee\\u3980\\u3a16\\xbb\\u397en\\u0100Ee\\u3992\\u3a1e\\xbb\\u3990igzag;\\u699a\\u0380cefoprs\\u3a36\\u3a3b\\u3a56\\u3a5b\\u3a54\\u3a61\\u3a6airc;\\u4175\\u0100di\\u3a40\\u3a51\\u0100bg\\u3a45\\u3a49ar;\\u6a5fe\\u0100;q\\u15fa\\u3a4f;\\u6259erp;\\u6118r;\\uc000\\ud835\\udd34pf;\\uc000\\ud835\\udd68\\u0100;e\\u1479\\u3a66at\\xe8\\u1479cr;\\uc000\\ud835\\udccc\\u0ae3\\u178e\\u3a87\\0\\u3a8b\\0\\u3a90\\u3a9b\\0\\0\\u3a9d\\u3aa8\\u3aab\\u3aaf\\0\\0\\u3ac3\\u3ace\\0\\u3ad8\\u17dc\\u17dftr\\xe9\\u17d1r;\\uc000\\ud835\\udd35\\u0100Aa\\u3a94\\u3a97r\\xf2\\u03c3r\\xf2\\u09f6;\\u43be\\u0100Aa\\u3aa1\\u3aa4r\\xf2\\u03b8r\\xf2\\u09eba\\xf0\\u2713is;\\u62fb\\u0180dpt\\u17a4\\u3ab5\\u3abe\\u0100fl\\u3aba\\u17a9;\\uc000\\ud835\\udd69im\\xe5\\u17b2\\u0100Aa\\u3ac7\\u3acar\\xf2\\u03cer\\xf2\\u0a01\\u0100cq\\u3ad2\\u17b8r;\\uc000\\ud835\\udccd\\u0100pt\\u17d6\\u3adcr\\xe9\\u17d4\\u0400acefiosu\\u3af0\\u3afd\\u3b08\\u3b0c\\u3b11\\u3b15\\u3b1b\\u3b21c\\u0100uy\\u3af6\\u3afbte\\u803b\\xfd\\u40fd;\\u444f\\u0100iy\\u3b02\\u3b06rc;\\u4177;\\u444bn\\u803b\\xa5\\u40a5r;\\uc000\\ud835\\udd36cy;\\u4457pf;\\uc000\\ud835\\udd6acr;\\uc000\\ud835\\udcce\\u0100cm\\u3b26\\u3b29y;\\u444el\\u803b\\xff\\u40ff\\u0500acdefhiosw\\u3b42\\u3b48\\u3b54\\u3b58\\u3b64\\u3b69\\u3b6d\\u3b74\\u3b7a\\u3b80cute;\\u417a\\u0100ay\\u3b4d\\u3b52ron;\\u417e;\\u4437ot;\\u417c\\u0100et\\u3b5d\\u3b61tr\\xe6\\u155fa;\\u43b6r;\\uc000\\ud835\\udd37cy;\\u4436grarr;\\u61ddpf;\\uc000\\ud835\\udd6bcr;\\uc000\\ud835\\udccf\\u0100jn\\u3b85\\u3b87;\\u600dj;\\u600c\"\n    .split(\"\")\n    .map(function (c) { return c.charCodeAt(0); }));\n//# sourceMappingURL=decode-data-html.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLAttribute = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.DecodingMode = exports.EntityDecoder = exports.encodeHTML5 = exports.encodeHTML4 = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.escapeText = exports.escapeAttribute = exports.escapeUTF8 = exports.escape = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = exports.EncodingMode = exports.EntityLevel = void 0;\nvar decode_js_1 = require(\"./decode.js\");\nvar encode_js_1 = require(\"./encode.js\");\nvar escape_js_1 = require(\"./escape.js\");\n/** The level of entities to support. */\nvar EntityLevel;\n(function (EntityLevel) {\n    /** Support only XML entities. */\n    EntityLevel[EntityLevel[\"XML\"] = 0] = \"XML\";\n    /** Support HTML entities, which are a superset of XML entities. */\n    EntityLevel[EntityLevel[\"HTML\"] = 1] = \"HTML\";\n})(EntityLevel = exports.EntityLevel || (exports.EntityLevel = {}));\nvar EncodingMode;\n(function (EncodingMode) {\n    /**\n     * The output is UTF-8 encoded. Only characters that need escaping within\n     * XML will be escaped.\n     */\n    EncodingMode[EncodingMode[\"UTF8\"] = 0] = \"UTF8\";\n    /**\n     * The output consists only of ASCII characters. Characters that need\n     * escaping within HTML, and characters that aren't ASCII characters will\n     * be escaped.\n     */\n    EncodingMode[EncodingMode[\"ASCII\"] = 1] = \"ASCII\";\n    /**\n     * Encode all characters that have an equivalent entity, as well as all\n     * characters that are not ASCII characters.\n     */\n    EncodingMode[EncodingMode[\"Extensive\"] = 2] = \"Extensive\";\n    /**\n     * Encode all characters that have to be escaped in HTML attributes,\n     * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n     */\n    EncodingMode[EncodingMode[\"Attribute\"] = 3] = \"Attribute\";\n    /**\n     * Encode all characters that have to be escaped in HTML text,\n     * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n     */\n    EncodingMode[EncodingMode[\"Text\"] = 4] = \"Text\";\n})(EncodingMode = exports.EncodingMode || (exports.EncodingMode = {}));\n/**\n * Decodes a string with entities.\n *\n * @param data String to decode.\n * @param options Decoding options.\n */\nfunction decode(data, options) {\n    if (options === void 0) { options = EntityLevel.XML; }\n    var level = typeof options === \"number\" ? options : options.level;\n    if (level === EntityLevel.HTML) {\n        var mode = typeof options === \"object\" ? options.mode : undefined;\n        return (0, decode_js_1.decodeHTML)(data, mode);\n    }\n    return (0, decode_js_1.decodeXML)(data);\n}\nexports.decode = decode;\n/**\n * Decodes a string with entities. Does not allow missing trailing semicolons for entities.\n *\n * @param data String to decode.\n * @param options Decoding options.\n * @deprecated Use `decode` with the `mode` set to `Strict`.\n */\nfunction decodeStrict(data, options) {\n    var _a;\n    if (options === void 0) { options = EntityLevel.XML; }\n    var opts = typeof options === \"number\" ? { level: options } : options;\n    (_a = opts.mode) !== null && _a !== void 0 ? _a : (opts.mode = decode_js_1.DecodingMode.Strict);\n    return decode(data, opts);\n}\nexports.decodeStrict = decodeStrict;\n/**\n * Encodes a string with entities.\n *\n * @param data String to encode.\n * @param options Encoding options.\n */\nfunction encode(data, options) {\n    if (options === void 0) { options = EntityLevel.XML; }\n    var opts = typeof options === \"number\" ? { level: options } : options;\n    // Mode `UTF8` just escapes XML entities\n    if (opts.mode === EncodingMode.UTF8)\n        return (0, escape_js_1.escapeUTF8)(data);\n    if (opts.mode === EncodingMode.Attribute)\n        return (0, escape_js_1.escapeAttribute)(data);\n    if (opts.mode === EncodingMode.Text)\n        return (0, escape_js_1.escapeText)(data);\n    if (opts.level === EntityLevel.HTML) {\n        if (opts.mode === EncodingMode.ASCII) {\n            return (0, encode_js_1.encodeNonAsciiHTML)(data);\n        }\n        return (0, encode_js_1.encodeHTML)(data);\n    }\n    // ASCII and Extensive are equivalent\n    return (0, escape_js_1.encodeXML)(data);\n}\nexports.encode = encode;\nvar escape_js_2 = require(\"./escape.js\");\nObject.defineProperty(exports, \"encodeXML\", { enumerable: true, get: function () { return escape_js_2.encodeXML; } });\nObject.defineProperty(exports, \"escape\", { enumerable: true, get: function () { return escape_js_2.escape; } });\nObject.defineProperty(exports, \"escapeUTF8\", { enumerable: true, get: function () { return escape_js_2.escapeUTF8; } });\nObject.defineProperty(exports, \"escapeAttribute\", { enumerable: true, get: function () { return escape_js_2.escapeAttribute; } });\nObject.defineProperty(exports, \"escapeText\", { enumerable: true, get: function () { return escape_js_2.escapeText; } });\nvar encode_js_2 = require(\"./encode.js\");\nObject.defineProperty(exports, \"encodeHTML\", { enumerable: true, get: function () { return encode_js_2.encodeHTML; } });\nObject.defineProperty(exports, \"encodeNonAsciiHTML\", { enumerable: true, get: function () { return encode_js_2.encodeNonAsciiHTML; } });\n// Legacy aliases (deprecated)\nObject.defineProperty(exports, \"encodeHTML4\", { enumerable: true, get: function () { return encode_js_2.encodeHTML; } });\nObject.defineProperty(exports, \"encodeHTML5\", { enumerable: true, get: function () { return encode_js_2.encodeHTML; } });\nvar decode_js_2 = require(\"./decode.js\");\nObject.defineProperty(exports, \"EntityDecoder\", { enumerable: true, get: function () { return decode_js_2.EntityDecoder; } });\nObject.defineProperty(exports, \"DecodingMode\", { enumerable: true, get: function () { return decode_js_2.DecodingMode; } });\nObject.defineProperty(exports, \"decodeXML\", { enumerable: true, get: function () { return decode_js_2.decodeXML; } });\nObject.defineProperty(exports, \"decodeHTML\", { enumerable: true, get: function () { return decode_js_2.decodeHTML; } });\nObject.defineProperty(exports, \"decodeHTMLStrict\", { enumerable: true, get: function () { return decode_js_2.decodeHTMLStrict; } });\nObject.defineProperty(exports, \"decodeHTMLAttribute\", { enumerable: true, get: function () { return decode_js_2.decodeHTMLAttribute; } });\n// Legacy aliases (deprecated)\nObject.defineProperty(exports, \"decodeHTML4\", { enumerable: true, get: function () { return decode_js_2.decodeHTML; } });\nObject.defineProperty(exports, \"decodeHTML5\", { enumerable: true, get: function () { return decode_js_2.decodeHTML; } });\nObject.defineProperty(exports, \"decodeHTML4Strict\", { enumerable: true, get: function () { return decode_js_2.decodeHTMLStrict; } });\nObject.defineProperty(exports, \"decodeHTML5Strict\", { enumerable: true, get: function () { return decode_js_2.decodeHTMLStrict; } });\nObject.defineProperty(exports, \"decodeXMLStrict\", { enumerable: true, get: function () { return decode_js_2.decodeXML; } });\n//# sourceMappingURL=index.js.map","'use strict';\n\n/* eslint-disable no-bitwise */\n\nconst decodeCache = {};\n\nfunction getDecodeCache (exclude) {\n  let cache = decodeCache[exclude];\n  if (cache) { return cache }\n\n  cache = decodeCache[exclude] = [];\n\n  for (let i = 0; i < 128; i++) {\n    const ch = String.fromCharCode(i);\n    cache.push(ch);\n  }\n\n  for (let i = 0; i < exclude.length; i++) {\n    const ch = exclude.charCodeAt(i);\n    cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2);\n  }\n\n  return cache\n}\n\n// Decode percent-encoded string.\n//\nfunction decode (string, exclude) {\n  if (typeof exclude !== 'string') {\n    exclude = decode.defaultChars;\n  }\n\n  const cache = getDecodeCache(exclude);\n\n  return string.replace(/(%[a-f0-9]{2})+/gi, function (seq) {\n    let result = '';\n\n    for (let i = 0, l = seq.length; i < l; i += 3) {\n      const b1 = parseInt(seq.slice(i + 1, i + 3), 16);\n\n      if (b1 < 0x80) {\n        result += cache[b1];\n        continue\n      }\n\n      if ((b1 & 0xE0) === 0xC0 && (i + 3 < l)) {\n        // 110xxxxx 10xxxxxx\n        const b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n\n        if ((b2 & 0xC0) === 0x80) {\n          const chr = ((b1 << 6) & 0x7C0) | (b2 & 0x3F);\n\n          if (chr < 0x80) {\n            result += '\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 3;\n          continue\n        }\n      }\n\n      if ((b1 & 0xF0) === 0xE0 && (i + 6 < l)) {\n        // 1110xxxx 10xxxxxx 10xxxxxx\n        const b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        const b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n          const chr = ((b1 << 12) & 0xF000) | ((b2 << 6) & 0xFC0) | (b3 & 0x3F);\n\n          if (chr < 0x800 || (chr >= 0xD800 && chr <= 0xDFFF)) {\n            result += '\\ufffd\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 6;\n          continue\n        }\n      }\n\n      if ((b1 & 0xF8) === 0xF0 && (i + 9 < l)) {\n        // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx\n        const b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        const b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n        const b4 = parseInt(seq.slice(i + 10, i + 12), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {\n          let chr = ((b1 << 18) & 0x1C0000) | ((b2 << 12) & 0x3F000) | ((b3 << 6) & 0xFC0) | (b4 & 0x3F);\n\n          if (chr < 0x10000 || chr > 0x10FFFF) {\n            result += '\\ufffd\\ufffd\\ufffd\\ufffd';\n          } else {\n            chr -= 0x10000;\n            result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));\n          }\n\n          i += 9;\n          continue\n        }\n      }\n\n      result += '\\ufffd';\n    }\n\n    return result\n  })\n}\n\ndecode.defaultChars = ';/?:@&=+$,#';\ndecode.componentChars = '';\n\nconst encodeCache = {};\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache (exclude) {\n  let cache = encodeCache[exclude];\n  if (cache) { return cache }\n\n  cache = encodeCache[exclude] = [];\n\n  for (let i = 0; i < 128; i++) {\n    const ch = String.fromCharCode(i);\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch);\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n    }\n  }\n\n  for (let i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i];\n  }\n\n  return cache\n}\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode (string, exclude, keepEscaped) {\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped = exclude;\n    exclude = encode.defaultChars;\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true;\n  }\n\n  const cache = getEncodeCache(exclude);\n  let result = '';\n\n  for (let i = 0, l = string.length; i < l; i++) {\n    const code = string.charCodeAt(i);\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3);\n        i += 2;\n        continue\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code];\n      continue\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        const nextCode = string.charCodeAt(i + 1);\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1]);\n          i++;\n          continue\n        }\n      }\n      result += '%EF%BF%BD';\n      continue\n    }\n\n    result += encodeURIComponent(string[i]);\n  }\n\n  return result\n}\n\nencode.defaultChars = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\n\nfunction format (url) {\n  let result = '';\n\n  result += url.protocol || '';\n  result += url.slashes ? '//' : '';\n  result += url.auth ? url.auth + '@' : '';\n\n  if (url.hostname && url.hostname.indexOf(':') !== -1) {\n    // ipv6 address\n    result += '[' + url.hostname + ']';\n  } else {\n    result += url.hostname || '';\n  }\n\n  result += url.port ? ':' + url.port : '';\n  result += url.pathname || '';\n  result += url.search || '';\n  result += url.hash || '';\n\n  return result\n}\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//\n// Changes from joyent/node:\n//\n// 1. No leading slash in paths,\n//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`\n//\n// 2. Backslashes are not replaced with slashes,\n//    so `http:\\\\example.org\\` is treated like a relative path\n//\n// 3. Trailing colon is treated like a part of the path,\n//    i.e. in `http://example.org:foo` pathname is `:foo`\n//\n// 4. Nothing is URL-encoded in the resulting object,\n//    (in joyent/node some chars in auth and paths are encoded)\n//\n// 5. `url.parse()` does not have `parseQueryString` argument\n//\n// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,\n//    which can be constructed using other parts of the url.\n//\n\nfunction Url () {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.pathname = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nconst protocolPattern = /^([a-z0-9.+-]+:)/i;\nconst portPattern = /:[0-9]*$/;\n\n// Special case for a simple path URL\n/* eslint-disable-next-line no-useless-escape */\nconst simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/;\n\n// RFC 2396: characters reserved for delimiting URLs.\n// We actually just auto-escape these.\nconst delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'];\n\n// RFC 2396: characters not allowed for various reasons.\nconst unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims);\n\n// Allowed by RFCs, but cause of XSS attacks.  Always escape these.\nconst autoEscape = ['\\''].concat(unwise);\n// Characters that are never ever allowed in a hostname.\n// Note that any invalid chars are also handled, but these\n// are the ones that are *expected* to be seen, so we fast-path\n// them.\nconst nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape);\nconst hostEndingChars = ['/', '?', '#'];\nconst hostnameMaxLen = 255;\nconst hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;\nconst hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;\n// protocols that can allow \"unsafe\" and \"unwise\" chars.\n// protocols that never have a hostname.\nconst hostlessProtocol = {\n  javascript: true,\n  'javascript:': true\n};\n// protocols that always contain a // bit.\nconst slashedProtocol = {\n  http: true,\n  https: true,\n  ftp: true,\n  gopher: true,\n  file: true,\n  'http:': true,\n  'https:': true,\n  'ftp:': true,\n  'gopher:': true,\n  'file:': true\n};\n\nfunction urlParse (url, slashesDenoteHost) {\n  if (url && url instanceof Url) return url\n\n  const u = new Url();\n  u.parse(url, slashesDenoteHost);\n  return u\n}\n\nUrl.prototype.parse = function (url, slashesDenoteHost) {\n  let lowerProto, hec, slashes;\n  let rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    const simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n      }\n      return this\n    }\n  }\n\n  let proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    lowerProto = proto.toLowerCase();\n    this.protocol = proto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  /* eslint-disable-next-line no-useless-escape */\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    let hostEnd = -1;\n    for (let i = 0; i < hostEndingChars.length; i++) {\n      hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    let auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = auth;\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (let i = 0; i < nonHostChars.length; i++) {\n      hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1) {\n      hostEnd = rest.length;\n    }\n\n    if (rest[hostEnd - 1] === ':') { hostEnd--; }\n    const host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost(host);\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    const ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      const hostparts = this.hostname.split(/\\./);\n      for (let i = 0, l = hostparts.length; i < l; i++) {\n        const part = hostparts[i];\n        if (!part) { continue }\n        if (!part.match(hostnamePartPattern)) {\n          let newpart = '';\n          for (let j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            const validParts = hostparts.slice(0, i);\n            const notHost = hostparts.slice(i + 1);\n            const bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    }\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n    }\n  }\n\n  // chop off from the tail first.\n  const hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  const qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    rest = rest.slice(0, qm);\n  }\n  if (rest) { this.pathname = rest; }\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '';\n  }\n\n  return this\n};\n\nUrl.prototype.parseHost = function (host) {\n  let port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) { this.hostname = host; }\n};\n\nexports.decode = decode;\nexports.encode = encode;\nexports.format = format;\nexports.parse = urlParse;\n","// codelens.ts\r\nimport * as vscode from \"vscode\";\r\nimport MarkdownIt from \"markdown-it\";\r\n\r\n// Derive the Token type from MarkdownIt's parse() method\r\ntype Token = ReturnType<MarkdownIt[\"parse\"]>[number];\r\n\r\n/**\r\n * Checks if a given token represents an executable code block.\r\n * Only tokens with an info string starting with a curly-brace (e.g. \"{r}\" or \"{python}\") are considered.\r\n *\r\n * @param token A token produced by MarkdownIt.\r\n * @returns true if the token is an executable code cell.\r\n */\r\nfunction isExecutableBlock(token: Token): boolean {\r\n  if (token.type !== \"fence\" || !token.info) return false;\r\n  const firstWord = token.info.trim().split(/\\s+/)[0];\r\n  // Match only if the info string starts with an opening brace.\r\n  const regex = /^\\{(r|python|julia|bash|sql)(?=[,\\}\\s])/;\r\n  return regex.test(firstWord);\r\n}\r\n\r\n/**\r\n * A simple Markdown engine that uses MarkdownIt to parse a VS Code document.\r\n */\r\nclass MarkdownEngine {\r\n  private readonly parser = new MarkdownIt({ html: false });\r\n\r\n  /**\r\n   * Parses the given text document and returns an array of MarkdownIt tokens.\r\n   *\r\n   * @param document The VS Code text document to parse.\r\n   * @returns An array of tokens.\r\n   */\r\n  parse(document: vscode.TextDocument): Token[] {\r\n    return this.parser.parse(document.getText(), {}) as Token[];\r\n  }\r\n}\r\n\r\n/**\r\n * Provides CodeLenses for executable code blocks in Quarto documents.\r\n *\r\n * This provider scans the document for tokens that represent executable code blocks,\r\n * and adds a CodeLens just above each executable block.\r\n *\r\n * @returns A vscode.CodeLensProvider instance.\r\n */\r\nexport function wingsmanCodeLensProvider(): vscode.CodeLensProvider {\r\n  const engine = new MarkdownEngine();\r\n\r\n  return {\r\n    provideCodeLenses(document: vscode.TextDocument, cancellationToken: vscode.CancellationToken): vscode.CodeLens[] {\r\n      const lenses: vscode.CodeLens[] = [];\r\n      const tokens = engine.parse(document);\r\n\r\n      for (const token of tokens) {\r\n        if (cancellationToken.isCancellationRequested) break;\r\n        if (!isExecutableBlock(token) || !token.map) continue;\r\n\r\n        // The token map contains the start and end lines of the block\r\n        const line = token.map[0];\r\n        const range = new vscode.Range(line, 0, line, 0);\r\n\r\n        lenses.push(\r\n          new vscode.CodeLens(range, {\r\n            title: \"$(settings-gear) Cell Options\",\r\n            tooltip: \"Add or edit code cell options\",\r\n            command: \"quarto-wingsman.configureCellOptions\",\r\n            arguments: [line],\r\n          })\r\n        );\r\n      }\r\n      return lenses;\r\n    },\r\n  };\r\n}\r\n","'use strict';\n\nvar uc_micro = require('uc.micro');\n\nfunction reFactory (opts) {\n  const re = {};\n  opts = opts || {};\n\n  re.src_Any = uc_micro.Any.source;\n  re.src_Cc = uc_micro.Cc.source;\n  re.src_Z = uc_micro.Z.source;\n  re.src_P = uc_micro.P.source;\n\n  // \\p{\\Z\\P\\Cc\\CF} (white spaces + control + format + punctuation)\n  re.src_ZPCc = [re.src_Z, re.src_P, re.src_Cc].join('|');\n\n  // \\p{\\Z\\Cc} (white spaces + control)\n  re.src_ZCc = [re.src_Z, re.src_Cc].join('|');\n\n  // Experimental. List of chars, completely prohibited in links\n  // because can separate it from other part of text\n  const text_separators = '[><\\uff5c]';\n\n  // All possible word characters (everything without punctuation, spaces & controls)\n  // Defined via punctuation & spaces to save space\n  // Should be something like \\p{\\L\\N\\S\\M} (\\w but without `_`)\n  re.src_pseudo_letter = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')';\n  // The same as abothe but without [0-9]\n  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';\n\n  re.src_ip4 =\n\n    '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';\n\n  // Prohibit any of \"@/[]()\" in user/pass to avoid wrong domain fetch.\n  re.src_auth = '(?:(?:(?!' + re.src_ZCc + '|[@/\\\\[\\\\]()]).)+@)?';\n\n  re.src_port =\n\n    '(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?';\n\n  re.src_host_terminator =\n\n    '(?=$|' + text_separators + '|' + re.src_ZPCc + ')' +\n    '(?!' + (opts['---'] ? '-(?!--)|' : '-|') + '_|:\\\\d|\\\\.-|\\\\.(?!$|' + re.src_ZPCc + '))';\n\n  re.src_path =\n\n    '(?:' +\n      '[/?#]' +\n        '(?:' +\n          '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\\\]{}.,\"\\'?!\\\\-;]).|' +\n          '\\\\[(?:(?!' + re.src_ZCc + '|\\\\]).)*\\\\]|' +\n          '\\\\((?:(?!' + re.src_ZCc + '|[)]).)*\\\\)|' +\n          '\\\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\\\}|' +\n          '\\\\\"(?:(?!' + re.src_ZCc + '|[\"]).)+\\\\\"|' +\n          \"\\\\'(?:(?!\" + re.src_ZCc + \"|[']).)+\\\\'|\" +\n\n          // allow `I'm_king` if no pair found\n          \"\\\\'(?=\" + re.src_pseudo_letter + '|[-])|' +\n\n          // google has many dots in \"google search\" links (#66, #81).\n          // github has ... in commit range links,\n          // Restrict to\n          // - english\n          // - percent-encoded\n          // - parts of file path\n          // - params separator\n          // until more examples found.\n          '\\\\.{2,}[a-zA-Z0-9%/&]|' +\n\n          '\\\\.(?!' + re.src_ZCc + '|[.]|$)|' +\n          (opts['---']\n            ? '\\\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate\n            : '\\\\-+|'\n          ) +\n          // allow `,,,` in paths\n          ',(?!' + re.src_ZCc + '|$)|' +\n\n          // allow `;` if not followed by space-like char\n          ';(?!' + re.src_ZCc + '|$)|' +\n\n          // allow `!!!` in paths, but not at the end\n          '\\\\!+(?!' + re.src_ZCc + '|[!]|$)|' +\n\n          '\\\\?(?!' + re.src_ZCc + '|[?]|$)' +\n        ')+' +\n      '|\\\\/' +\n    ')?';\n\n  // Allow anything in markdown spec, forbid quote (\") at the first position\n  // because emails enclosed in quotes are far more common\n  re.src_email_name =\n\n    '[\\\\-;:&=\\\\+\\\\$,\\\\.a-zA-Z0-9_][\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]*';\n\n  re.src_xn =\n\n    'xn--[a-z0-9\\\\-]{1,59}';\n\n  // More to read about domain names\n  // http://serverfault.com/questions/638260/\n\n  re.src_domain_root =\n\n    // Allow letters & digits (http://test1)\n    '(?:' +\n      re.src_xn +\n      '|' +\n      re.src_pseudo_letter + '{1,63}' +\n    ')';\n\n  re.src_domain =\n\n    '(?:' +\n      re.src_xn +\n      '|' +\n      '(?:' + re.src_pseudo_letter + ')' +\n      '|' +\n      '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +\n    ')';\n\n  re.src_host =\n\n    '(?:' +\n    // Don't need IP check, because digits are already allowed in normal domain names\n    //   src_ip4 +\n    // '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)*' + re.src_domain/* _root */ + ')' +\n    ')';\n\n  re.tpl_host_fuzzy =\n\n    '(?:' +\n      re.src_ip4 +\n    '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))' +\n    ')';\n\n  re.tpl_host_no_ip_fuzzy =\n\n    '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))';\n\n  re.src_host_strict =\n\n    re.src_host + re.src_host_terminator;\n\n  re.tpl_host_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_host_terminator;\n\n  re.src_host_port_strict =\n\n    re.src_host + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_no_ip_fuzzy_strict =\n\n    re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;\n\n  //\n  // Main rules\n  //\n\n  // Rude test fuzzy links by host, for quick deny\n  re.tpl_host_fuzzy_test =\n\n    'localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';\n\n  re.tpl_email_fuzzy =\n\n      '(^|' + text_separators + '|\"|\\\\(|' + re.src_ZCc + ')' +\n      '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';\n\n  re.tpl_link_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';\n\n  re.tpl_link_no_ip_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';\n\n  return re\n}\n\n//\n// Helpers\n//\n\n// Merge objects\n//\nfunction assign (obj /* from1, from2, from3, ... */) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj\n}\n\nfunction _class (obj) { return Object.prototype.toString.call(obj) }\nfunction isString (obj) { return _class(obj) === '[object String]' }\nfunction isObject (obj) { return _class(obj) === '[object Object]' }\nfunction isRegExp (obj) { return _class(obj) === '[object RegExp]' }\nfunction isFunction (obj) { return _class(obj) === '[object Function]' }\n\nfunction escapeRE (str) { return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&') }\n\n//\n\nconst defaultOptions = {\n  fuzzyLink: true,\n  fuzzyEmail: true,\n  fuzzyIP: false\n};\n\nfunction isOptionsObj (obj) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    /* eslint-disable-next-line no-prototype-builtins */\n    return acc || defaultOptions.hasOwnProperty(k)\n  }, false)\n}\n\nconst defaultSchemas = {\n  'http:': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos);\n\n      if (!self.re.http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.http = new RegExp(\n          '^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'\n        );\n      }\n      if (self.re.http.test(tail)) {\n        return tail.match(self.re.http)[0].length\n      }\n      return 0\n    }\n  },\n  'https:': 'http:',\n  'ftp:': 'http:',\n  '//': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos);\n\n      if (!self.re.no_http) {\n      // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.no_http = new RegExp(\n          '^' +\n          self.re.src_auth +\n          // Don't allow single-level domains, because of false positives like '//test'\n          // with code comments\n          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' +\n          self.re.src_port +\n          self.re.src_host_terminator +\n          self.re.src_path,\n\n          'i'\n        );\n      }\n\n      if (self.re.no_http.test(tail)) {\n        // should not be `://` & `///`, that protects from errors in protocol name\n        if (pos >= 3 && text[pos - 3] === ':') { return 0 }\n        if (pos >= 3 && text[pos - 3] === '/') { return 0 }\n        return tail.match(self.re.no_http)[0].length\n      }\n      return 0\n    }\n  },\n  'mailto:': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos);\n\n      if (!self.re.mailto) {\n        self.re.mailto = new RegExp(\n          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'\n        );\n      }\n      if (self.re.mailto.test(tail)) {\n        return tail.match(self.re.mailto)[0].length\n      }\n      return 0\n    }\n  }\n};\n\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\n/* eslint-disable-next-line max-len */\nconst tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';\n\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\nconst tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');\n\nfunction resetScanCache (self) {\n  self.__index__ = -1;\n  self.__text_cache__ = '';\n}\n\nfunction createValidator (re) {\n  return function (text, pos) {\n    const tail = text.slice(pos);\n\n    if (re.test(tail)) {\n      return tail.match(re)[0].length\n    }\n    return 0\n  }\n}\n\nfunction createNormalizer () {\n  return function (match, self) {\n    self.normalize(match);\n  }\n}\n\n// Schemas compiler. Build regexps.\n//\nfunction compile (self) {\n  // Load & clone RE patterns.\n  const re = self.re = reFactory(self.__opts__);\n\n  // Define dynamic patterns\n  const tlds = self.__tlds__.slice();\n\n  self.onCompile();\n\n  if (!self.__tlds_replaced__) {\n    tlds.push(tlds_2ch_src_re);\n  }\n  tlds.push(re.src_xn);\n\n  re.src_tlds = tlds.join('|');\n\n  function untpl (tpl) { return tpl.replace('%TLDS%', re.src_tlds) }\n\n  re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), 'i');\n  re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), 'i');\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');\n  re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');\n\n  //\n  // Compile each schema\n  //\n\n  const aliases = [];\n\n  self.__compiled__ = {}; // Reset compiled data\n\n  function schemaError (name, val) {\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val)\n  }\n\n  Object.keys(self.__schemas__).forEach(function (name) {\n    const val = self.__schemas__[name];\n\n    // skip disabled methods\n    if (val === null) { return }\n\n    const compiled = { validate: null, link: null };\n\n    self.__compiled__[name] = compiled;\n\n    if (isObject(val)) {\n      if (isRegExp(val.validate)) {\n        compiled.validate = createValidator(val.validate);\n      } else if (isFunction(val.validate)) {\n        compiled.validate = val.validate;\n      } else {\n        schemaError(name, val);\n      }\n\n      if (isFunction(val.normalize)) {\n        compiled.normalize = val.normalize;\n      } else if (!val.normalize) {\n        compiled.normalize = createNormalizer();\n      } else {\n        schemaError(name, val);\n      }\n\n      return\n    }\n\n    if (isString(val)) {\n      aliases.push(name);\n      return\n    }\n\n    schemaError(name, val);\n  });\n\n  //\n  // Compile postponed aliases\n  //\n\n  aliases.forEach(function (alias) {\n    if (!self.__compiled__[self.__schemas__[alias]]) {\n      // Silently fail on missed schemas to avoid errons on disable.\n      // schemaError(alias, self.__schemas__[alias]);\n      return\n    }\n\n    self.__compiled__[alias].validate =\n      self.__compiled__[self.__schemas__[alias]].validate;\n    self.__compiled__[alias].normalize =\n      self.__compiled__[self.__schemas__[alias]].normalize;\n  });\n\n  //\n  // Fake record for guessed links\n  //\n  self.__compiled__[''] = { validate: null, normalize: createNormalizer() };\n\n  //\n  // Build schema condition\n  //\n  const slist = Object.keys(self.__compiled__)\n    .filter(function (name) {\n      // Filter disabled & fake schemas\n      return name.length > 0 && self.__compiled__[name]\n    })\n    .map(escapeRE)\n    .join('|');\n  // (?!_) cause 1.5x slowdown\n  self.re.schema_test = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');\n  self.re.schema_search = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');\n  self.re.schema_at_start = RegExp('^' + self.re.schema_search.source, 'i');\n\n  self.re.pretest = RegExp(\n    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',\n    'i'\n  );\n\n  //\n  // Cleanup\n  //\n\n  resetScanCache(self);\n}\n\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/\nfunction Match (self, shift) {\n  const start = self.__index__;\n  const end = self.__last_index__;\n  const text = self.__text_cache__.slice(start, end);\n\n  /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/\n  this.schema = self.__schema__.toLowerCase();\n  /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/\n  this.index = start + shift;\n  /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/\n  this.lastIndex = end + shift;\n  /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/\n  this.raw = text;\n  /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/\n  this.text = text;\n  /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/\n  this.url = text;\n}\n\nfunction createMatch (self, shift) {\n  const match = new Match(self, shift);\n\n  self.__compiled__[match.schema].normalize(match, self);\n\n  return match\n}\n\n/**\n * class LinkifyIt\n **/\n\n/**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/\nfunction LinkifyIt (schemas, options) {\n  if (!(this instanceof LinkifyIt)) {\n    return new LinkifyIt(schemas, options)\n  }\n\n  if (!options) {\n    if (isOptionsObj(schemas)) {\n      options = schemas;\n      schemas = {};\n    }\n  }\n\n  this.__opts__ = assign({}, defaultOptions, options);\n\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\n  this.__index__ = -1;\n  this.__last_index__ = -1; // Next scan position\n  this.__schema__ = '';\n  this.__text_cache__ = '';\n\n  this.__schemas__ = assign({}, defaultSchemas, schemas);\n  this.__compiled__ = {};\n\n  this.__tlds__ = tlds_default;\n  this.__tlds_replaced__ = false;\n\n  this.re = {};\n\n  compile(this);\n}\n\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/\nLinkifyIt.prototype.add = function add (schema, definition) {\n  this.__schemas__[schema] = definition;\n  compile(this);\n  return this\n};\n\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/\nLinkifyIt.prototype.set = function set (options) {\n  this.__opts__ = assign(this.__opts__, options);\n  return this\n};\n\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/\nLinkifyIt.prototype.test = function test (text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__ = -1;\n\n  if (!text.length) { return false }\n\n  let m, ml, me, len, shift, next, re, tld_pos, at_pos;\n\n  // try to scan for link with schema - that's the most simple rule\n  if (this.re.schema_test.test(text)) {\n    re = this.re.schema_search;\n    re.lastIndex = 0;\n    while ((m = re.exec(text)) !== null) {\n      len = this.testSchemaAt(text, m[2], re.lastIndex);\n      if (len) {\n        this.__schema__ = m[2];\n        this.__index__ = m.index + m[1].length;\n        this.__last_index__ = m.index + m[0].length + len;\n        break\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n    // guess schemaless links\n    tld_pos = text.search(this.re.host_fuzzy_test);\n    if (tld_pos >= 0) {\n      // if tld is located after found link - no need to check fuzzy pattern\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n          shift = ml.index + ml[1].length;\n\n          if (this.__index__ < 0 || shift < this.__index__) {\n            this.__schema__ = '';\n            this.__index__ = shift;\n            this.__last_index__ = ml.index + ml[0].length;\n          }\n        }\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n    // guess schemaless emails\n    at_pos = text.indexOf('@');\n    if (at_pos >= 0) {\n      // We can't skip this check, because this cases are possible:\n      // 192.168.1.1@gmail.com, my.in@example.com\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\n        shift = me.index + me[1].length;\n        next = me.index + me[0].length;\n\n        if (this.__index__ < 0 || shift < this.__index__ ||\n            (shift === this.__index__ && next > this.__last_index__)) {\n          this.__schema__ = 'mailto:';\n          this.__index__ = shift;\n          this.__last_index__ = next;\n        }\n      }\n    }\n  }\n\n  return this.__index__ >= 0\n};\n\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/\nLinkifyIt.prototype.pretest = function pretest (text) {\n  return this.re.pretest.test(text)\n};\n\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt (text, schema, pos) {\n  // If not supported schema check requested - terminate\n  if (!this.__compiled__[schema.toLowerCase()]) {\n    return 0\n  }\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this)\n};\n\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/\nLinkifyIt.prototype.match = function match (text) {\n  const result = [];\n  let shift = 0;\n\n  // Try to take previous element from cache, if .test() called before\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\n    result.push(createMatch(this, shift));\n    shift = this.__last_index__;\n  }\n\n  // Cut head if cache was used\n  let tail = shift ? text.slice(shift) : text;\n\n  // Scan string until end reached\n  while (this.test(tail)) {\n    result.push(createMatch(this, shift));\n\n    tail = tail.slice(this.__last_index__);\n    shift += this.__last_index__;\n  }\n\n  if (result.length) {\n    return result\n  }\n\n  return null\n};\n\n/**\n * LinkifyIt#matchAtStart(text) -> Match|null\n *\n * Returns fully-formed (not fuzzy) link if it starts at the beginning\n * of the string, and null otherwise.\n **/\nLinkifyIt.prototype.matchAtStart = function matchAtStart (text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__ = -1;\n\n  if (!text.length) return null\n\n  const m = this.re.schema_at_start.exec(text);\n  if (!m) return null\n\n  const len = this.testSchemaAt(text, m[2], m[0].length);\n  if (!len) return null\n\n  this.__schema__ = m[2];\n  this.__index__ = m.index + m[1].length;\n  this.__last_index__ = m.index + m[0].length + len;\n\n  return createMatch(this, 0)\n};\n\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/\nLinkifyIt.prototype.tlds = function tlds (list, keepOld) {\n  list = Array.isArray(list) ? list : [list];\n\n  if (!keepOld) {\n    this.__tlds__ = list.slice();\n    this.__tlds_replaced__ = true;\n    compile(this);\n    return this\n  }\n\n  this.__tlds__ = this.__tlds__.concat(list)\n    .sort()\n    .filter(function (el, idx, arr) {\n      return el !== arr[idx - 1]\n    })\n    .reverse();\n\n  compile(this);\n  return this\n};\n\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/\nLinkifyIt.prototype.normalize = function normalize (match) {\n  // Do minimal possible changes by default. Need to collect feedback prior\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\n\n  if (!match.schema) { match.url = 'http://' + match.url; }\n\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n    match.url = 'mailto:' + match.url;\n  }\n};\n\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/\nLinkifyIt.prototype.onCompile = function onCompile () {\n};\n\nmodule.exports = LinkifyIt;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encodeNonAsciiHTML = exports.encodeHTML = void 0;\nvar encode_html_js_1 = __importDefault(require(\"./generated/encode-html.js\"));\nvar escape_js_1 = require(\"./escape.js\");\nvar htmlReplacer = /[\\t\\n!-,./:-@[-`\\f{-}$\\x80-\\uFFFF]/g;\n/**\n * Encodes all characters in the input using HTML entities. This includes\n * characters that are valid ASCII characters in HTML documents, such as `#`.\n *\n * To get a more compact output, consider using the `encodeNonAsciiHTML`\n * function, which will only encode characters that are not valid in HTML\n * documents, as well as non-ASCII characters.\n *\n * If a character has no equivalent entity, a numeric hexadecimal reference\n * (eg. `&#xfc;`) will be used.\n */\nfunction encodeHTML(data) {\n    return encodeHTMLTrieRe(htmlReplacer, data);\n}\nexports.encodeHTML = encodeHTML;\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in HTML\n * documents using HTML entities. This function will not encode characters that\n * are valid in HTML documents, such as `#`.\n *\n * If a character has no equivalent entity, a numeric hexadecimal reference\n * (eg. `&#xfc;`) will be used.\n */\nfunction encodeNonAsciiHTML(data) {\n    return encodeHTMLTrieRe(escape_js_1.xmlReplacer, data);\n}\nexports.encodeNonAsciiHTML = encodeNonAsciiHTML;\nfunction encodeHTMLTrieRe(regExp, str) {\n    var ret = \"\";\n    var lastIdx = 0;\n    var match;\n    while ((match = regExp.exec(str)) !== null) {\n        var i = match.index;\n        ret += str.substring(lastIdx, i);\n        var char = str.charCodeAt(i);\n        var next = encode_html_js_1.default.get(char);\n        if (typeof next === \"object\") {\n            // We are in a branch. Try to match the next char.\n            if (i + 1 < str.length) {\n                var nextChar = str.charCodeAt(i + 1);\n                var value = typeof next.n === \"number\"\n                    ? next.n === nextChar\n                        ? next.o\n                        : undefined\n                    : next.n.get(nextChar);\n                if (value !== undefined) {\n                    ret += value;\n                    lastIdx = regExp.lastIndex += 1;\n                    continue;\n                }\n            }\n            next = next.v;\n        }\n        // We might have a tree node without a value; skip and use a numeric entity.\n        if (next !== undefined) {\n            ret += next;\n            lastIdx = i + 1;\n        }\n        else {\n            var cp = (0, escape_js_1.getCodePoint)(str, i);\n            ret += \"&#x\".concat(cp.toString(16), \";\");\n            // Increase by 1 if we have a surrogate pair\n            lastIdx = regExp.lastIndex += Number(cp !== char);\n        }\n    }\n    return ret + str.substr(lastIdx);\n}\n//# sourceMappingURL=encode.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeXML = exports.decodeHTMLStrict = exports.decodeHTMLAttribute = exports.decodeHTML = exports.determineBranch = exports.EntityDecoder = exports.DecodingMode = exports.BinTrieFlags = exports.fromCodePoint = exports.replaceCodePoint = exports.decodeCodePoint = exports.xmlDecodeTree = exports.htmlDecodeTree = void 0;\nvar decode_data_html_js_1 = __importDefault(require(\"./generated/decode-data-html.js\"));\nexports.htmlDecodeTree = decode_data_html_js_1.default;\nvar decode_data_xml_js_1 = __importDefault(require(\"./generated/decode-data-xml.js\"));\nexports.xmlDecodeTree = decode_data_xml_js_1.default;\nvar decode_codepoint_js_1 = __importStar(require(\"./decode_codepoint.js\"));\nexports.decodeCodePoint = decode_codepoint_js_1.default;\nvar decode_codepoint_js_2 = require(\"./decode_codepoint.js\");\nObject.defineProperty(exports, \"replaceCodePoint\", { enumerable: true, get: function () { return decode_codepoint_js_2.replaceCodePoint; } });\nObject.defineProperty(exports, \"fromCodePoint\", { enumerable: true, get: function () { return decode_codepoint_js_2.fromCodePoint; } });\nvar CharCodes;\n(function (CharCodes) {\n    CharCodes[CharCodes[\"NUM\"] = 35] = \"NUM\";\n    CharCodes[CharCodes[\"SEMI\"] = 59] = \"SEMI\";\n    CharCodes[CharCodes[\"EQUALS\"] = 61] = \"EQUALS\";\n    CharCodes[CharCodes[\"ZERO\"] = 48] = \"ZERO\";\n    CharCodes[CharCodes[\"NINE\"] = 57] = \"NINE\";\n    CharCodes[CharCodes[\"LOWER_A\"] = 97] = \"LOWER_A\";\n    CharCodes[CharCodes[\"LOWER_F\"] = 102] = \"LOWER_F\";\n    CharCodes[CharCodes[\"LOWER_X\"] = 120] = \"LOWER_X\";\n    CharCodes[CharCodes[\"LOWER_Z\"] = 122] = \"LOWER_Z\";\n    CharCodes[CharCodes[\"UPPER_A\"] = 65] = \"UPPER_A\";\n    CharCodes[CharCodes[\"UPPER_F\"] = 70] = \"UPPER_F\";\n    CharCodes[CharCodes[\"UPPER_Z\"] = 90] = \"UPPER_Z\";\n})(CharCodes || (CharCodes = {}));\n/** Bit that needs to be set to convert an upper case ASCII character to lower case */\nvar TO_LOWER_BIT = 32;\nvar BinTrieFlags;\n(function (BinTrieFlags) {\n    BinTrieFlags[BinTrieFlags[\"VALUE_LENGTH\"] = 49152] = \"VALUE_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 16256] = \"BRANCH_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n})(BinTrieFlags = exports.BinTrieFlags || (exports.BinTrieFlags = {}));\nfunction isNumber(code) {\n    return code >= CharCodes.ZERO && code <= CharCodes.NINE;\n}\nfunction isHexadecimalCharacter(code) {\n    return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F) ||\n        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F));\n}\nfunction isAsciiAlphaNumeric(code) {\n    return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z) ||\n        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z) ||\n        isNumber(code));\n}\n/**\n * Checks if the given character is a valid end character for an entity in an attribute.\n *\n * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n */\nfunction isEntityInAttributeInvalidEnd(code) {\n    return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);\n}\nvar EntityDecoderState;\n(function (EntityDecoderState) {\n    EntityDecoderState[EntityDecoderState[\"EntityStart\"] = 0] = \"EntityStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericStart\"] = 1] = \"NumericStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericDecimal\"] = 2] = \"NumericDecimal\";\n    EntityDecoderState[EntityDecoderState[\"NumericHex\"] = 3] = \"NumericHex\";\n    EntityDecoderState[EntityDecoderState[\"NamedEntity\"] = 4] = \"NamedEntity\";\n})(EntityDecoderState || (EntityDecoderState = {}));\nvar DecodingMode;\n(function (DecodingMode) {\n    /** Entities in text nodes that can end with any character. */\n    DecodingMode[DecodingMode[\"Legacy\"] = 0] = \"Legacy\";\n    /** Only allow entities terminated with a semicolon. */\n    DecodingMode[DecodingMode[\"Strict\"] = 1] = \"Strict\";\n    /** Entities in attributes have limitations on ending characters. */\n    DecodingMode[DecodingMode[\"Attribute\"] = 2] = \"Attribute\";\n})(DecodingMode = exports.DecodingMode || (exports.DecodingMode = {}));\n/**\n * Token decoder with support of writing partial entities.\n */\nvar EntityDecoder = /** @class */ (function () {\n    function EntityDecoder(\n    /** The tree used to decode entities. */\n    decodeTree, \n    /**\n     * The function that is called when a codepoint is decoded.\n     *\n     * For multi-byte named entities, this will be called multiple times,\n     * with the second codepoint, and the same `consumed` value.\n     *\n     * @param codepoint The decoded codepoint.\n     * @param consumed The number of bytes consumed by the decoder.\n     */\n    emitCodePoint, \n    /** An object that is used to produce errors. */\n    errors) {\n        this.decodeTree = decodeTree;\n        this.emitCodePoint = emitCodePoint;\n        this.errors = errors;\n        /** The current state of the decoder. */\n        this.state = EntityDecoderState.EntityStart;\n        /** Characters that were consumed while parsing an entity. */\n        this.consumed = 1;\n        /**\n         * The result of the entity.\n         *\n         * Either the result index of a numeric entity, or the codepoint of a\n         * numeric entity.\n         */\n        this.result = 0;\n        /** The current index in the decode tree. */\n        this.treeIndex = 0;\n        /** The number of characters that were consumed in excess. */\n        this.excess = 1;\n        /** The mode in which the decoder is operating. */\n        this.decodeMode = DecodingMode.Strict;\n    }\n    /** Resets the instance to make it reusable. */\n    EntityDecoder.prototype.startEntity = function (decodeMode) {\n        this.decodeMode = decodeMode;\n        this.state = EntityDecoderState.EntityStart;\n        this.result = 0;\n        this.treeIndex = 0;\n        this.excess = 1;\n        this.consumed = 1;\n    };\n    /**\n     * Write an entity to the decoder. This can be called multiple times with partial entities.\n     * If the entity is incomplete, the decoder will return -1.\n     *\n     * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the\n     * entity is incomplete, and resume when the next string is written.\n     *\n     * @param string The string containing the entity (or a continuation of the entity).\n     * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    EntityDecoder.prototype.write = function (str, offset) {\n        switch (this.state) {\n            case EntityDecoderState.EntityStart: {\n                if (str.charCodeAt(offset) === CharCodes.NUM) {\n                    this.state = EntityDecoderState.NumericStart;\n                    this.consumed += 1;\n                    return this.stateNumericStart(str, offset + 1);\n                }\n                this.state = EntityDecoderState.NamedEntity;\n                return this.stateNamedEntity(str, offset);\n            }\n            case EntityDecoderState.NumericStart: {\n                return this.stateNumericStart(str, offset);\n            }\n            case EntityDecoderState.NumericDecimal: {\n                return this.stateNumericDecimal(str, offset);\n            }\n            case EntityDecoderState.NumericHex: {\n                return this.stateNumericHex(str, offset);\n            }\n            case EntityDecoderState.NamedEntity: {\n                return this.stateNamedEntity(str, offset);\n            }\n        }\n    };\n    /**\n     * Switches between the numeric decimal and hexadecimal states.\n     *\n     * Equivalent to the `Numeric character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    EntityDecoder.prototype.stateNumericStart = function (str, offset) {\n        if (offset >= str.length) {\n            return -1;\n        }\n        if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {\n            this.state = EntityDecoderState.NumericHex;\n            this.consumed += 1;\n            return this.stateNumericHex(str, offset + 1);\n        }\n        this.state = EntityDecoderState.NumericDecimal;\n        return this.stateNumericDecimal(str, offset);\n    };\n    EntityDecoder.prototype.addToNumericResult = function (str, start, end, base) {\n        if (start !== end) {\n            var digitCount = end - start;\n            this.result =\n                this.result * Math.pow(base, digitCount) +\n                    parseInt(str.substr(start, digitCount), base);\n            this.consumed += digitCount;\n        }\n    };\n    /**\n     * Parses a hexadecimal numeric entity.\n     *\n     * Equivalent to the `Hexademical character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    EntityDecoder.prototype.stateNumericHex = function (str, offset) {\n        var startIdx = offset;\n        while (offset < str.length) {\n            var char = str.charCodeAt(offset);\n            if (isNumber(char) || isHexadecimalCharacter(char)) {\n                offset += 1;\n            }\n            else {\n                this.addToNumericResult(str, startIdx, offset, 16);\n                return this.emitNumericEntity(char, 3);\n            }\n        }\n        this.addToNumericResult(str, startIdx, offset, 16);\n        return -1;\n    };\n    /**\n     * Parses a decimal numeric entity.\n     *\n     * Equivalent to the `Decimal character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    EntityDecoder.prototype.stateNumericDecimal = function (str, offset) {\n        var startIdx = offset;\n        while (offset < str.length) {\n            var char = str.charCodeAt(offset);\n            if (isNumber(char)) {\n                offset += 1;\n            }\n            else {\n                this.addToNumericResult(str, startIdx, offset, 10);\n                return this.emitNumericEntity(char, 2);\n            }\n        }\n        this.addToNumericResult(str, startIdx, offset, 10);\n        return -1;\n    };\n    /**\n     * Validate and emit a numeric entity.\n     *\n     * Implements the logic from the `Hexademical character reference start\n     * state` and `Numeric character reference end state` in the HTML spec.\n     *\n     * @param lastCp The last code point of the entity. Used to see if the\n     *               entity was terminated with a semicolon.\n     * @param expectedLength The minimum number of characters that should be\n     *                       consumed. Used to validate that at least one digit\n     *                       was consumed.\n     * @returns The number of characters that were consumed.\n     */\n    EntityDecoder.prototype.emitNumericEntity = function (lastCp, expectedLength) {\n        var _a;\n        // Ensure we consumed at least one digit.\n        if (this.consumed <= expectedLength) {\n            (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n            return 0;\n        }\n        // Figure out if this is a legit end of the entity\n        if (lastCp === CharCodes.SEMI) {\n            this.consumed += 1;\n        }\n        else if (this.decodeMode === DecodingMode.Strict) {\n            return 0;\n        }\n        this.emitCodePoint((0, decode_codepoint_js_1.replaceCodePoint)(this.result), this.consumed);\n        if (this.errors) {\n            if (lastCp !== CharCodes.SEMI) {\n                this.errors.missingSemicolonAfterCharacterReference();\n            }\n            this.errors.validateNumericCharacterReference(this.result);\n        }\n        return this.consumed;\n    };\n    /**\n     * Parses a named entity.\n     *\n     * Equivalent to the `Named character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    EntityDecoder.prototype.stateNamedEntity = function (str, offset) {\n        var decodeTree = this.decodeTree;\n        var current = decodeTree[this.treeIndex];\n        // The mask is the number of bytes of the value, including the current byte.\n        var valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n        for (; offset < str.length; offset++, this.excess++) {\n            var char = str.charCodeAt(offset);\n            this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);\n            if (this.treeIndex < 0) {\n                return this.result === 0 ||\n                    // If we are parsing an attribute\n                    (this.decodeMode === DecodingMode.Attribute &&\n                        // We shouldn't have consumed any characters after the entity,\n                        (valueLength === 0 ||\n                            // And there should be no invalid characters.\n                            isEntityInAttributeInvalidEnd(char)))\n                    ? 0\n                    : this.emitNotTerminatedNamedEntity();\n            }\n            current = decodeTree[this.treeIndex];\n            valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n            // If the branch is a value, store it and continue\n            if (valueLength !== 0) {\n                // If the entity is terminated by a semicolon, we are done.\n                if (char === CharCodes.SEMI) {\n                    return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);\n                }\n                // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.\n                if (this.decodeMode !== DecodingMode.Strict) {\n                    this.result = this.treeIndex;\n                    this.consumed += this.excess;\n                    this.excess = 0;\n                }\n            }\n        }\n        return -1;\n    };\n    /**\n     * Emit a named entity that was not terminated with a semicolon.\n     *\n     * @returns The number of characters consumed.\n     */\n    EntityDecoder.prototype.emitNotTerminatedNamedEntity = function () {\n        var _a;\n        var _b = this, result = _b.result, decodeTree = _b.decodeTree;\n        var valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;\n        this.emitNamedEntityData(result, valueLength, this.consumed);\n        (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();\n        return this.consumed;\n    };\n    /**\n     * Emit a named entity.\n     *\n     * @param result The index of the entity in the decode tree.\n     * @param valueLength The number of bytes in the entity.\n     * @param consumed The number of characters consumed.\n     *\n     * @returns The number of characters consumed.\n     */\n    EntityDecoder.prototype.emitNamedEntityData = function (result, valueLength, consumed) {\n        var decodeTree = this.decodeTree;\n        this.emitCodePoint(valueLength === 1\n            ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH\n            : decodeTree[result + 1], consumed);\n        if (valueLength === 3) {\n            // For multi-byte values, we need to emit the second byte.\n            this.emitCodePoint(decodeTree[result + 2], consumed);\n        }\n        return consumed;\n    };\n    /**\n     * Signal to the parser that the end of the input was reached.\n     *\n     * Remaining data will be emitted and relevant errors will be produced.\n     *\n     * @returns The number of characters consumed.\n     */\n    EntityDecoder.prototype.end = function () {\n        var _a;\n        switch (this.state) {\n            case EntityDecoderState.NamedEntity: {\n                // Emit a named entity if we have one.\n                return this.result !== 0 &&\n                    (this.decodeMode !== DecodingMode.Attribute ||\n                        this.result === this.treeIndex)\n                    ? this.emitNotTerminatedNamedEntity()\n                    : 0;\n            }\n            // Otherwise, emit a numeric entity if we have one.\n            case EntityDecoderState.NumericDecimal: {\n                return this.emitNumericEntity(0, 2);\n            }\n            case EntityDecoderState.NumericHex: {\n                return this.emitNumericEntity(0, 3);\n            }\n            case EntityDecoderState.NumericStart: {\n                (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n                return 0;\n            }\n            case EntityDecoderState.EntityStart: {\n                // Return 0 if we have no entity.\n                return 0;\n            }\n        }\n    };\n    return EntityDecoder;\n}());\nexports.EntityDecoder = EntityDecoder;\n/**\n * Creates a function that decodes entities in a string.\n *\n * @param decodeTree The decode tree.\n * @returns A function that decodes entities in a string.\n */\nfunction getDecoder(decodeTree) {\n    var ret = \"\";\n    var decoder = new EntityDecoder(decodeTree, function (str) { return (ret += (0, decode_codepoint_js_1.fromCodePoint)(str)); });\n    return function decodeWithTrie(str, decodeMode) {\n        var lastIndex = 0;\n        var offset = 0;\n        while ((offset = str.indexOf(\"&\", offset)) >= 0) {\n            ret += str.slice(lastIndex, offset);\n            decoder.startEntity(decodeMode);\n            var len = decoder.write(str, \n            // Skip the \"&\"\n            offset + 1);\n            if (len < 0) {\n                lastIndex = offset + decoder.end();\n                break;\n            }\n            lastIndex = offset + len;\n            // If `len` is 0, skip the current `&` and continue.\n            offset = len === 0 ? lastIndex + 1 : lastIndex;\n        }\n        var result = ret + str.slice(lastIndex);\n        // Make sure we don't keep a reference to the final string.\n        ret = \"\";\n        return result;\n    };\n}\n/**\n * Determines the branch of the current node that is taken given the current\n * character. This function is used to traverse the trie.\n *\n * @param decodeTree The trie.\n * @param current The current node.\n * @param nodeIdx The index right after the current node and its value.\n * @param char The current character.\n * @returns The index of the next node, or -1 if no branch is taken.\n */\nfunction determineBranch(decodeTree, current, nodeIdx, char) {\n    var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;\n    var jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n    // Case 1: Single branch encoded in jump offset\n    if (branchCount === 0) {\n        return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;\n    }\n    // Case 2: Multiple branches encoded in jump table\n    if (jumpOffset) {\n        var value = char - jumpOffset;\n        return value < 0 || value >= branchCount\n            ? -1\n            : decodeTree[nodeIdx + value] - 1;\n    }\n    // Case 3: Multiple branches encoded in dictionary\n    // Binary search for the character.\n    var lo = nodeIdx;\n    var hi = lo + branchCount - 1;\n    while (lo <= hi) {\n        var mid = (lo + hi) >>> 1;\n        var midVal = decodeTree[mid];\n        if (midVal < char) {\n            lo = mid + 1;\n        }\n        else if (midVal > char) {\n            hi = mid - 1;\n        }\n        else {\n            return decodeTree[mid + branchCount];\n        }\n    }\n    return -1;\n}\nexports.determineBranch = determineBranch;\nvar htmlDecoder = getDecoder(decode_data_html_js_1.default);\nvar xmlDecoder = getDecoder(decode_data_xml_js_1.default);\n/**\n * Decodes an HTML string.\n *\n * @param str The string to decode.\n * @param mode The decoding mode.\n * @returns The decoded string.\n */\nfunction decodeHTML(str, mode) {\n    if (mode === void 0) { mode = DecodingMode.Legacy; }\n    return htmlDecoder(str, mode);\n}\nexports.decodeHTML = decodeHTML;\n/**\n * Decodes an HTML string in an attribute.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nfunction decodeHTMLAttribute(str) {\n    return htmlDecoder(str, DecodingMode.Attribute);\n}\nexports.decodeHTMLAttribute = decodeHTMLAttribute;\n/**\n * Decodes an HTML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nfunction decodeHTMLStrict(str) {\n    return htmlDecoder(str, DecodingMode.Strict);\n}\nexports.decodeHTMLStrict = decodeHTMLStrict;\n/**\n * Decodes an XML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nfunction decodeXML(str) {\n    return xmlDecoder(str, DecodingMode.Strict);\n}\nexports.decodeXML = decodeXML;\n//# sourceMappingURL=decode.js.map","import * as vscode from 'vscode';\r\nimport * as positron from 'positron';\r\n\r\nfunction reportError(msg: string) {\r\n    return (err: string) => console.error(`${msg}: ${err}`);\r\n}\r\n\r\nconst replPattern = /^(\\s*#>?\\s+)?>>>(.*)$/;\r\n\r\nexport function registerInlineRepl(context: vscode.ExtensionContext) {\r\n    const selector: vscode.DocumentSelector = [\r\n        { language: 'python', scheme: 'file' },\r\n        { language: 'r', scheme: 'file' }\r\n    ];\r\n\r\n    function detectLanguage(document: vscode.TextDocument): 'python' | 'r' | null {\r\n        const langId = document.languageId;\r\n        if (langId === 'python') return 'python';\r\n        if (langId === 'r') return 'r';\r\n        return null;\r\n    }\r\n\r\n    function parseReplBlockAt(\r\n        document: vscode.TextDocument, lineNum: number):\r\n        [number, null | {\r\n            headerRange: vscode.Range,\r\n            outputRange: vscode.Range,\r\n            commands: string[],\r\n            prefix: string\r\n        }] {\r\n        const { lineCount } = document;\r\n        const headerLine = document.lineAt(lineNum);\r\n        const header = headerLine.text.trimEnd();\r\n        const headerRes = replPattern.exec(header);\r\n        if (!headerRes) return [lineNum + 1, null];\r\n\r\n        const headerLineNum = lineNum;\r\n        const prefix = headerRes[1] || '';\r\n        const commands: string[] = [];\r\n\r\n        for (; lineNum < lineCount; lineNum++) {\r\n            const line = document.lineAt(lineNum).text.trimEnd();\r\n            const lineRes = replPattern.exec(line);\r\n            if (line.startsWith(prefix) && lineRes !== null) {\r\n                commands.push(lineRes[2]);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        const outputLineNum = lineNum;\r\n\r\n        for (; lineNum < lineCount; lineNum++) {\r\n            const line = document.lineAt(lineNum).text.trimEnd();\r\n            if (line === prefix.trim()) {\r\n                lineNum++;\r\n                break;\r\n            }\r\n            if (replPattern.test(line) || !line.startsWith(prefix)) break;\r\n        }\r\n\r\n        const headerRange = new vscode.Range(\r\n            document.lineAt(headerLineNum).range.start,\r\n            document.lineAt(outputLineNum - 1).range.end\r\n        );\r\n\r\n        const outputRange = new vscode.Range(\r\n            document.lineAt(outputLineNum).range.start,\r\n            outputLineNum === lineNum\r\n                ? document.lineAt(outputLineNum).range.start\r\n                : document.lineAt(lineNum - 1).range.end\r\n        );\r\n\r\n        return [lineNum, { headerRange, outputRange, commands, prefix }];\r\n    }\r\n\r\n    function generateReplacement(\r\n        response: string,\r\n        outputRange: vscode.Range,\r\n        prefix: string\r\n    ): string {\r\n        let responseLines = response.split(/\\r?\\n/);\r\n        if (responseLines[0] === '') responseLines.shift();\r\n        if (responseLines[responseLines.length - 1] === '') responseLines.pop();\r\n        const commentPrefix = prefix || '# ';\r\n        const outputLines = responseLines.map(line => commentPrefix + (line === '' ? '<BLANKLINE>' : line));\r\n        const end = outputRange.isEmpty ? '\\n' : '';\r\n        return outputLines.map(s => s + '\\n').join('') + commentPrefix.trim() + end;\r\n    }\r\n\r\n    async function runInlineRepl(\r\n        editor: vscode.TextEditor,\r\n        edit: vscode.TextEditorEdit,\r\n        arg?: { headerLineNum: number; isRunning: { flag: boolean } }\r\n    ): Promise<void> {\r\n        if (!arg) return;\r\n        const { headerLineNum, isRunning } = arg;\r\n        if (isRunning.flag) return;\r\n        isRunning.flag = true;\r\n\r\n        const lang = detectLanguage(editor.document);\r\n        if (!lang) return;\r\n\r\n        const [, res] = parseReplBlockAt(editor.document, headerLineNum);\r\n        if (!res) return;\r\n        const { outputRange, commands, prefix } = res;\r\n\r\n        const codeBlock = commands.join('\\n');\r\n\r\n        try {\r\n            const result = await positron.runtime.executeCode(\r\n                lang,\r\n                codeBlock,\r\n                false,\r\n                undefined,\r\n                positron.RuntimeCodeExecutionMode.Interactive\r\n            );\r\n\r\n            const replacement = generateReplacement(result.output, outputRange, prefix);\r\n            await editor.edit(e => e.replace(outputRange, replacement));\r\n        } catch (e) {\r\n            console.error('REPL execution failed:', e);\r\n        } finally {\r\n            isRunning.flag = false;\r\n        }\r\n    }\r\n\r\n    context.subscriptions.push(\r\n        vscode.commands.registerTextEditorCommand(\r\n            'inline-repl.run',\r\n            (editor, edit, arg) => {\r\n                runInlineRepl(editor, edit, arg).catch(reportError('Inline REPL error'));\r\n            }\r\n        )\r\n    );\r\n\r\n    context.subscriptions.push(\r\n        vscode.languages.registerCodeLensProvider(selector, {\r\n            provideCodeLenses(document: vscode.TextDocument): vscode.ProviderResult<vscode.CodeLens[]> {\r\n                const codeLenses: vscode.CodeLens[] = [];\r\n                const lineCount = document.lineCount;\r\n\r\n                for (let lineNum = 0; lineNum < lineCount;) {\r\n                    const [nextLine, res] = parseReplBlockAt(document, lineNum);\r\n                    lineNum = nextLine;\r\n                    if (res) {\r\n                        const command: vscode.Command = {\r\n                            title: '▶ Run Inline Code',\r\n                            command: 'inline-repl.run',\r\n                            arguments: [\r\n                                {\r\n                                    headerLineNum: res.headerRange.start.line,\r\n                                    isRunning: { flag: false }\r\n                                }\r\n                            ]\r\n                        };\r\n                        codeLenses.push(new vscode.CodeLens(res.headerRange, command));\r\n                    }\r\n                }\r\n\r\n                return codeLenses;\r\n            }\r\n        })\r\n    );\r\n}\r\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.escapeText = exports.escapeAttribute = exports.escapeUTF8 = exports.escape = exports.encodeXML = exports.getCodePoint = exports.xmlReplacer = void 0;\nexports.xmlReplacer = /[\"&'<>$\\x80-\\uFFFF]/g;\nvar xmlCodeMap = new Map([\n    [34, \"&quot;\"],\n    [38, \"&amp;\"],\n    [39, \"&apos;\"],\n    [60, \"&lt;\"],\n    [62, \"&gt;\"],\n]);\n// For compatibility with node < 4, we wrap `codePointAt`\nexports.getCodePoint = \n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nString.prototype.codePointAt != null\n    ? function (str, index) { return str.codePointAt(index); }\n    : // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        function (c, index) {\n            return (c.charCodeAt(index) & 0xfc00) === 0xd800\n                ? (c.charCodeAt(index) - 0xd800) * 0x400 +\n                    c.charCodeAt(index + 1) -\n                    0xdc00 +\n                    0x10000\n                : c.charCodeAt(index);\n        };\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using XML entities.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\nfunction encodeXML(str) {\n    var ret = \"\";\n    var lastIdx = 0;\n    var match;\n    while ((match = exports.xmlReplacer.exec(str)) !== null) {\n        var i = match.index;\n        var char = str.charCodeAt(i);\n        var next = xmlCodeMap.get(char);\n        if (next !== undefined) {\n            ret += str.substring(lastIdx, i) + next;\n            lastIdx = i + 1;\n        }\n        else {\n            ret += \"\".concat(str.substring(lastIdx, i), \"&#x\").concat((0, exports.getCodePoint)(str, i).toString(16), \";\");\n            // Increase by 1 if we have a surrogate pair\n            lastIdx = exports.xmlReplacer.lastIndex += Number((char & 0xfc00) === 0xd800);\n        }\n    }\n    return ret + str.substr(lastIdx);\n}\nexports.encodeXML = encodeXML;\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using numeric hexadecimal reference (eg. `&#xfc;`).\n *\n * Have a look at `escapeUTF8` if you want a more concise output at the expense\n * of reduced transportability.\n *\n * @param data String to escape.\n */\nexports.escape = encodeXML;\n/**\n * Creates a function that escapes all characters matched by the given regular\n * expression using the given map of characters to escape to their entities.\n *\n * @param regex Regular expression to match characters to escape.\n * @param map Map of characters to escape to their entities.\n *\n * @returns Function that escapes all characters matched by the given regular\n * expression using the given map of characters to escape to their entities.\n */\nfunction getEscaper(regex, map) {\n    return function escape(data) {\n        var match;\n        var lastIdx = 0;\n        var result = \"\";\n        while ((match = regex.exec(data))) {\n            if (lastIdx !== match.index) {\n                result += data.substring(lastIdx, match.index);\n            }\n            // We know that this character will be in the map.\n            result += map.get(match[0].charCodeAt(0));\n            // Every match will be of length 1\n            lastIdx = match.index + 1;\n        }\n        return result + data.substring(lastIdx);\n    };\n}\n/**\n * Encodes all characters not valid in XML documents using XML entities.\n *\n * Note that the output will be character-set dependent.\n *\n * @param data String to escape.\n */\nexports.escapeUTF8 = getEscaper(/[&<>'\"]/g, xmlCodeMap);\n/**\n * Encodes all characters that have to be escaped in HTML attributes,\n * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n *\n * @param data String to escape.\n */\nexports.escapeAttribute = getEscaper(/[\"&\\u00A0]/g, new Map([\n    [34, \"&quot;\"],\n    [38, \"&amp;\"],\n    [160, \"&nbsp;\"],\n]));\n/**\n * Encodes all characters that have to be escaped in HTML text,\n * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n *\n * @param data String to escape.\n */\nexports.escapeText = getEscaper(/[&<>\\u00A0]/g, new Map([\n    [38, \"&amp;\"],\n    [60, \"&lt;\"],\n    [62, \"&gt;\"],\n    [160, \"&nbsp;\"],\n]));\n//# sourceMappingURL=escape.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["_a","Object","defineProperty","exports","value","replaceCodePoint","fromCodePoint","decodeMap","Map","codePoint","get","String","output","fromCharCode","async","context","registerCellOptionsCommands","subscriptions","push","vscode","languages","registerCodeLensProvider","language","wingsmanCodeLensProvider","registerCellOptionHoverProvider","registerInlineRepl","module","require","mdurl","ucmicro","entities","LinkifyIt","punycode","_interopNamespaceDefault","e","n","create","keys","forEach","k","d","getOwnPropertyDescriptor","enumerable","default","freeze","mdurl__namespace","ucmicro__namespace","isString","obj","prototype","toString","call","_class","_hasOwnProperty","hasOwnProperty","assign","Array","slice","arguments","source","TypeError","key","arrayReplaceAt","src","pos","newElements","concat","isValidEntityCode","c","surrogate1","surrogate2","UNESCAPE_MD_RE","UNESCAPE_ALL_RE","RegExp","DIGITAL_ENTITY_TEST_RE","unescapeAll","str","indexOf","replace","match","escaped","entity","name","charCodeAt","test","code","toLowerCase","parseInt","decoded","decodeHTML","replaceEntityPattern","HTML_ESCAPE_TEST_RE","HTML_ESCAPE_REPLACE_RE","HTML_REPLACEMENTS","replaceUnsafeChar","ch","escapeHtml","REGEXP_ESCAPE_RE","isSpace","isWhiteSpace","isPunctChar","P","S","isMdAsciiPunct","normalizeReference","trim","toUpperCase","lib","utils","__proto__","escapeRE","has","object","unescapeMd","helpers","parseLinkDestination","start","max","result","ok","level","parseLinkLabel","state","disableNested","found","marker","prevPos","posMax","oldPos","md","inline","skipToken","labelEnd","parseLinkTitle","prev_state","can_continue","default_rules","Renderer","this","rules","Ruler","__rules__","__cache__","Token","type","tag","nesting","attrs","map","children","content","markup","info","meta","block","hidden","StateCore","env","tokens","inlineMode","code_inline","idx","options","slf","token","renderAttrs","code_block","fence","highlighted","langName","langAttrs","arr","split","join","highlight","i","attrIndex","tmpAttrs","langPrefix","tmpToken","image","renderInlineAsText","renderToken","hardbreak","xhtmlOut","softbreak","breaks","text","html_block","html_inline","l","length","needLf","nextToken","renderInline","len","render","__find__","__compile__","self","chains","rule","enabled","alt","altName","chain","fn","at","index","opt","Error","before","beforeName","ruleName","splice","after","afterName","enable","list","ignoreInvalid","isArray","enableOnly","disable","getRules","chainName","attrPush","attrData","attrSet","attrGet","attrJoin","NEWLINES_RE","NULL_RE","isLinkClose$1","RARE_RE","SCOPED_ABBR_TEST_RE","SCOPED_ABBR_RE","SCOPED_ABBR","r","tm","replaceFn","replace_scoped","inlineTokens","inside_autolink","replace_rare","QUOTE_TEST_RE","QUOTE_RE","replaceAt","process_inlines","j","stack","thisLevel","OUTER","lastIndex","t","exec","canOpen","canClose","isSingle","lastChar","nextChar","isLastPunctChar","isNextPunctChar","isLastWhiteSpace","isNextWhiteSpace","item","single","openQuote","closeQuote","quotes","_rules$2","parse","tok","blockTokens","linkify","pretest","htmlLinkLevel","currentToken","links","nodes","lastPos","ln","url","fullUrl","normalizeLink","validateLink","urlText","schema","normalizeLinkText","token_o","token_t","token_c","blkIdx","typographer","curr","last","Core","ruler","StateBlock","bMarks","eMarks","tShift","sCount","bsCount","blkIndent","line","lineMax","tight","ddIndent","listIndent","parentType","s","indent","offset","indent_found","getLine","escapedSplit","isEscaped","current","substring","skipBulletListMarker","startLine","skipOrderedListMarker","process","State","isEmpty","skipEmptyLines","from","skipSpaces","skipSpacesBack","min","skipChars","skipCharsBack","getLines","begin","end","keepLastLF","queue","lineIndent","lineStart","first","open_tag","close_tag","HTML_TAG_RE","HTML_OPEN_CLOSE_TAG_RE","HTML_SEQUENCES","_rules$1","endLine","silent","nextLine","firstCh","secondCh","lineText","columns","aligns","shift","pop","columnCount","oldParentType","terminatorRules","tableLines","token_ho","token_il","tbodyLines","autocompletedCells","terminate","token_tdo","mem","params","haveEndMarker","oldLineMax","oldBMarks","oldBSCount","oldSCount","oldTShift","lastLineEmpty","isOutdented","spaceAfterMarker","adjustTab","initial","oldIndent","lines","tokenize","cnt","isOrdered","markerValue","posAfterMarker","isTerminatingParagraph","Number","markerCharCode","listTokIdx","listLines","prevEmptyEnd","contentStart","indentAfterMarker","itemLines","oldTight","oldListIndent","Math","markTightParagraphs","_endLine","getNextLine","isContinuation","lineContent","destRes","href","destEndPos","destEndLineNo","title","titleRes","label","references","html","tmp","token_i","ParserBlock","StateInline","outTokens","tokens_meta","pending","pendingLevel","cache","delimiters","_prev_delimiters","backticks","backticksScanned","linkLevel","isTerminatorChar","maxNesting","hasEmptyLines","prevLine","pushPending","token_meta","scanDelims","canSplitWord","count","left_flanking","right_flanking","can_open","can_close","SCHEME_RE","ESCAPED","postProcess$1","loneMarkers","startDelim","endDelim","r_strikethrough","scanned","open","close","postProcess","isStrong","r_emphasis","EMAIL_RE","AUTOLINK_RE","DIGITAL_RE","NAMED_RE","processDelimiters","openersBottom","headerIdx","lastTokenIdx","jumps","closerIdx","closer","minOpenerIdx","openerIdx","newMinOpenerIdx","opener","isOddMatch","lastJump","_rules","proto","link","matchAtStart","pmax","ws","ch1","escapedStr","ch2","origStr","openerLength","matchStart","matchEnd","closerLength","res","ref","parseReference","labelStart","lc","isLetter","isLinkClose","_rules2","ParserInline","ruler2","config","components","core","zero","rules2","commonmark","BAD_PROTO_RE","GOOD_DATA_RE","RECODE_HOSTNAME_FOR","parsed","hostname","protocol","toASCII","er","encode","format","toUnicode","decode","defaultChars","MarkdownIt","presetName","renderer","configure","set","presets","missed","filter","use","plugin","args","apply","parseInline","cellOptions","eval","maxInt","base","regexPunycode","regexNonASCII","regexSeparators","errors","floor","stringFromCharCode","error","RangeError","mapDomain","domain","callback","parts","encoded","array","ucs2decode","string","counter","extra","ucs2encode","codePoints","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","baseMinusTMin","input","inputLength","bias","basic","lastIndexOf","oldi","w","baseMinusT","out","currentValue","basicLength","handledCPCount","m","handledCPCountPlusOne","q","qMinusT","registerHoverProvider","provideHover","document","position","lineAt","trimStart","range","getWordRangeAtPosition","word","getText","groupKey","group","markdown","MarkdownString","appendMarkdown","isTrusted","Hover","Any","Cc","Cf","Z","restoreDiff","v","o","Uint16Array","command","ConfigureCellOptionsCommand","disposable","commands","registerCommand","id","execute","editor","window","activeTextEditor","mainSections","category","description","detail","mainPick","showQuickPick","placeHolder","chosenSection","subOptions","optionKey","subPick","finalKey","custom","showInputBox","prompt","undefined","insertPos","Position","edit","editBuilder","insert","decodeXMLStrict","decodeHTML5Strict","decodeHTML4Strict","decodeHTML5","decodeHTML4","decodeHTMLAttribute","decodeHTMLStrict","decodeXML","DecodingMode","EntityDecoder","encodeHTML5","encodeHTML4","encodeNonAsciiHTML","encodeHTML","escapeText","escapeAttribute","escapeUTF8","escape","encodeXML","decodeStrict","EncodingMode","EntityLevel","decode_js_1","encode_js_1","escape_js_1","data","XML","HTML","mode","opts","Strict","UTF8","Attribute","Text","ASCII","escape_js_2","encode_js_2","decode_js_2","decodeCache","exclude","getDecodeCache","seq","b1","b2","chr","b3","b4","componentChars","encodeCache","keepEscaped","getEncodeCache","nextCode","encodeURIComponent","Url","slashes","auth","port","hash","search","pathname","protocolPattern","portPattern","simplePathPattern","unwise","autoEscape","nonHostChars","hostEndingChars","hostnamePartPattern","hostnamePartStart","hostlessProtocol","javascript","slashedProtocol","http","https","ftp","gopher","file","slashesDenoteHost","lowerProto","hec","rest","simplePath","substr","atSign","hostEnd","host","parseHost","ipv6Hostname","hostparts","part","newpart","validParts","notHost","bit","unshift","qm","u","engine","MarkdownEngine","provideCodeLenses","cancellationToken","lenses","isCancellationRequested","isExecutableBlock","Range","CodeLens","tooltip","firstWord","parser","uc_micro","isFunction","defaultOptions","fuzzyLink","fuzzyEmail","fuzzyIP","defaultSchemas","validate","tail","re","src_auth","src_host_port_strict","src_path","no_http","src_domain","src_domain_root","src_port","src_host_terminator","mailto","src_email_name","src_host_strict","tlds_default","compile","src_Any","src_Cc","src_Z","src_P","src_ZPCc","src_ZCc","src_pseudo_letter","src_ip4","src_xn","src_host","tpl_host_fuzzy","tpl_host_no_ip_fuzzy","tpl_host_fuzzy_strict","tpl_host_port_fuzzy_strict","tpl_host_port_no_ip_fuzzy_strict","tpl_host_fuzzy_test","tpl_email_fuzzy","tpl_link_fuzzy","tpl_link_no_ip_fuzzy","reFactory","__opts__","tlds","__tlds__","untpl","tpl","src_tlds","onCompile","__tlds_replaced__","email_fuzzy","link_fuzzy","link_no_ip_fuzzy","host_fuzzy_test","aliases","schemaError","val","__compiled__","__schemas__","compiled","createValidator","normalize","alias","slist","schema_test","schema_search","schema_at_start","__index__","__text_cache__","resetScanCache","Match","__last_index__","__schema__","raw","createMatch","schemas","reduce","acc","add","definition","ml","me","next","tld_pos","at_pos","testSchemaAt","keepOld","sort","el","reverse","__importDefault","mod","__esModule","encode_html_js_1","htmlReplacer","encodeHTMLTrieRe","regExp","ret","lastIdx","char","cp","getCodePoint","xmlReplacer","__createBinding","k2","desc","writable","configurable","__setModuleDefault","__importStar","determineBranch","BinTrieFlags","decodeCodePoint","xmlDecodeTree","htmlDecodeTree","decode_data_html_js_1","decode_data_xml_js_1","decode_codepoint_js_1","CharCodes","EntityDecoderState","decode_codepoint_js_2","isNumber","ZERO","NINE","decodeTree","emitCodePoint","EntityStart","consumed","treeIndex","excess","decodeMode","startEntity","write","NUM","NumericStart","stateNumericStart","NamedEntity","stateNamedEntity","NumericDecimal","stateNumericDecimal","NumericHex","stateNumericHex","LOWER_X","addToNumericResult","digitCount","pow","startIdx","UPPER_A","UPPER_F","LOWER_A","LOWER_F","emitNumericEntity","lastCp","expectedLength","absenceOfDigitsInNumericCharacterReference","SEMI","missingSemicolonAfterCharacterReference","validateNumericCharacterReference","valueLength","VALUE_LENGTH","EQUALS","UPPER_Z","LOWER_Z","isAsciiAlphaNumeric","emitNotTerminatedNamedEntity","emitNamedEntityData","getDecoder","decoder","nodeIdx","branchCount","BRANCH_LENGTH","jumpOffset","JUMP_TABLE","lo","hi","mid","midVal","htmlDecoder","xmlDecoder","Legacy","parseReplBlockAt","lineNum","lineCount","header","trimEnd","headerRes","replPattern","headerLineNum","prefix","lineRes","startsWith","outputLineNum","headerRange","outputRange","registerTextEditorCommand","arg","isRunning","lang","langId","languageId","detectLanguage","codeBlock","replacement","response","responseLines","commentPrefix","outputLines","generateReplacement","positron","runtime","executeCode","RuntimeCodeExecutionMode","Interactive","console","runInlineRepl","catch","err","scheme","codeLenses","xmlCodeMap","getEscaper","regex","codePointAt","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","prop","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}